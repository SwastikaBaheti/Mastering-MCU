
STM32F4xx_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003214  08003214  00004214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003314  08003314  00005074  2**0
                  CONTENTS
  4 .ARM          00000008  08003314  08003314  00004314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800331c  0800331c  00005074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800331c  0800331c  0000431c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003320  08003320  00004320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08003324  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005074  2**0
                  CONTENTS
 10 .bss          000001ac  20000074  20000074  00005074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00005074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002d68  00000000  00000000  000050a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bfc  00000000  00000000  00007e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00008a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002cc  00000000  00000000  00008dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ca7  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000470c  00000000  00000000  0000cd43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cb68  00000000  00000000  0001144f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001dfb7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000016e4  00000000  00000000  0001dffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  0001f6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080031fc 	.word	0x080031fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080031fc 	.word	0x080031fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <DS1307_init>:
static uint8_t DS1307_read(uint8_t registerAddr);
static uint8_t ConvertBCDtoBinary(uint8_t bdcValue);
static uint8_t ConvertBinarytoBCD(uint8_t binaryValue);

/*Initialize the DS1307 RTC module*/
uint8_t DS1307_init(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

	//1. Initialize the I2C pins
	DS1307_I2C_GpioPinInit();
 8000a52:	f000 f931 	bl	8000cb8 <DS1307_I2C_GpioPinInit>

	//2. Initialize the I2C peripheral
	DS1307_I2C_Config();
 8000a56:	f000 f96f 	bl	8000d38 <DS1307_I2C_Config>

	//3. Enable the oscillator for DS1307 module (CH bit clear)
	DS1307_write(0x00, DS1307_ADDR_SEC);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f985 	bl	8000d6c <DS1307_write>

	//4. Read the contents of the Seconds register to check if CH bit = 0
	uint8_t clockState = DS1307_read(DS1307_ADDR_SEC);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 f99e 	bl	8000da4 <DS1307_read>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	71fb      	strb	r3, [r7, #7]
	 * If the return value if 1, then the CH bit is still set, otherwise it got cleared with our write operation
	 * CH=1: Init failed
	 * CH=0: Init successful
	 *
	 * */
	return ((clockState >> 7) & 0x1);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	09db      	lsrs	r3, r3, #7
 8000a70:	b2db      	uxtb	r3, r3
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <DS1307_setCurrentTime>:

/*Set the current time*/
void DS1307_setCurrentTime(RTC_Time_t *pRTCTime){
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]

	/*Set the current seconds*/
	uint8_t currentSeconds = ConvertBinarytoBCD(pRTCTime->seconds);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	789b      	ldrb	r3, [r3, #2]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f9ce 	bl	8000e28 <ConvertBinarytoBCD>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	73bb      	strb	r3, [r7, #14]
	//Clear the CH bit, otherwise the oscillator will get disabled
	currentSeconds &= ~(0x1 << 7);
 8000a90:	7bbb      	ldrb	r3, [r7, #14]
 8000a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a96:	73bb      	strb	r3, [r7, #14]
	DS1307_write(currentSeconds, DS1307_ADDR_SEC);
 8000a98:	7bbb      	ldrb	r3, [r7, #14]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f965 	bl	8000d6c <DS1307_write>

	/*Set the current minutes*/
	uint8_t currentMinutes = ConvertBinarytoBCD(pRTCTime->minutes);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f9be 	bl	8000e28 <ConvertBinarytoBCD>
 8000aac:	4603      	mov	r3, r0
 8000aae:	737b      	strb	r3, [r7, #13]
	DS1307_write(currentMinutes, DS1307_ADDR_MIN);
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f959 	bl	8000d6c <DS1307_write>

	/*Set the current hour with specifying time format*/
	uint8_t currentHours = ConvertBinarytoBCD(pRTCTime->hours);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f9b2 	bl	8000e28 <ConvertBinarytoBCD>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	73fb      	strb	r3, [r7, #15]
	if(pRTCTime->timeFormat == TIME_FORMAT_12HRS_AM){
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d108      	bne.n	8000ae2 <DS1307_setCurrentTime+0x68>
		//12 hours format
		currentHours |= (0x1 << 6);
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad6:	73fb      	strb	r3, [r7, #15]
		//AM
		currentHours &= ~(0x1 << 5);
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	f023 0320 	bic.w	r3, r3, #32
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e01b      	b.n	8000b1a <DS1307_setCurrentTime+0xa0>
	} else if(pRTCTime->timeFormat == TIME_FORMAT_12HRS_PM){
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	78db      	ldrb	r3, [r3, #3]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d108      	bne.n	8000afc <DS1307_setCurrentTime+0x82>
		//12 hours format
		currentHours |= (0x1 << 6);
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000af0:	73fb      	strb	r3, [r7, #15]
		//PM
		currentHours |= (0x1 << 5);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e00e      	b.n	8000b1a <DS1307_setCurrentTime+0xa0>
	} else if(pRTCTime->timeFormat == TIME_FORMAT_24HRS){
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	78db      	ldrb	r3, [r3, #3]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d10a      	bne.n	8000b1a <DS1307_setCurrentTime+0xa0>
		//24 hours format
		currentHours &= ~(0x1 << 6);
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000b0a:	73fb      	strb	r3, [r7, #15]
		//Re-enter the value
		currentHours = ConvertBinarytoBCD(pRTCTime->hours);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f989 	bl	8000e28 <ConvertBinarytoBCD>
 8000b16:	4603      	mov	r3, r0
 8000b18:	73fb      	strb	r3, [r7, #15]
	}
	DS1307_write(currentHours, DS1307_ADDR_HRS);
 8000b1a:	7bfb      	ldrb	r3, [r7, #15]
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f924 	bl	8000d6c <DS1307_write>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <DS1307_getCurrentTime>:

/*Get the current time*/
void DS1307_getCurrentTime(RTC_Time_t *pRTCTime){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

	/*Get the current seconds*/
	uint8_t currentSeconds = DS1307_read(DS1307_ADDR_SEC);
 8000b34:	2000      	movs	r0, #0
 8000b36:	f000 f935 	bl	8000da4 <DS1307_read>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]
	//Clear the CH bit, otherwise the oscillator will get disabled
	currentSeconds &= ~(0x1 << 7);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b44:	73fb      	strb	r3, [r7, #15]
	currentSeconds = ConvertBCDtoBinary(currentSeconds);
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f94b 	bl	8000de4 <ConvertBCDtoBinary>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	73fb      	strb	r3, [r7, #15]

	/*Get the current minutes*/
	uint8_t currentMinutes = DS1307_read(DS1307_ADDR_MIN);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f926 	bl	8000da4 <DS1307_read>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73bb      	strb	r3, [r7, #14]
	currentMinutes = ConvertBCDtoBinary(currentMinutes);
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 f940 	bl	8000de4 <ConvertBCDtoBinary>
 8000b64:	4603      	mov	r3, r0
 8000b66:	73bb      	strb	r3, [r7, #14]

	/*Get the current hours*/
	uint8_t currentHours = DS1307_read(DS1307_ADDR_HRS);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 f91b 	bl	8000da4 <DS1307_read>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	737b      	strb	r3, [r7, #13]
	if(currentHours & (0x1 << 6)){
 8000b72:	7b7b      	ldrb	r3, [r7, #13]
 8000b74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d00b      	beq.n	8000b94 <DS1307_getCurrentTime+0x68>
		//12 hours format with AM/PM
		pRTCTime->timeFormat = !((currentHours & (0x1 << 5)) == 0);
 8000b7c:	7b7b      	ldrb	r3, [r7, #13]
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	70da      	strb	r2, [r3, #3]
 8000b92:	e002      	b.n	8000b9a <DS1307_getCurrentTime+0x6e>
	} else{
		//24 hours format
		pRTCTime->timeFormat = TIME_FORMAT_24HRS;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2202      	movs	r2, #2
 8000b98:	70da      	strb	r2, [r3, #3]
	}

	currentHours &= ~(0x3 < 5);
 8000b9a:	7b7b      	ldrb	r3, [r7, #13]
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	737b      	strb	r3, [r7, #13]
	currentHours = ConvertBCDtoBinary(currentHours);
 8000ba2:	7b7b      	ldrb	r3, [r7, #13]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 f91d 	bl	8000de4 <ConvertBCDtoBinary>
 8000baa:	4603      	mov	r3, r0
 8000bac:	737b      	strb	r3, [r7, #13]

	pRTCTime->seconds = currentSeconds;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7bfa      	ldrb	r2, [r7, #15]
 8000bb2:	709a      	strb	r2, [r3, #2]
	pRTCTime->minutes = currentMinutes;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7bba      	ldrb	r2, [r7, #14]
 8000bb8:	705a      	strb	r2, [r3, #1]
	pRTCTime->hours = currentHours;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7b7a      	ldrb	r2, [r7, #13]
 8000bbe:	701a      	strb	r2, [r3, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <DS1307_setCurrentDate>:

/*Set the current date*/
void DS1307_setCurrentDate(RTC_Date_t *pRTCDate){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

	/*Set the current date*/
	uint8_t currentDate = ConvertBinarytoBCD(pRTCDate->date);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f927 	bl	8000e28 <ConvertBinarytoBCD>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]
	DS1307_write(currentDate, DS1307_ADDR_DATE);
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2104      	movs	r1, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f8c2 	bl	8000d6c <DS1307_write>

	/*Set the current month*/
	uint8_t currentMonth = ConvertBinarytoBCD(pRTCDate->month);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	785b      	ldrb	r3, [r3, #1]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f91b 	bl	8000e28 <ConvertBinarytoBCD>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	73bb      	strb	r3, [r7, #14]
	DS1307_write(currentMonth, DS1307_ADDR_MONTH);
 8000bf6:	7bbb      	ldrb	r3, [r7, #14]
 8000bf8:	2105      	movs	r1, #5
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f8b6 	bl	8000d6c <DS1307_write>

	/*Set the current year*/
	uint8_t currentYear = ConvertBinarytoBCD(pRTCDate->year);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	789b      	ldrb	r3, [r3, #2]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f000 f90f 	bl	8000e28 <ConvertBinarytoBCD>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	737b      	strb	r3, [r7, #13]
	DS1307_write(currentYear, DS1307_ADDR_YEAR);
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	2106      	movs	r1, #6
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f8aa 	bl	8000d6c <DS1307_write>

	/*Set the current day*/
	uint8_t currentDay = ConvertBinarytoBCD(pRTCDate->day);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	78db      	ldrb	r3, [r3, #3]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f000 f903 	bl	8000e28 <ConvertBinarytoBCD>
 8000c22:	4603      	mov	r3, r0
 8000c24:	733b      	strb	r3, [r7, #12]
	DS1307_write(currentDay, DS1307_ADDR_DAY);
 8000c26:	7b3b      	ldrb	r3, [r7, #12]
 8000c28:	2103      	movs	r1, #3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f89e 	bl	8000d6c <DS1307_write>
}
 8000c30:	bf00      	nop
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <DS1307_getCurrentDate>:

/*Get the current date*/
void DS1307_getCurrentDate(RTC_Date_t *pRTCDate){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

	/*Get the current date*/
	uint8_t currentDate = DS1307_read(DS1307_ADDR_DATE);
 8000c40:	2004      	movs	r0, #4
 8000c42:	f000 f8af 	bl	8000da4 <DS1307_read>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
	currentDate = ConvertBCDtoBinary(currentDate);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f8c9 	bl	8000de4 <ConvertBCDtoBinary>
 8000c52:	4603      	mov	r3, r0
 8000c54:	73fb      	strb	r3, [r7, #15]

	/*Get the current month*/
	uint8_t currentMonth = DS1307_read(DS1307_ADDR_MONTH);
 8000c56:	2005      	movs	r0, #5
 8000c58:	f000 f8a4 	bl	8000da4 <DS1307_read>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	73bb      	strb	r3, [r7, #14]
	currentMonth = ConvertBCDtoBinary(currentMonth);
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8be 	bl	8000de4 <ConvertBCDtoBinary>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73bb      	strb	r3, [r7, #14]

	/*Get the current year*/
	uint8_t currentYear = DS1307_read(DS1307_ADDR_YEAR);
 8000c6c:	2006      	movs	r0, #6
 8000c6e:	f000 f899 	bl	8000da4 <DS1307_read>
 8000c72:	4603      	mov	r3, r0
 8000c74:	737b      	strb	r3, [r7, #13]
	currentYear = ConvertBCDtoBinary(currentYear);
 8000c76:	7b7b      	ldrb	r3, [r7, #13]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f8b3 	bl	8000de4 <ConvertBCDtoBinary>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	737b      	strb	r3, [r7, #13]

	/*Get the current day*/
	uint8_t currentDay = DS1307_read(DS1307_ADDR_DAY);
 8000c82:	2003      	movs	r0, #3
 8000c84:	f000 f88e 	bl	8000da4 <DS1307_read>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	733b      	strb	r3, [r7, #12]
	currentDay = ConvertBCDtoBinary(currentDay);
 8000c8c:	7b3b      	ldrb	r3, [r7, #12]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f8a8 	bl	8000de4 <ConvertBCDtoBinary>
 8000c94:	4603      	mov	r3, r0
 8000c96:	733b      	strb	r3, [r7, #12]

	pRTCDate->date = currentDate;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	701a      	strb	r2, [r3, #0]
	pRTCDate->month = currentMonth;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	705a      	strb	r2, [r3, #1]
	pRTCDate->year = currentYear;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7b7a      	ldrb	r2, [r7, #13]
 8000ca8:	709a      	strb	r2, [r3, #2]
	pRTCDate->day = currentDay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	7b3a      	ldrb	r2, [r7, #12]
 8000cae:	70da      	strb	r2, [r3, #3]
}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <DS1307_I2C_GpioPinInit>:

/*Initialize the GPIO pins that needs to be connected to the RTC module*/
static void DS1307_I2C_GpioPinInit(void){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
	GPIO_Handle_t i2c_sda, i2c_scl;
	memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fc7f 	bl	80025ca <memset>
	memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000ccc:	463b      	mov	r3, r7
 8000cce:	220c      	movs	r2, #12
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f001 fc79 	bl	80025ca <memset>
	 * I2C1_SCL => PB6
	 * I2C1_SDA => PB7
	 * */

	/*Initialize I2C1_SCL pin*/
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <DS1307_I2C_GpioPinInit+0x7c>)
 8000cda:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIOPinConfig.GPIO_PinAltFuncMode = AF4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIOPinConfig.GPIO_PinMode = ALT_FUNC_MODE;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIOPinConfig.GPIO_PinNumber = DS1307_I2C_SCL;
 8000ce4:	2306      	movs	r3, #6
 8000ce6:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIOPinConfig.GPIO_PinOPType = OUT_OPEN_DRAIN;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIOPinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000cec:	2301      	movs	r3, #1
 8000cee:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIOPinConfig.GPIO_PinSpeed = HIGH_SPEED;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	74bb      	strb	r3, [r7, #18]

	/*Initialize I2C1_SDA pin*/
	i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <DS1307_I2C_GpioPinInit+0x7c>)
 8000cf6:	60fb      	str	r3, [r7, #12]
	i2c_sda.GPIOPinConfig.GPIO_PinAltFuncMode = AF4;
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	757b      	strb	r3, [r7, #21]
	i2c_sda.GPIOPinConfig.GPIO_PinMode = ALT_FUNC_MODE;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	747b      	strb	r3, [r7, #17]
	i2c_sda.GPIOPinConfig.GPIO_PinNumber = DS1307_I2C_SDA;
 8000d00:	2307      	movs	r3, #7
 8000d02:	743b      	strb	r3, [r7, #16]
	i2c_sda.GPIOPinConfig.GPIO_PinOPType = OUT_OPEN_DRAIN;
 8000d04:	2301      	movs	r3, #1
 8000d06:	753b      	strb	r3, [r7, #20]
	i2c_sda.GPIOPinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	74fb      	strb	r3, [r7, #19]
	i2c_sda.GPIOPinConfig.GPIO_PinSpeed = HIGH_SPEED;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	74bb      	strb	r3, [r7, #18]

	GPIO_PeriClkControl(DS1307_I2C_GPIO_PORT, ENABLE);
 8000d10:	2101      	movs	r1, #1
 8000d12:	4808      	ldr	r0, [pc, #32]	@ (8000d34 <DS1307_I2C_GpioPinInit+0x7c>)
 8000d14:	f000 fa58 	bl	80011c8 <GPIO_PeriClkControl>
	GPIO_Init(&i2c_sda);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fb3b 	bl	8001398 <GPIO_Init>
	GPIO_Init(&i2c_sda);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 fb36 	bl	8001398 <GPIO_Init>
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40020400 	.word	0x40020400

08000d38 <DS1307_I2C_Config>:

/*Configure the I2C*/
static void DS1307_I2C_Config(void){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	ds1307_i2c_handle.pI2Cx = I2C1;
 8000d3c:	4b08      	ldr	r3, [pc, #32]	@ (8000d60 <DS1307_I2C_Config+0x28>)
 8000d3e:	4a09      	ldr	r2, [pc, #36]	@ (8000d64 <DS1307_I2C_Config+0x2c>)
 8000d40:	601a      	str	r2, [r3, #0]

	ds1307_i2c_handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 8000d42:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <DS1307_I2C_Config+0x28>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	725a      	strb	r2, [r3, #9]
	ds1307_i2c_handle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <DS1307_I2C_Config+0x28>)
 8000d4a:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <DS1307_I2C_Config+0x30>)
 8000d4c:	605a      	str	r2, [r3, #4]

	I2C_PeriClkControl(DS1307_I2C, ENABLE);
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <DS1307_I2C_Config+0x2c>)
 8000d52:	f000 fd81 	bl	8001858 <I2C_PeriClkControl>
	I2C_Init(&ds1307_i2c_handle);
 8000d56:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <DS1307_I2C_Config+0x28>)
 8000d58:	f000 fdd6 	bl	8001908 <I2C_Init>
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000090 	.word	0x20000090
 8000d64:	40005400 	.word	0x40005400
 8000d68:	000186a0 	.word	0x000186a0

08000d6c <DS1307_write>:

/*Write into the DS1307 RTC module*/
static void DS1307_write(uint8_t dataValue, uint8_t registerAddr){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
	uint8_t txData[2];
	txData[0] = registerAddr;
 8000d7c:	79bb      	ldrb	r3, [r7, #6]
 8000d7e:	733b      	strb	r3, [r7, #12]
	txData[1] = dataValue;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	737b      	strb	r3, [r7, #13]

	I2C_MasterTransmitData(&ds1307_i2c_handle, txData, sizeof(txData), DS1307_I2C_ADDR, I2C_STOP_EN);
 8000d84:	f107 010c 	add.w	r1, r7, #12
 8000d88:	2301      	movs	r3, #1
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	2368      	movs	r3, #104	@ 0x68
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4803      	ldr	r0, [pc, #12]	@ (8000da0 <DS1307_write+0x34>)
 8000d92:	f000 feed 	bl	8001b70 <I2C_MasterTransmitData>
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000090 	.word	0x20000090

08000da4 <DS1307_read>:

/*Read from the DS1307 RTC module*/
static uint8_t DS1307_read(uint8_t registerAddr){
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
	uint8_t txData = registerAddr;
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxData;

	I2C_MasterTransmitData(&ds1307_i2c_handle, &txData, 1, DS1307_I2C_ADDR, I2C_STOP_DI);
 8000db2:	f107 010f 	add.w	r1, r7, #15
 8000db6:	2300      	movs	r3, #0
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2368      	movs	r3, #104	@ 0x68
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	4808      	ldr	r0, [pc, #32]	@ (8000de0 <DS1307_read+0x3c>)
 8000dc0:	f000 fed6 	bl	8001b70 <I2C_MasterTransmitData>
	I2C_MasterReceiveData(&ds1307_i2c_handle, &rxData, 1, DS1307_I2C_ADDR, I2C_STOP_EN);
 8000dc4:	f107 010e 	add.w	r1, r7, #14
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2368      	movs	r3, #104	@ 0x68
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	@ (8000de0 <DS1307_read+0x3c>)
 8000dd2:	f000 ff36 	bl	8001c42 <I2C_MasterReceiveData>

	return rxData;
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000090 	.word	0x20000090

08000de4 <ConvertBCDtoBinary>:

/*Convert BCD to Binary value*/
static uint8_t ConvertBCDtoBinary(uint8_t bcdValue){
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	uint8_t binaryValue;

	if(bcdValue >= 10){
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b09      	cmp	r3, #9
 8000df2:	d910      	bls.n	8000e16 <ConvertBCDtoBinary+0x32>
		uint8_t t = (uint8_t)(bcdValue >> 4);
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	73bb      	strb	r3, [r7, #14]
		uint8_t u = (uint8_t)(bcdValue & 0x0F);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	737b      	strb	r3, [r7, #13]
		binaryValue = ((10*t) + u);
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	461a      	mov	r2, r3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	4413      	add	r3, r2
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <ConvertBCDtoBinary+0x36>
	} else{
		binaryValue = bcdValue;
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	73fb      	strb	r3, [r7, #15]
	}

	return binaryValue;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <ConvertBinarytoBCD>:

/*Convert binary to BCD value*/
static uint8_t ConvertBinarytoBCD(uint8_t binaryValue){
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	uint8_t bcdValue;

	if(binaryValue >= 10){
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b09      	cmp	r3, #9
 8000e36:	d919      	bls.n	8000e6c <ConvertBinarytoBCD+0x44>
		uint8_t t = binaryValue/10;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	@ (8000e80 <ConvertBinarytoBCD+0x58>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	08db      	lsrs	r3, r3, #3
 8000e42:	73bb      	strb	r3, [r7, #14]
		uint8_t u = binaryValue%10;
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <ConvertBinarytoBCD+0x58>)
 8000e48:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4c:	08d9      	lsrs	r1, r3, #3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	737b      	strb	r3, [r7, #13]
		bcdValue = (uint8_t)((t << 4) | u);
 8000e5a:	7bbb      	ldrb	r3, [r7, #14]
 8000e5c:	011b      	lsls	r3, r3, #4
 8000e5e:	b25a      	sxtb	r2, r3
 8000e60:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	73fb      	strb	r3, [r7, #15]
 8000e6a:	e001      	b.n	8000e70 <ConvertBinarytoBCD+0x48>
	} else{
		bcdValue = binaryValue;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	73fb      	strb	r3, [r7, #15]
	}

	return bcdValue;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	cccccccd 	.word	0xcccccccd

08000e84 <LCD_init>:
static void udelay(uint8_t delayValue);
static void write_bits(uint8_t data);
static void lcd_enable(void);

/*Initializing the LCD*/
void LCD_init(void){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

	/*1. Configure the GPIO pins connected to the LCD*/
	GPIO_Handle_t lcd_gpio_handler;
	lcd_gpio_handler.pGPIOx = LCD_GPIO_PORT;
 8000e8a:	4b44      	ldr	r3, [pc, #272]	@ (8000f9c <LCD_init+0x118>)
 8000e8c:	607b      	str	r3, [r7, #4]

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinMode = OUTPUT_MODE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	727b      	strb	r3, [r7, #9]
	lcd_gpio_handler.GPIOPinConfig.GPIO_PinOPType = OUT_PUSH_PULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	733b      	strb	r3, [r7, #12]
	lcd_gpio_handler.GPIOPinConfig.GPIO_PinPuPdControl = NO_PUPD;
 8000e96:	2300      	movs	r3, #0
 8000e98:	72fb      	strb	r3, [r7, #11]
	lcd_gpio_handler.GPIOPinConfig.GPIO_PinSpeed = HIGH_SPEED;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	72bb      	strb	r3, [r7, #10]

	GPIO_PeriClkControl(LCD_GPIO_PORT, ENABLE);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	483e      	ldr	r0, [pc, #248]	@ (8000f9c <LCD_init+0x118>)
 8000ea2:	f000 f991 	bl	80011c8 <GPIO_PeriClkControl>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_RS;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fa73 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_RW;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 fa6d 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_EN;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 fa67 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_D4;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 fa61 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_D5;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 fa5b 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_D6;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 fa55 	bl	8001398 <GPIO_Init>

	lcd_gpio_handler.GPIOPinConfig.GPIO_PinNumber = LCD_GPIO_D7;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&lcd_gpio_handler);
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fa4f 	bl	8001398 <GPIO_Init>

	//Setting the state of output pins as LOW initially
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	4827      	ldr	r0, [pc, #156]	@ (8000f9c <LCD_init+0x118>)
 8000f00:	f000 fc88 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2101      	movs	r1, #1
 8000f08:	4824      	ldr	r0, [pc, #144]	@ (8000f9c <LCD_init+0x118>)
 8000f0a:	f000 fc83 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2102      	movs	r1, #2
 8000f12:	4822      	ldr	r0, [pc, #136]	@ (8000f9c <LCD_init+0x118>)
 8000f14:	f000 fc7e 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	481f      	ldr	r0, [pc, #124]	@ (8000f9c <LCD_init+0x118>)
 8000f1e:	f000 fc79 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2104      	movs	r1, #4
 8000f26:	481d      	ldr	r0, [pc, #116]	@ (8000f9c <LCD_init+0x118>)
 8000f28:	f000 fc74 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, 0);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2105      	movs	r1, #5
 8000f30:	481a      	ldr	r0, [pc, #104]	@ (8000f9c <LCD_init+0x118>)
 8000f32:	f000 fc6f 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2106      	movs	r1, #6
 8000f3a:	4818      	ldr	r0, [pc, #96]	@ (8000f9c <LCD_init+0x118>)
 8000f3c:	f000 fc6a 	bl	8001814 <GPIO_WriteToOutputPin>

	/*2. LCD initialization (initially sending instructions)*/

	//Give 40ms delay to the LCD after powering the LCD
	mdelay(40);
 8000f40:	2028      	movs	r0, #40	@ 0x28
 8000f42:	f000 f8c2 	bl	80010ca <mdelay>

	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, 0); //RS=0: Instruction register
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <LCD_init+0x118>)
 8000f4c:	f000 fc62 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, 0); //RW=0: Writing into the LCD
 8000f50:	2200      	movs	r2, #0
 8000f52:	2101      	movs	r1, #1
 8000f54:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <LCD_init+0x118>)
 8000f56:	f000 fc5d 	bl	8001814 <GPIO_WriteToOutputPin>

	//Set the values of D4-D7 and RS, RW bits
	write_bits(0x3);
 8000f5a:	2003      	movs	r0, #3
 8000f5c:	f000 f8e6 	bl	800112c <write_bits>

	//Give 4.1ms delay to the LCD
	mdelay(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f000 f8b2 	bl	80010ca <mdelay>

	//Set the values of D4-D7 and RS, RW bits
	write_bits(0x3);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 f8e0 	bl	800112c <write_bits>

	//Give 100 microseconds delay to the LCD
	udelay(150);
 8000f6c:	2096      	movs	r0, #150	@ 0x96
 8000f6e:	f000 f8c7 	bl	8001100 <udelay>

	//Set the values of D4-D7 and RS, RW bits
	write_bits(0x3);
 8000f72:	2003      	movs	r0, #3
 8000f74:	f000 f8da 	bl	800112c <write_bits>

	//Set the values of D4-D7 and RS, RW bits
	write_bits(0x2);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 f8d7 	bl	800112c <write_bits>

	/*3. Sending LCD commands*/
	LCD_send_command(LCD_CMD_4DL_2N_5X8F);
 8000f7e:	2028      	movs	r0, #40	@ 0x28
 8000f80:	f000 f80e 	bl	8000fa0 <LCD_send_command>
	LCD_send_command(LCD_CMD_DON_CURON);
 8000f84:	200e      	movs	r0, #14
 8000f86:	f000 f80b 	bl	8000fa0 <LCD_send_command>
	LCD_clear_display();
 8000f8a:	f000 f88a 	bl	80010a2 <LCD_clear_display>
	LCD_send_command(LCD_CMD_INCADD);
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f000 f806 	bl	8000fa0 <LCD_send_command>
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40020c00 	.word	0x40020c00

08000fa0 <LCD_send_command>:

/*Send the command code (1 byte) to the LCD*/
void LCD_send_command(uint8_t cmd){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]

	/* NOTE
	 * RS=0 for LCD command
	 * RW=0 while writing the command
	 * */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, 0); //RS=0: Instruction register
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LCD_send_command+0x40>)
 8000fb0:	f000 fc30 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, 0); //RW=0: Writing into the LCD
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	4809      	ldr	r0, [pc, #36]	@ (8000fe0 <LCD_send_command+0x40>)
 8000fba:	f000 fc2b 	bl	8001814 <GPIO_WriteToOutputPin>

	//Sending the higher nibble to the LCD over the 4 data lines
	write_bits((cmd >> 4) & 0XF);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	091b      	lsrs	r3, r3, #4
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f8b1 	bl	800112c <write_bits>

	//Sending the lower nibble to the LCD over the 4 data lines
	write_bits(cmd & 0XF);
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 030f 	and.w	r3, r3, #15
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f8aa 	bl	800112c <write_bits>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <LCD_send_char>:

/*Send the data (1 byte) to the LCD*/
void LCD_send_char(uint8_t data){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]

	/* NOTE
	 * RS=1 for LCD data
	 * RW=0 while writing the data
	 * */
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RS, 1); //RS=1: Data register
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <LCD_send_char+0x40>)
 8000ff4:	f000 fc0e 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_RW, 0); //RW=0: Writing into the LCD
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	4809      	ldr	r0, [pc, #36]	@ (8001024 <LCD_send_char+0x40>)
 8000ffe:	f000 fc09 	bl	8001814 <GPIO_WriteToOutputPin>

	//Sending the higher nibble to the LCD over the 4 data lines
	write_bits((data >> 4) & 0XF);
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	091b      	lsrs	r3, r3, #4
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f88f 	bl	800112c <write_bits>

	//Sending the lower nibble to the LCD over the 4 data lines
	write_bits(data & 0XF);
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	b2db      	uxtb	r3, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f888 	bl	800112c <write_bits>
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	40020c00 	.word	0x40020c00

08001028 <LCD_send_string>:

/*Send a string (multiple bytes) to the LCD*/
void LCD_send_string(char* message){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]

	while(*message != '\0'){
 8001030:	e007      	b.n	8001042 <LCD_send_string+0x1a>
		LCD_send_char((uint8_t)*message);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ffd4 	bl	8000fe4 <LCD_send_char>
		message++;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3301      	adds	r3, #1
 8001040:	607b      	str	r3, [r7, #4]
	while(*message != '\0'){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f3      	bne.n	8001032 <LCD_send_string+0xa>
	}
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <LCD_set_cursor>:
 * Row: 1-2
 * Column: 1-16
 * Every co-ordinate is associated to a DDRAM address that needs to be
 * accessed when setting a co-ordinate
 * */
void LCD_set_cursor(uint8_t row, uint8_t column){
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
	column--;
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	3b01      	subs	r3, #1
 8001068:	71bb      	strb	r3, [r7, #6]
	switch(row){
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d002      	beq.n	8001076 <LCD_set_cursor+0x22>
 8001070:	2b02      	cmp	r3, #2
 8001072:	d009      	beq.n	8001088 <LCD_set_cursor+0x34>
	case 1: LCD_send_command((column |= 0x80));
	break;
	/*When the row 2 is selected*/
	case 2: LCD_send_command((column |= 0xC0));
	break;
	default: break;
 8001074:	e011      	b.n	800109a <LCD_set_cursor+0x46>
	case 1: LCD_send_command((column |= 0x80));
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800107c:	71bb      	strb	r3, [r7, #6]
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff8d 	bl	8000fa0 <LCD_send_command>
	break;
 8001086:	e008      	b.n	800109a <LCD_set_cursor+0x46>
	case 2: LCD_send_command((column |= 0xC0));
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	79bb      	ldrb	r3, [r7, #6]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ff84 	bl	8000fa0 <LCD_send_command>
	break;
 8001098:	bf00      	nop
	}
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <LCD_clear_display>:

/*Clear the data displayed on the LCD*/
void LCD_clear_display(void){
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
	LCD_send_command(LCD_CMD_DIS_CLEAR);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff ff7a 	bl	8000fa0 <LCD_send_command>
	mdelay(2);
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 f80c 	bl	80010ca <mdelay>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LCD_display_return_home>:

/*Set the cursor to the original position*/
void LCD_display_return_home(void){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
	LCD_send_command(LCD_CMD_DIS_RETURN_HOME);
 80010ba:	2002      	movs	r0, #2
 80010bc:	f7ff ff70 	bl	8000fa0 <LCD_send_command>
	mdelay(2);
 80010c0:	2002      	movs	r0, #2
 80010c2:	f000 f802 	bl	80010ca <mdelay>
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}

080010ca <mdelay>:

/*Delay for x milliseconds*/
static void mdelay(uint8_t delayValue){
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i=0; i<(delayValue*1000); i++);
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e002      	b.n	80010e0 <mdelay+0x16>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d3f3      	bcc.n	80010da <mdelay+0x10>
}
 80010f2:	bf00      	nop
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <udelay>:

/*Delay for x microseconds*/
static void udelay(uint8_t delayValue){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	for(uint32_t i=0; i<delayValue; i++);
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e002      	b.n	8001116 <udelay+0x16>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	68fa      	ldr	r2, [r7, #12]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3f8      	bcc.n	8001110 <udelay+0x10>
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <write_bits>:

/*Write 4 bits of data into the data lines D4, D5, D6 and D7*/
static void write_bits(uint8_t data){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D4, ((data >> 0) & 0x1));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	2103      	movs	r1, #3
 8001142:	4815      	ldr	r0, [pc, #84]	@ (8001198 <write_bits+0x6c>)
 8001144:	f000 fb66 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D5, ((data >> 1) & 0x1));
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	085b      	lsrs	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
 8001156:	2104      	movs	r1, #4
 8001158:	480f      	ldr	r0, [pc, #60]	@ (8001198 <write_bits+0x6c>)
 800115a:	f000 fb5b 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D6, ((data >> 2) & 0x1));
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	2105      	movs	r1, #5
 800116e:	480a      	ldr	r0, [pc, #40]	@ (8001198 <write_bits+0x6c>)
 8001170:	f000 fb50 	bl	8001814 <GPIO_WriteToOutputPin>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_D7, ((data >> 3) & 0x1));
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	08db      	lsrs	r3, r3, #3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	2106      	movs	r1, #6
 8001184:	4804      	ldr	r0, [pc, #16]	@ (8001198 <write_bits+0x6c>)
 8001186:	f000 fb45 	bl	8001814 <GPIO_WriteToOutputPin>

	lcd_enable();
 800118a:	f000 f807 	bl	800119c <lcd_enable>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020c00 	.word	0x40020c00

0800119c <lcd_enable>:

/*After writing data into the data lines, the LCD has to be enabled in order to load the instruction/data*/
static void lcd_enable(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	//High-to-low transition (pulse) for latching the instruction/data
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2102      	movs	r1, #2
 80011a4:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <lcd_enable+0x28>)
 80011a6:	f000 fb35 	bl	8001814 <GPIO_WriteToOutputPin>
	udelay(10);
 80011aa:	200a      	movs	r0, #10
 80011ac:	f7ff ffa8 	bl	8001100 <udelay>
	GPIO_WriteToOutputPin(LCD_GPIO_PORT, LCD_GPIO_EN, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2102      	movs	r1, #2
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <lcd_enable+0x28>)
 80011b6:	f000 fb2d 	bl	8001814 <GPIO_WriteToOutputPin>
	udelay(100);
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f7ff ffa0 	bl	8001100 <udelay>
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020c00 	.word	0x40020c00

080011c8 <GPIO_PeriClkControl>:
 * The function enables or disables the peripheral clock for a given GPIO port
 * @Input GPIO port base address
 * @Input Clock value (Enable: 1 or Disable: 0)
 * @Output void
 * */
void GPIO_PeriClkControl(GPIO_RegDef_t *pGPIOx, uint8_t clkValue){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
	if(clkValue == ENABLE){
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d162      	bne.n	80012a0 <GPIO_PeriClkControl+0xd8>
		if(pGPIOx == GPIOA){
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a64      	ldr	r2, [pc, #400]	@ (8001370 <GPIO_PeriClkControl+0x1a8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d106      	bne.n	80011f0 <GPIO_PeriClkControl+0x28>
			GPIOA_PCLK_EN();
 80011e2:	4b64      	ldr	r3, [pc, #400]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a63      	ldr	r2, [pc, #396]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOH_PCLK_DI();
		} else if(pGPIOx == GPIOI){
			GPIOI_PCLK_DI();
		}
	}
}
 80011ee:	e0b9      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOB){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a61      	ldr	r2, [pc, #388]	@ (8001378 <GPIO_PeriClkControl+0x1b0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d106      	bne.n	8001206 <GPIO_PeriClkControl+0x3e>
			GPIOB_PCLK_EN();
 80011f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80011fe:	f043 0302 	orr.w	r3, r3, #2
 8001202:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001204:	e0ae      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOC){
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a5c      	ldr	r2, [pc, #368]	@ (800137c <GPIO_PeriClkControl+0x1b4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d106      	bne.n	800121c <GPIO_PeriClkControl+0x54>
			GPIOC_PCLK_EN();
 800120e:	4b59      	ldr	r3, [pc, #356]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a58      	ldr	r2, [pc, #352]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800121a:	e0a3      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOD){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a58      	ldr	r2, [pc, #352]	@ (8001380 <GPIO_PeriClkControl+0x1b8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d106      	bne.n	8001232 <GPIO_PeriClkControl+0x6a>
			GPIOD_PCLK_EN();
 8001224:	4b53      	ldr	r3, [pc, #332]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001230:	e098      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOE){
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a53      	ldr	r2, [pc, #332]	@ (8001384 <GPIO_PeriClkControl+0x1bc>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d106      	bne.n	8001248 <GPIO_PeriClkControl+0x80>
			GPIOE_PCLK_EN();
 800123a:	4b4e      	ldr	r3, [pc, #312]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a4d      	ldr	r2, [pc, #308]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001246:	e08d      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOF){
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4f      	ldr	r2, [pc, #316]	@ (8001388 <GPIO_PeriClkControl+0x1c0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d106      	bne.n	800125e <GPIO_PeriClkControl+0x96>
			GPIOF_PCLK_EN();
 8001250:	4b48      	ldr	r3, [pc, #288]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001254:	4a47      	ldr	r2, [pc, #284]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001256:	f043 0320 	orr.w	r3, r3, #32
 800125a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800125c:	e082      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOG){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4a      	ldr	r2, [pc, #296]	@ (800138c <GPIO_PeriClkControl+0x1c4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d106      	bne.n	8001274 <GPIO_PeriClkControl+0xac>
			GPIOG_PCLK_EN();
 8001266:	4b43      	ldr	r3, [pc, #268]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a42      	ldr	r2, [pc, #264]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800126c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001272:	e077      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOH){
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a46      	ldr	r2, [pc, #280]	@ (8001390 <GPIO_PeriClkControl+0x1c8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d106      	bne.n	800128a <GPIO_PeriClkControl+0xc2>
			GPIOH_PCLK_EN();
 800127c:	4b3d      	ldr	r3, [pc, #244]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4a3c      	ldr	r2, [pc, #240]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001288:	e06c      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOI){
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a41      	ldr	r2, [pc, #260]	@ (8001394 <GPIO_PeriClkControl+0x1cc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d168      	bne.n	8001364 <GPIO_PeriClkControl+0x19c>
			GPIOI_PCLK_EN();
 8001292:	4b38      	ldr	r3, [pc, #224]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a37      	ldr	r2, [pc, #220]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800129e:	e061      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		if(pGPIOx == GPIOA){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a33      	ldr	r2, [pc, #204]	@ (8001370 <GPIO_PeriClkControl+0x1a8>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d106      	bne.n	80012b6 <GPIO_PeriClkControl+0xee>
			GPIOA_PCLK_DI();
 80012a8:	4b32      	ldr	r3, [pc, #200]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a31      	ldr	r2, [pc, #196]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012ae:	f023 0301 	bic.w	r3, r3, #1
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80012b4:	e056      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOB){
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <GPIO_PeriClkControl+0x1b0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d106      	bne.n	80012cc <GPIO_PeriClkControl+0x104>
			GPIOB_PCLK_DI();
 80012be:	4b2d      	ldr	r3, [pc, #180]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012c4:	f023 0302 	bic.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80012ca:	e04b      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOC){
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a2b      	ldr	r2, [pc, #172]	@ (800137c <GPIO_PeriClkControl+0x1b4>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d106      	bne.n	80012e2 <GPIO_PeriClkControl+0x11a>
			GPIOC_PCLK_DI();
 80012d4:	4b27      	ldr	r3, [pc, #156]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012da:	f023 0304 	bic.w	r3, r3, #4
 80012de:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80012e0:	e040      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOD){
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a26      	ldr	r2, [pc, #152]	@ (8001380 <GPIO_PeriClkControl+0x1b8>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d106      	bne.n	80012f8 <GPIO_PeriClkControl+0x130>
			GPIOD_PCLK_DI();
 80012ea:	4b22      	ldr	r3, [pc, #136]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a21      	ldr	r2, [pc, #132]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 80012f0:	f023 0308 	bic.w	r3, r3, #8
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80012f6:	e035      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOE){
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a22      	ldr	r2, [pc, #136]	@ (8001384 <GPIO_PeriClkControl+0x1bc>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d106      	bne.n	800130e <GPIO_PeriClkControl+0x146>
			GPIOE_PCLK_DI();
 8001300:	4b1c      	ldr	r3, [pc, #112]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001306:	f023 0310 	bic.w	r3, r3, #16
 800130a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800130c:	e02a      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOF){
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1d      	ldr	r2, [pc, #116]	@ (8001388 <GPIO_PeriClkControl+0x1c0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d106      	bne.n	8001324 <GPIO_PeriClkControl+0x15c>
			GPIOF_PCLK_DI();
 8001316:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a16      	ldr	r2, [pc, #88]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800131c:	f023 0320 	bic.w	r3, r3, #32
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001322:	e01f      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOG){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a19      	ldr	r2, [pc, #100]	@ (800138c <GPIO_PeriClkControl+0x1c4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d106      	bne.n	800133a <GPIO_PeriClkControl+0x172>
			GPIOG_PCLK_DI();
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001336:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001338:	e014      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOH){
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <GPIO_PeriClkControl+0x1c8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d106      	bne.n	8001350 <GPIO_PeriClkControl+0x188>
			GPIOH_PCLK_DI();
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 8001348:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800134e:	e009      	b.n	8001364 <GPIO_PeriClkControl+0x19c>
		} else if(pGPIOx == GPIOI){
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <GPIO_PeriClkControl+0x1cc>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d105      	bne.n	8001364 <GPIO_PeriClkControl+0x19c>
			GPIOI_PCLK_DI();
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135c:	4a05      	ldr	r2, [pc, #20]	@ (8001374 <GPIO_PeriClkControl+0x1ac>)
 800135e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001362:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40020000 	.word	0x40020000
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40022000 	.word	0x40022000

08001398 <GPIO_Init>:
/*
 * This function initializes the appropriate peripheral registers to the GPIO provided
 * @Input Handle structure of a GPIO
 * @Output void
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	uint8_t pinNumber = pGPIOHandle->GPIOPinConfig.GPIO_PinNumber;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	791b      	ldrb	r3, [r3, #4]
 80013a4:	73fb      	strb	r3, [r7, #15]

	//Mode
	uint8_t pinMode = pGPIOHandle->GPIOPinConfig.GPIO_PinMode;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	795b      	ldrb	r3, [r3, #5]
 80013aa:	73bb      	strb	r3, [r7, #14]
	if(pinMode <=3){
 80013ac:	7bbb      	ldrb	r3, [r7, #14]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d81b      	bhi.n	80013ea <GPIO_Init+0x52>
		//Non-interrupt mode
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (pinNumber*2));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2103      	movs	r1, #3
 80013be:	fa01 f303 	lsl.w	r3, r1, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	400a      	ands	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= (pinMode << (pinNumber*2));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	7bb9      	ldrb	r1, [r7, #14]
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	e16a      	b.n	80016c0 <GPIO_Init+0x328>
	} else {
		//Interrupt mode
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (pinNumber*2));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2103      	movs	r1, #3
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

		if(pinMode == IN_FE_MODE){
 8001406:	7bbb      	ldrb	r3, [r7, #14]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d115      	bne.n	8001438 <GPIO_Init+0xa0>
			//Falling edge
			EXTI->FTSR |= (0x1 << pinNumber); //Set
 800140c:	4b90      	ldr	r3, [pc, #576]	@ (8001650 <GPIO_Init+0x2b8>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	7bfa      	ldrb	r2, [r7, #15]
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f202 	lsl.w	r2, r1, r2
 8001418:	4611      	mov	r1, r2
 800141a:	4a8d      	ldr	r2, [pc, #564]	@ (8001650 <GPIO_Init+0x2b8>)
 800141c:	430b      	orrs	r3, r1
 800141e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(0x1 << pinNumber); //Clear
 8001420:	4b8b      	ldr	r3, [pc, #556]	@ (8001650 <GPIO_Init+0x2b8>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	43d2      	mvns	r2, r2
 800142e:	4611      	mov	r1, r2
 8001430:	4a87      	ldr	r2, [pc, #540]	@ (8001650 <GPIO_Init+0x2b8>)
 8001432:	400b      	ands	r3, r1
 8001434:	6093      	str	r3, [r2, #8]
 8001436:	e02f      	b.n	8001498 <GPIO_Init+0x100>
		} else if(pinMode == IN_RE_MODE){
 8001438:	7bbb      	ldrb	r3, [r7, #14]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d115      	bne.n	800146a <GPIO_Init+0xd2>
			//Rising edge
			EXTI->RTSR |= (0x1 << pinNumber); //Set
 800143e:	4b84      	ldr	r3, [pc, #528]	@ (8001650 <GPIO_Init+0x2b8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	7bfa      	ldrb	r2, [r7, #15]
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f202 	lsl.w	r2, r1, r2
 800144a:	4611      	mov	r1, r2
 800144c:	4a80      	ldr	r2, [pc, #512]	@ (8001650 <GPIO_Init+0x2b8>)
 800144e:	430b      	orrs	r3, r1
 8001450:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(0x1 << pinNumber); //Clear
 8001452:	4b7f      	ldr	r3, [pc, #508]	@ (8001650 <GPIO_Init+0x2b8>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	2101      	movs	r1, #1
 800145a:	fa01 f202 	lsl.w	r2, r1, r2
 800145e:	43d2      	mvns	r2, r2
 8001460:	4611      	mov	r1, r2
 8001462:	4a7b      	ldr	r2, [pc, #492]	@ (8001650 <GPIO_Init+0x2b8>)
 8001464:	400b      	ands	r3, r1
 8001466:	60d3      	str	r3, [r2, #12]
 8001468:	e016      	b.n	8001498 <GPIO_Init+0x100>
		} else if(pinMode == IN_RFE_MODE){
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	2b06      	cmp	r3, #6
 800146e:	d113      	bne.n	8001498 <GPIO_Init+0x100>
			//Rising + Falling edge
			EXTI->FTSR |= (0x1 << pinNumber); //Set
 8001470:	4b77      	ldr	r3, [pc, #476]	@ (8001650 <GPIO_Init+0x2b8>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	7bfa      	ldrb	r2, [r7, #15]
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	4611      	mov	r1, r2
 800147e:	4a74      	ldr	r2, [pc, #464]	@ (8001650 <GPIO_Init+0x2b8>)
 8001480:	430b      	orrs	r3, r1
 8001482:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (0x1 << pinNumber); //Set
 8001484:	4b72      	ldr	r3, [pc, #456]	@ (8001650 <GPIO_Init+0x2b8>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f202 	lsl.w	r2, r1, r2
 8001490:	4611      	mov	r1, r2
 8001492:	4a6f      	ldr	r2, [pc, #444]	@ (8001650 <GPIO_Init+0x2b8>)
 8001494:	430b      	orrs	r3, r1
 8001496:	6093      	str	r3, [r2, #8]
		}

		//Select the particular port to issue interrupt on a particular EXTI line
		SYSCFG_PCLK_EN();
 8001498:	4b6e      	ldr	r3, [pc, #440]	@ (8001654 <GPIO_Init+0x2bc>)
 800149a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149c:	4a6d      	ldr	r2, [pc, #436]	@ (8001654 <GPIO_Init+0x2bc>)
 800149e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a2:	6453      	str	r3, [r2, #68]	@ 0x44
		uint8_t arrayIdx = pinNumber/4;
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	737b      	strb	r3, [r7, #13]
		SYSCFG->EXTICR[arrayIdx] &= ~(0xF << ((pinNumber % 4)*4));
 80014aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001658 <GPIO_Init+0x2c0>)
 80014ac:	7b7b      	ldrb	r3, [r7, #13]
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	210f      	movs	r1, #15
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	4964      	ldr	r1, [pc, #400]	@ (8001658 <GPIO_Init+0x2c0>)
 80014c8:	7b7b      	ldrb	r3, [r7, #13]
 80014ca:	4002      	ands	r2, r0
 80014cc:	3302      	adds	r3, #2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(pGPIOHandle->pGPIOx == GPIOA){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a61      	ldr	r2, [pc, #388]	@ (800165c <GPIO_Init+0x2c4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d10a      	bne.n	80014f2 <GPIO_Init+0x15a>
			SYSCFG->EXTICR[arrayIdx] |= (0x0 << ((pinNumber % 4)*4));
 80014dc:	485e      	ldr	r0, [pc, #376]	@ (8001658 <GPIO_Init+0x2c0>)
 80014de:	7b7a      	ldrb	r2, [r7, #13]
 80014e0:	495d      	ldr	r1, [pc, #372]	@ (8001658 <GPIO_Init+0x2c0>)
 80014e2:	7b7b      	ldrb	r3, [r7, #13]
 80014e4:	3202      	adds	r2, #2
 80014e6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80014ea:	3302      	adds	r3, #2
 80014ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80014f0:	e0dc      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOB){
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001660 <GPIO_Init+0x2c8>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d113      	bne.n	8001524 <GPIO_Init+0x18c>
			SYSCFG->EXTICR[arrayIdx] |= (0x1 << ((pinNumber % 4)*4));
 80014fc:	4a56      	ldr	r2, [pc, #344]	@ (8001658 <GPIO_Init+0x2c0>)
 80014fe:	7b7b      	ldrb	r3, [r7, #13]
 8001500:	3302      	adds	r3, #2
 8001502:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	2101      	movs	r1, #1
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
 8001514:	4618      	mov	r0, r3
 8001516:	4950      	ldr	r1, [pc, #320]	@ (8001658 <GPIO_Init+0x2c0>)
 8001518:	7b7b      	ldrb	r3, [r7, #13]
 800151a:	4302      	orrs	r2, r0
 800151c:	3302      	adds	r3, #2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001522:	e0c3      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOC){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a4e      	ldr	r2, [pc, #312]	@ (8001664 <GPIO_Init+0x2cc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d113      	bne.n	8001556 <GPIO_Init+0x1be>
			SYSCFG->EXTICR[arrayIdx] |= (0x2 << ((pinNumber % 4)*4));
 800152e:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <GPIO_Init+0x2c0>)
 8001530:	7b7b      	ldrb	r3, [r7, #13]
 8001532:	3302      	adds	r3, #2
 8001534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	2102      	movs	r1, #2
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	4618      	mov	r0, r3
 8001548:	4943      	ldr	r1, [pc, #268]	@ (8001658 <GPIO_Init+0x2c0>)
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	4302      	orrs	r2, r0
 800154e:	3302      	adds	r3, #2
 8001550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001554:	e0aa      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOD){
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a43      	ldr	r2, [pc, #268]	@ (8001668 <GPIO_Init+0x2d0>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d113      	bne.n	8001588 <GPIO_Init+0x1f0>
			SYSCFG->EXTICR[arrayIdx] |= (0x3 << ((pinNumber % 4)*4));
 8001560:	4a3d      	ldr	r2, [pc, #244]	@ (8001658 <GPIO_Init+0x2c0>)
 8001562:	7b7b      	ldrb	r3, [r7, #13]
 8001564:	3302      	adds	r3, #2
 8001566:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	2103      	movs	r1, #3
 8001574:	fa01 f303 	lsl.w	r3, r1, r3
 8001578:	4618      	mov	r0, r3
 800157a:	4937      	ldr	r1, [pc, #220]	@ (8001658 <GPIO_Init+0x2c0>)
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	4302      	orrs	r2, r0
 8001580:	3302      	adds	r3, #2
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001586:	e091      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOE){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a37      	ldr	r2, [pc, #220]	@ (800166c <GPIO_Init+0x2d4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d113      	bne.n	80015ba <GPIO_Init+0x222>
			SYSCFG->EXTICR[arrayIdx] |= (0x4 << ((pinNumber % 4)*4));
 8001592:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <GPIO_Init+0x2c0>)
 8001594:	7b7b      	ldrb	r3, [r7, #13]
 8001596:	3302      	adds	r3, #2
 8001598:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	f003 0303 	and.w	r3, r3, #3
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	2104      	movs	r1, #4
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	492a      	ldr	r1, [pc, #168]	@ (8001658 <GPIO_Init+0x2c0>)
 80015ae:	7b7b      	ldrb	r3, [r7, #13]
 80015b0:	4302      	orrs	r2, r0
 80015b2:	3302      	adds	r3, #2
 80015b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80015b8:	e078      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOF){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a2c      	ldr	r2, [pc, #176]	@ (8001670 <GPIO_Init+0x2d8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d113      	bne.n	80015ec <GPIO_Init+0x254>
			SYSCFG->EXTICR[arrayIdx] |= (0x5 << ((pinNumber % 4)*4));
 80015c4:	4a24      	ldr	r2, [pc, #144]	@ (8001658 <GPIO_Init+0x2c0>)
 80015c6:	7b7b      	ldrb	r3, [r7, #13]
 80015c8:	3302      	adds	r3, #2
 80015ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015ce:	7bfb      	ldrb	r3, [r7, #15]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	2105      	movs	r1, #5
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	491e      	ldr	r1, [pc, #120]	@ (8001658 <GPIO_Init+0x2c0>)
 80015e0:	7b7b      	ldrb	r3, [r7, #13]
 80015e2:	4302      	orrs	r2, r0
 80015e4:	3302      	adds	r3, #2
 80015e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80015ea:	e05f      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOG){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a20      	ldr	r2, [pc, #128]	@ (8001674 <GPIO_Init+0x2dc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d113      	bne.n	800161e <GPIO_Init+0x286>
			SYSCFG->EXTICR[arrayIdx] |= (0x6 << ((pinNumber % 4)*4));
 80015f6:	4a18      	ldr	r2, [pc, #96]	@ (8001658 <GPIO_Init+0x2c0>)
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	2106      	movs	r1, #6
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4911      	ldr	r1, [pc, #68]	@ (8001658 <GPIO_Init+0x2c0>)
 8001612:	7b7b      	ldrb	r3, [r7, #13]
 8001614:	4302      	orrs	r2, r0
 8001616:	3302      	adds	r3, #2
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800161c:	e046      	b.n	80016ac <GPIO_Init+0x314>
		} else if(pGPIOHandle->pGPIOx == GPIOH){
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <GPIO_Init+0x2e0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d129      	bne.n	800167c <GPIO_Init+0x2e4>
			SYSCFG->EXTICR[arrayIdx] |= (0x7 << ((pinNumber % 4)*4));
 8001628:	4a0b      	ldr	r2, [pc, #44]	@ (8001658 <GPIO_Init+0x2c0>)
 800162a:	7b7b      	ldrb	r3, [r7, #13]
 800162c:	3302      	adds	r3, #2
 800162e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	2107      	movs	r1, #7
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4618      	mov	r0, r3
 8001642:	4905      	ldr	r1, [pc, #20]	@ (8001658 <GPIO_Init+0x2c0>)
 8001644:	7b7b      	ldrb	r3, [r7, #13]
 8001646:	4302      	orrs	r2, r0
 8001648:	3302      	adds	r3, #2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800164e:	e02d      	b.n	80016ac <GPIO_Init+0x314>
 8001650:	40013c00 	.word	0x40013c00
 8001654:	40023800 	.word	0x40023800
 8001658:	40013800 	.word	0x40013800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020400 	.word	0x40020400
 8001664:	40020800 	.word	0x40020800
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000
 8001670:	40021400 	.word	0x40021400
 8001674:	40021800 	.word	0x40021800
 8001678:	40021c00 	.word	0x40021c00
		} else if(pGPIOHandle->pGPIOx == GPIOI){
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a61      	ldr	r2, [pc, #388]	@ (8001808 <GPIO_Init+0x470>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d112      	bne.n	80016ac <GPIO_Init+0x314>
			SYSCFG->EXTICR[arrayIdx] |= (0x8 << ((pinNumber % 4)*4));
 8001686:	4a61      	ldr	r2, [pc, #388]	@ (800180c <GPIO_Init+0x474>)
 8001688:	7b7b      	ldrb	r3, [r7, #13]
 800168a:	3302      	adds	r3, #2
 800168c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f003 0303 	and.w	r3, r3, #3
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	2108      	movs	r1, #8
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	495a      	ldr	r1, [pc, #360]	@ (800180c <GPIO_Init+0x474>)
 80016a2:	7b7b      	ldrb	r3, [r7, #13]
 80016a4:	4302      	orrs	r2, r0
 80016a6:	3302      	adds	r3, #2
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		//Un-mask the EXTI line
		EXTI->IMR |= (0x1 << pinNumber);
 80016ac:	4b58      	ldr	r3, [pc, #352]	@ (8001810 <GPIO_Init+0x478>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	7bfa      	ldrb	r2, [r7, #15]
 80016b2:	2101      	movs	r1, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4a55      	ldr	r2, [pc, #340]	@ (8001810 <GPIO_Init+0x478>)
 80016bc:	430b      	orrs	r3, r1
 80016be:	6013      	str	r3, [r2, #0]
	}

	if(pGPIOHandle->GPIOPinConfig.GPIO_PinMode == OUTPUT_MODE){
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	795b      	ldrb	r3, [r3, #5]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d139      	bne.n	800173c <GPIO_Init+0x3a4>
		//Output type
		uint8_t outputType = pGPIOHandle->GPIOPinConfig.GPIO_PinOPType;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7a1b      	ldrb	r3, [r3, #8]
 80016cc:	733b      	strb	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pinNumber);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2101      	movs	r1, #1
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	4619      	mov	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	400a      	ands	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= (outputType << pinNumber);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	7b39      	ldrb	r1, [r7, #12]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	fa01 f303 	lsl.w	r3, r1, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

		//Output Speed
		uint8_t outputSpeed = pGPIOHandle->GPIOPinConfig.GPIO_PinSpeed;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	72fb      	strb	r3, [r7, #11]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (pinNumber*2));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	2103      	movs	r1, #3
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	4619      	mov	r1, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	400a      	ands	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= (outputSpeed << (pinNumber*2));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	7af9      	ldrb	r1, [r7, #11]
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	4619      	mov	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	609a      	str	r2, [r3, #8]
	}

	//Pull-up Pull-down settings
	uint8_t pupd = pGPIOHandle->GPIOPinConfig.GPIO_PinPuPdControl;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	79db      	ldrb	r3, [r3, #7]
 8001740:	72bb      	strb	r3, [r7, #10]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (pinNumber*2));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2103      	movs	r1, #3
 800174e:	fa01 f303 	lsl.w	r3, r1, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	4619      	mov	r1, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	400a      	ands	r2, r1
 800175c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= (pupd << (pinNumber*2));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68da      	ldr	r2, [r3, #12]
 8001764:	7ab9      	ldrb	r1, [r7, #10]
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	4619      	mov	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	60da      	str	r2, [r3, #12]

	//Alternate functionality
	if(pinMode == ALT_FUNC_MODE){
 8001778:	7bbb      	ldrb	r3, [r7, #14]
 800177a:	2b02      	cmp	r3, #2
 800177c:	d13e      	bne.n	80017fc <GPIO_Init+0x464>
		uint8_t altFuncNumber = pGPIOHandle->GPIOPinConfig.GPIO_PinAltFuncMode;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a5b      	ldrb	r3, [r3, #9]
 8001782:	727b      	strb	r3, [r7, #9]
		if(pinNumber <= GPIO_PIN_7){
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b07      	cmp	r3, #7
 8001788:	d81b      	bhi.n	80017c2 <GPIO_Init+0x42a>
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF << (pinNumber*4));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6a1a      	ldr	r2, [r3, #32]
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	210f      	movs	r1, #15
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	4619      	mov	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	400a      	ands	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (altFuncNumber << (pinNumber*4));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	7a79      	ldrb	r1, [r7, #9]
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	4619      	mov	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
		} else{
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (pinNumber*4));
			pGPIOHandle->pGPIOx->AFRH |= (altFuncNumber << ((pinNumber%8)*4));
		}
	}
}
 80017c0:	e01c      	b.n	80017fc <GPIO_Init+0x464>
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (pinNumber*4));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	210f      	movs	r1, #15
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	625a      	str	r2, [r3, #36]	@ 0x24
			pGPIOHandle->pGPIOx->AFRH |= (altFuncNumber << ((pinNumber%8)*4));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017e4:	7a79      	ldrb	r1, [r7, #9]
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40022000 	.word	0x40022000
 800180c:	40013800 	.word	0x40013800
 8001810:	40013c00 	.word	0x40013c00

08001814 <GPIO_WriteToOutputPin>:
 * @Input GPIO port base address
 * @Input GPIO pin number
 * @Input data (boolean)
 * @Output void
 * */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t GPIOPinNumber, uint8_t value){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
 8001820:	4613      	mov	r3, r2
 8001822:	70bb      	strb	r3, [r7, #2]
	pGPIOx->ODR &= ~(0x1 << GPIOPinNumber);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	43d2      	mvns	r2, r2
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	615a      	str	r2, [r3, #20]
	pGPIOx->ODR |= (value << GPIOPinNumber);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	78b9      	ldrb	r1, [r7, #2]
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	431a      	orrs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	615a      	str	r2, [r3, #20]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <I2C_PeriClkControl>:
 * The function enables or disables the peripheral clock for a given I2C peripheral
 * @Input I2C peripheral base address
 * @Input Clock value (Enable: 1 or Disable: 0)
 * @Output void
 * */
void I2C_PeriClkControl(I2C_RegDef_t *pI2Cx, uint8_t clkValue){
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
	if(clkValue == ENABLE){
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d120      	bne.n	80018ac <I2C_PeriClkControl+0x54>
		if(pI2Cx == I2C1){
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <I2C_PeriClkControl+0xa0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d106      	bne.n	8001880 <I2C_PeriClkControl+0x28>
			I2C1_PCLK_EN();
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	4a21      	ldr	r2, [pc, #132]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 8001878:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800187c:	6413      	str	r3, [r2, #64]	@ 0x40
			I2C2_PCLK_DI();
		} else if(pI2Cx == I2C3){
			I2C3_PCLK_DI();
		}
	}
}
 800187e:	e035      	b.n	80018ec <I2C_PeriClkControl+0x94>
		} else if(pI2Cx == I2C2){
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a1f      	ldr	r2, [pc, #124]	@ (8001900 <I2C_PeriClkControl+0xa8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d106      	bne.n	8001896 <I2C_PeriClkControl+0x3e>
			I2C2_PCLK_EN();
 8001888:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a1b      	ldr	r2, [pc, #108]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 800188e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001894:	e02a      	b.n	80018ec <I2C_PeriClkControl+0x94>
		} else if(pI2Cx == I2C3){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1a      	ldr	r2, [pc, #104]	@ (8001904 <I2C_PeriClkControl+0xac>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d126      	bne.n	80018ec <I2C_PeriClkControl+0x94>
			I2C3_PCLK_EN();
 800189e:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018aa:	e01f      	b.n	80018ec <I2C_PeriClkControl+0x94>
		if(pI2Cx == I2C1){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <I2C_PeriClkControl+0xa0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d106      	bne.n	80018c2 <I2C_PeriClkControl+0x6a>
			I2C1_PCLK_DI();
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b8:	4a10      	ldr	r2, [pc, #64]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80018be:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018c0:	e014      	b.n	80018ec <I2C_PeriClkControl+0x94>
		} else if(pI2Cx == I2C2){
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001900 <I2C_PeriClkControl+0xa8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d106      	bne.n	80018d8 <I2C_PeriClkControl+0x80>
			I2C2_PCLK_DI();
 80018ca:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018d0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018d6:	e009      	b.n	80018ec <I2C_PeriClkControl+0x94>
		} else if(pI2Cx == I2C3){
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <I2C_PeriClkControl+0xac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d105      	bne.n	80018ec <I2C_PeriClkControl+0x94>
			I2C3_PCLK_DI();
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <I2C_PeriClkControl+0xa4>)
 80018e6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40005400 	.word	0x40005400
 80018fc:	40023800 	.word	0x40023800
 8001900:	40005800 	.word	0x40005800
 8001904:	40005c00 	.word	0x40005c00

08001908 <I2C_Init>:
/*
 * This function initializes the appropriate peripheral registers to the I2C peripheral provided
 * @Input Handle structure of the I2C
 * @Output void
 * */
void I2C_Init(I2C_Handle_t *pI2CHandle){
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

	//ACK enabling
	uint8_t ackControl = pI2CHandle->I2C_Config.I2C_ACKControl;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7a5b      	ldrb	r3, [r3, #9]
 8001914:	753b      	strb	r3, [r7, #20]
	pI2CHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001924:	601a      	str	r2, [r3, #0]
	pI2CHandle->pI2Cx->CR1 |= (ackControl << I2C_CR1_ACK);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	7d3b      	ldrb	r3, [r7, #20]
 800192e:	029a      	lsls	r2, r3, #10
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]

	//Serial clock (SCL) configuration
	pI2CHandle->pI2Cx->CR2 &= ~(0x3F << I2C_CR2_FREQ);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001946:	605a      	str	r2, [r3, #4]
	uint32_t apb1BusClk = RCC_GetPCLK1Value() / 1000000U;
 8001948:	f000 fa66 	bl	8001e18 <RCC_GetPCLK1Value>
 800194c:	4603      	mov	r3, r0
 800194e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b00 <I2C_Init+0x1f8>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	0c9b      	lsrs	r3, r3, #18
 8001956:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR2 |= (apb1BusClk << I2C_CR2_FREQ);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	430a      	orrs	r2, r1
 8001966:	605a      	str	r2, [r3, #4]

	//CCR calculations
	uint16_t ccr_value = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	82fb      	strh	r3, [r7, #22]
	uint32_t sclSpeed = pI2CHandle->I2C_Config.I2C_SCLSpeed;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]

	if(sclSpeed <= I2C_SCL_STANDARD){
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a63      	ldr	r2, [pc, #396]	@ (8001b04 <I2C_Init+0x1fc>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d810      	bhi.n	800199c <I2C_Init+0x94>
		//Standard mode (duty cycle = 50%)
		pI2CHandle->pI2Cx->CCR &= ~(0x1 << I2C_CCR_FSMODE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69da      	ldr	r2, [r3, #28]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001988:	61da      	str	r2, [r3, #28]
		ccr_value = RCC_GetPCLK1Value()/(2*sclSpeed);
 800198a:	f000 fa45 	bl	8001e18 <RCC_GetPCLK1Value>
 800198e:	4602      	mov	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	82fb      	strh	r3, [r7, #22]
 800199a:	e038      	b.n	8001a0e <I2C_Init+0x106>
	} else {
		//Fast mode (Duty cycle = 2 or 16/9)
		pI2CHandle->pI2Cx->CCR |= (0x1 << I2C_CCR_FSMODE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019aa:	61da      	str	r2, [r3, #28]

		//FM duty cycle
		uint8_t dutyCycle = pI2CHandle->I2C_Config.I2C_FMDutyCycle;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7a9b      	ldrb	r3, [r3, #10]
 80019b0:	72fb      	strb	r3, [r7, #11]
		pI2CHandle->pI2Cx->CCR &= ~(0x1 << I2C_CCR_DUTY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019c0:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (dutyCycle << I2C_CCR_DUTY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	69d9      	ldr	r1, [r3, #28]
 80019c8:	7afb      	ldrb	r3, [r7, #11]
 80019ca:	039a      	lsls	r2, r3, #14
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	61da      	str	r2, [r3, #28]

		if(dutyCycle == I2C_FM_DUTY_2){
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10a      	bne.n	80019f0 <I2C_Init+0xe8>
			ccr_value = RCC_GetPCLK1Value()/(3*sclSpeed);
 80019da:	f000 fa1d 	bl	8001e18 <RCC_GetPCLK1Value>
 80019de:	4601      	mov	r1, r0
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4613      	mov	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	4413      	add	r3, r2
 80019e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ec:	82fb      	strh	r3, [r7, #22]
 80019ee:	e00e      	b.n	8001a0e <I2C_Init+0x106>
		} else if(dutyCycle == I2C_FM_DUTY_16BY9){
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d10b      	bne.n	8001a0e <I2C_Init+0x106>
			ccr_value = RCC_GetPCLK1Value()/(25*sclSpeed);
 80019f6:	f000 fa0f 	bl	8001e18 <RCC_GetPCLK1Value>
 80019fa:	4601      	mov	r1, r0
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	009a      	lsls	r2, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
		}
	}

	//CRR configuration
	pI2CHandle->pI2Cx->CCR &= ~(0xFFF << I2C_CCR_CCR);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8001a1c:	f023 030f 	bic.w	r3, r3, #15
 8001a20:	61d3      	str	r3, [r2, #28]
	pI2CHandle->pI2Cx->CCR |= (ccr_value << I2C_CCR_CCR);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69d9      	ldr	r1, [r3, #28]
 8001a28:	8afa      	ldrh	r2, [r7, #22]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	61da      	str	r2, [r3, #28]

	//Device address (when the device is slave)
	uint8_t slaveAddr = pI2CHandle->I2C_Config.I2C_DeviceAddress;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7a1b      	ldrb	r3, [r3, #8]
 8001a36:	72bb      	strb	r3, [r7, #10]
	pI2CHandle->pI2Cx->OAR1 &= ~(0xFE << I2C_OAR1_ADDR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 72fe 	bic.w	r2, r2, #508	@ 0x1fc
 8001a46:	609a      	str	r2, [r3, #8]
	pI2CHandle->pI2Cx->OAR1 |= (slaveAddr << I2C_OAR1_ADDR);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	7abb      	ldrb	r3, [r7, #10]
 8001a50:	005a      	lsls	r2, r3, #1
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	609a      	str	r2, [r3, #8]

	//TRISE configuration
	uint8_t trise=0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	757b      	strb	r3, [r7, #21]
	if(sclSpeed <= I2C_SCL_STANDARD){
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a28      	ldr	r2, [pc, #160]	@ (8001b04 <I2C_Init+0x1fc>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d80a      	bhi.n	8001a7c <I2C_Init+0x174>
		//Standard mode
		trise = ((RCC_GetPCLK1Value()*1)/1000000U)+1;
 8001a66:	f000 f9d7 	bl	8001e18 <RCC_GetPCLK1Value>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <I2C_Init+0x1f8>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9b      	lsrs	r3, r3, #18
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	3301      	adds	r3, #1
 8001a78:	757b      	strb	r3, [r7, #21]
 8001a7a:	e024      	b.n	8001ac6 <I2C_Init+0x1be>
	} else {
		//Fast mode
		trise = ((RCC_GetPCLK1Value()*0.3)/1000000U)+1;
 8001a7c:	f000 f9cc 	bl	8001e18 <RCC_GetPCLK1Value>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd36 	bl	80004f4 <__aeabi_ui2d>
 8001a88:	a319      	add	r3, pc, #100	@ (adr r3, 8001af0 <I2C_Init+0x1e8>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdab 	bl	80005e8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	a317      	add	r3, pc, #92	@ (adr r3, 8001af8 <I2C_Init+0x1f0>)
 8001a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa0:	f7fe fecc 	bl	800083c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <I2C_Init+0x200>)
 8001ab2:	f7fe fbe3 	bl	800027c <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe ffa5 	bl	8000a0c <__aeabi_d2uiz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	757b      	strb	r3, [r7, #21]
	}
	pI2CHandle->pI2Cx->TRISE &= ~(0x3F << I2C_TRISE);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6a1a      	ldr	r2, [r3, #32]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8001ad4:	621a      	str	r2, [r3, #32]
	pI2CHandle->pI2Cx->TRISE |= (trise << I2C_TRISE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a19      	ldr	r1, [r3, #32]
 8001adc:	7d7a      	ldrb	r2, [r7, #21]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	621a      	str	r2, [r3, #32]
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	33333333 	.word	0x33333333
 8001af4:	3fd33333 	.word	0x3fd33333
 8001af8:	00000000 	.word	0x00000000
 8001afc:	412e8480 	.word	0x412e8480
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	000186a0 	.word	0x000186a0
 8001b08:	3ff00000 	.word	0x3ff00000

08001b0c <I2C_ClearACKbit>:
/*
 * This function clears the ACK bit and thus disables the acking functionality
 * @Input I2C peripheral base address
 * @Output void
 * */
void I2C_ClearACKbit(I2C_RegDef_t *pI2Cx){
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	601a      	str	r2, [r3, #0]
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <I2C_SetACKbit>:
/*
 * This function sets the ACK bit and thus enables the acking functionality
 * @Input I2C peripheral base address
 * @Output void
 * */
void I2C_SetACKbit(I2C_RegDef_t *pI2Cx){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_ACK);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <I2C_getStatusFlag>:
 * This function gets the value of a particular flag of I2C Status Register
 * @Input I2C peripheral base address
 * @Input Flag name
 * @Output returns the status of the flag
 * */
uint8_t I2C_getStatusFlag(I2C_RegDef_t *pI2Cx, uint32_t flagName){
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	return (pI2Cx->SR1 & flagName);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	4013      	ands	r3, r2
 8001b62:	b2db      	uxtb	r3, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <I2C_MasterTransmitData>:
 * @Input size of the data that the user wants to send (in bytes)
 * @Input slave address
 * @Input stop bit or repeated start
 * @Output void
 * */
void I2C_MasterTransmitData(I2C_Handle_t *pI2CHandle, uint8_t *pTxBuffer, uint8_t length, uint8_t slaveAddress, uint8_t isStop){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	460b      	mov	r3, r1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	4613      	mov	r3, r2
 8001b84:	71bb      	strb	r3, [r7, #6]
	//Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f8e8 	bl	8001d60 <I2C_GenerateStartCondition>

	//Wait till the SB bit is set
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8001b90:	bf00      	nop
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ffd7 	bl	8001b4c <I2C_getStatusFlag>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0f6      	beq.n	8001b92 <I2C_MasterTransmitData+0x22>

	//Send the slave address with r/nw bit as 0 (WRITE) [Total 8 bits]
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, slaveAddress);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	79ba      	ldrb	r2, [r7, #6]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f8f7 	bl	8001da0 <I2C_ExecuteAddressPhaseWrite>

	//Confirm that the ACK bit is received by checking the ADDR bit (it should be set)
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8001bb2:	bf00      	nop
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2102      	movs	r1, #2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff ffc6 	bl	8001b4c <I2C_getStatusFlag>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f6      	beq.n	8001bb4 <I2C_MasterTransmitData+0x44>

	//Clearing the ADDR bit by reading the SR1 and SR2 registers
	I2C_ClearADDRBit(pI2CHandle->pI2Cx);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f000 f914 	bl	8001df8 <I2C_ClearADDRBit>

	//Load the data into the Data Register till length becomes 0
	while(length > 0){
 8001bd0:	e014      	b.n	8001bfc <I2C_MasterTransmitData+0x8c>
		while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_TXE_FLAG));
 8001bd2:	bf00      	nop
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2180      	movs	r1, #128	@ 0x80
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ffb6 	bl	8001b4c <I2C_getStatusFlag>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f6      	beq.n	8001bd4 <I2C_MasterTransmitData+0x64>

		//Once the TXE bit is set, the data register is empty
		pI2CHandle->pI2Cx->DR = *pTxBuffer;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	611a      	str	r2, [r3, #16]
		pTxBuffer++;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
		length--;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	71fb      	strb	r3, [r7, #7]
	while(length > 0){
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e7      	bne.n	8001bd2 <I2C_MasterTransmitData+0x62>
	}

	//When length becomes 0, wait for TXE=1 and BTF=1 before generating STOP condition
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_TXE_FLAG));
 8001c02:	bf00      	nop
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff ff9e 	bl	8001b4c <I2C_getStatusFlag>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f6      	beq.n	8001c04 <I2C_MasterTransmitData+0x94>
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_BTF_FLAG));
 8001c16:	bf00      	nop
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff94 	bl	8001b4c <I2C_getStatusFlag>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f6      	beq.n	8001c18 <I2C_MasterTransmitData+0xa8>

	if(isStop == ENABLE){
 8001c2a:	7e3b      	ldrb	r3, [r7, #24]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d104      	bne.n	8001c3a <I2C_MasterTransmitData+0xca>
		//Generate the STOP condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 f8a3 	bl	8001d80 <I2C_GenerateStopCondition>
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <I2C_MasterReceiveData>:
 * @Input size of the data (in bytes)
 * @Input slave address
 * @Input stop bit or repeated start
 * @Output void
 * */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t length, uint8_t slaveAddress, uint8_t isStop){
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	//Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f87f 	bl	8001d60 <I2C_GenerateStartCondition>

	//Wait till the SB bit is set
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_SB_FLAG));
 8001c62:	bf00      	nop
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2101      	movs	r1, #1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff6e 	bl	8001b4c <I2C_getStatusFlag>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f6      	beq.n	8001c64 <I2C_MasterReceiveData+0x22>

	//Send the slave address with r/nw bit as 1 (READ) [Total 8 bits]
	I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, slaveAddress);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	79ba      	ldrb	r2, [r7, #6]
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f8a4 	bl	8001dcc <I2C_ExecuteAddressPhaseRead>

	//Confirm that the ACK bit is received by checking the ADDR bit (it should be set)
	while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_ADDR_FLAG));
 8001c84:	bf00      	nop
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <I2C_getStatusFlag>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f6      	beq.n	8001c86 <I2C_MasterReceiveData+0x44>

	if(length == 1){
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d121      	bne.n	8001ce2 <I2C_MasterReceiveData+0xa0>
		//Clearing the ACK bit
		I2C_ClearACKbit(pI2CHandle->pI2Cx);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ff32 	bl	8001b0c <I2C_ClearACKbit>

		//Clearing the ADDR bit by reading the SR1 and SR2 registers
		I2C_ClearADDRBit(pI2CHandle->pI2Cx);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f8a3 	bl	8001df8 <I2C_ClearADDRBit>

		while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 8001cb2:	bf00      	nop
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2140      	movs	r1, #64	@ 0x40
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff ff46 	bl	8001b4c <I2C_getStatusFlag>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f6      	beq.n	8001cb4 <I2C_MasterReceiveData+0x72>

		if(isStop){
 8001cc6:	7e3b      	ldrb	r3, [r7, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <I2C_MasterReceiveData+0x94>
			//Setting the STOP bit
			I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 f855 	bl	8001d80 <I2C_GenerateStopCondition>
		}

		//Reading the data from the Data Register
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	701a      	strb	r2, [r3, #0]
	}

	if(length > 1){
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d92e      	bls.n	8001d46 <I2C_MasterReceiveData+0x104>
		//Clearing the ADDR bit by reading the SR1 and SR2 registers
		I2C_ClearADDRBit(pI2CHandle->pI2Cx);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f883 	bl	8001df8 <I2C_ClearADDRBit>

		while(length > 0){
 8001cf2:	e025      	b.n	8001d40 <I2C_MasterReceiveData+0xfe>
			//Wait till the RXNE bit is set
			while(!I2C_getStatusFlag(pI2CHandle->pI2Cx, I2C_RXNE_FLAG));
 8001cf4:	bf00      	nop
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff25 	bl	8001b4c <I2C_getStatusFlag>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f6      	beq.n	8001cf6 <I2C_MasterReceiveData+0xb4>

			if(length == 2){
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d10c      	bne.n	8001d28 <I2C_MasterReceiveData+0xe6>
				//Clearing the ACK bit
				I2C_ClearACKbit(pI2CHandle->pI2Cx);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fefa 	bl	8001b0c <I2C_ClearACKbit>

				if(isStop){
 8001d18:	7e3b      	ldrb	r3, [r7, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d004      	beq.n	8001d28 <I2C_MasterReceiveData+0xe6>
					//Setting the STOP bit
					I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f82c 	bl	8001d80 <I2C_GenerateStopCondition>
				}
			}

			//Once the RXNE bit is set, the data register is full
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60bb      	str	r3, [r7, #8]
			length--;
 8001d3a:	79fb      	ldrb	r3, [r7, #7]
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	71fb      	strb	r3, [r7, #7]
		while(length > 0){
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1d6      	bne.n	8001cf4 <I2C_MasterReceiveData+0xb2>
		 }
	}
	//Revert to initial condition
	if(pI2CHandle->I2C_Config.I2C_ACKControl == ENABLE){
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	7a5b      	ldrb	r3, [r3, #9]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d104      	bne.n	8001d58 <I2C_MasterReceiveData+0x116>
		//Setting the ACK bit
		I2C_SetACKbit(pI2CHandle->pI2Cx);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff feea 	bl	8001b2c <I2C_SetACKbit>
	}
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <I2C_GenerateStartCondition>:
/*
 * This function generates the start bit necessary for starting the I2C transmission/reception
 * @Input I2C peripheral base address
 * @Output void
 * */
void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <I2C_GenerateStopCondition>:
/*
 * This function generates the stop bit necessary for ending the I2C transmission/reception
 * @Input I2C peripheral base address
 * @Output void
 * */
void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx){
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <I2C_ExecuteAddressPhaseWrite>:
 * This function generates the address phase in case of master transmitting the data to the slave
 * @Input I2C peripheral base address
 * @Input slave address
 * @Output void
 * */
static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr){
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	70fb      	strb	r3, [r7, #3]
	uint8_t addressPhase = (slaveAddr << 1);
 8001dac:	78fb      	ldrb	r3, [r7, #3]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
	addressPhase &= ~(0x00000001);
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = addressPhase;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <I2C_ExecuteAddressPhaseRead>:
 * This function generates the address phase in case of master receiving the data from the slave
 * @Input I2C peripheral base address
 * @Input slave address
 * @Output void
 * */
static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx, uint8_t slaveAddr){
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	70fb      	strb	r3, [r7, #3]
	uint8_t addressPhase = (slaveAddr << 1);
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
	addressPhase |= (0x01);
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
	pI2Cx->DR = addressPhase;
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	611a      	str	r2, [r3, #16]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <I2C_ClearADDRBit>:
/*
 * This function clears the ADDR bit
 * @Input I2C peripheral base address
 * @Output void
 * */
static void I2C_ClearADDRBit(I2C_RegDef_t *pI2Cx){
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
	uint32_t statusReg = pI2Cx->SR1;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	60fb      	str	r3, [r7, #12]
	statusReg = pI2Cx->SR2;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	60fb      	str	r3, [r7, #12]
	(void)statusReg;
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <RCC_GetPCLK1Value>:

/*
 * The function returns the value of peripheral clock supplied to the APB1 bus
 * @Output clock value
 * */
uint32_t RCC_GetPCLK1Value(void){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
	uint32_t pclk1, systemClock;
	uint8_t ahbPrescaler, apb1PreScaler;

	//Determine the SYSCLK based on the source
	uint8_t clkSrc = (RCC->CFGR & (0x3 << 2) >> 2);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <RCC_GetPCLK1Value+0x98>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	727b      	strb	r3, [r7, #9]
	if(clkSrc == 0){
 8001e2a:	7a7b      	ldrb	r3, [r7, #9]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d102      	bne.n	8001e36 <RCC_GetPCLK1Value+0x1e>
		//HSI
		systemClock = 16000000U;
 8001e30:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <RCC_GetPCLK1Value+0x9c>)
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	e00b      	b.n	8001e4e <RCC_GetPCLK1Value+0x36>
	} else if(clkSrc == 1){
 8001e36:	7a7b      	ldrb	r3, [r7, #9]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d102      	bne.n	8001e42 <RCC_GetPCLK1Value+0x2a>
		//HSE
		systemClock = 8000000U;
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <RCC_GetPCLK1Value+0xa0>)
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	e005      	b.n	8001e4e <RCC_GetPCLK1Value+0x36>
	} else if(clkSrc == 2){
 8001e42:	7a7b      	ldrb	r3, [r7, #9]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d102      	bne.n	8001e4e <RCC_GetPCLK1Value+0x36>
		//PLL
		systemClock = RCC_GetPLLClk();
 8001e48:	f000 f83c 	bl	8001ec4 <RCC_GetPLLClk>
 8001e4c:	60f8      	str	r0, [r7, #12]
	}

	uint8_t temp1 = (RCC->CFGR & (0xF << 4) >> 4);
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <RCC_GetPCLK1Value+0x98>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	723b      	strb	r3, [r7, #8]
	if(temp1 < 8){
 8001e5a:	7a3b      	ldrb	r3, [r7, #8]
 8001e5c:	2b07      	cmp	r3, #7
 8001e5e:	d802      	bhi.n	8001e66 <RCC_GetPCLK1Value+0x4e>
		ahbPrescaler = 1;
 8001e60:	2301      	movs	r3, #1
 8001e62:	72fb      	strb	r3, [r7, #11]
 8001e64:	e005      	b.n	8001e72 <RCC_GetPCLK1Value+0x5a>
	} else {
		ahbPrescaler = AHB_preScalerValues[temp1-8];
 8001e66:	7a3b      	ldrb	r3, [r7, #8]
 8001e68:	3b08      	subs	r3, #8
 8001e6a:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <RCC_GetPCLK1Value+0xa4>)
 8001e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e70:	72fb      	strb	r3, [r7, #11]
	}

	uint8_t temp2 = (RCC->CFGR & (0x7 << 10) >> 10);
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <RCC_GetPCLK1Value+0x98>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	71fb      	strb	r3, [r7, #7]
	if(temp2 < 4){
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d802      	bhi.n	8001e8a <RCC_GetPCLK1Value+0x72>
		apb1PreScaler = 1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	72bb      	strb	r3, [r7, #10]
 8001e88:	e005      	b.n	8001e96 <RCC_GetPCLK1Value+0x7e>
	} else {
		apb1PreScaler = APB1_preScalerValues[temp2-4];
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	3b04      	subs	r3, #4
 8001e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <RCC_GetPCLK1Value+0xa8>)
 8001e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e94:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 = ((systemClock/ahbPrescaler)/apb1PreScaler);
 8001e96:	7afb      	ldrb	r3, [r7, #11]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e9e:	7abb      	ldrb	r3, [r7, #10]
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	603b      	str	r3, [r7, #0]
	return pclk1;
 8001ea6:	683b      	ldr	r3, [r7, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	20000010 	.word	0x20000010

08001ec4 <RCC_GetPLLClk>:

	pclk2 = ((systemClock/ahbPrescaler)/apb2PreScaler);
	return pclk2;
}

uint32_t RCC_GetPLLClk(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <init_systick_timer>:
#include "lcd.h"

#define SYSTICK_TIM_CLK		16000000UL

void init_systick_timer(uint32_t tick_hz)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <init_systick_timer+0x60>)
 8001ede:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <init_systick_timer+0x64>)
 8001ee2:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8001ee4:	4a15      	ldr	r2, [pc, #84]	@ (8001f3c <init_systick_timer+0x68>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f043 0204 	orr.w	r2, r3, #4
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e014 	.word	0xe000e014
 8001f38:	e000e010 	.word	0xe000e010
 8001f3c:	00f42400 	.word	0x00f42400

08001f40 <get_day>:

char* get_day(uint8_t i){
 8001f40:	b4b0      	push	{r4, r5, r7}
 8001f42:	b08b      	sub	sp, #44	@ 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	char* days[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <get_day+0x38>)
 8001f4c:	f107 040c 	add.w	r4, r7, #12
 8001f50:	461d      	mov	r5, r3
 8001f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f56:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	return days[i-1];
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	3328      	adds	r3, #40	@ 0x28
 8001f66:	443b      	add	r3, r7
 8001f68:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	372c      	adds	r7, #44	@ 0x2c
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bcb0      	pop	{r4, r5, r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	08003230 	.word	0x08003230

08001f7c <number_to_string>:

void number_to_string(uint8_t num, char* addr){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
	if(num < 10){
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	2b09      	cmp	r3, #9
 8001f8c:	d809      	bhi.n	8001fa2 <number_to_string+0x26>
		addr[0] = '0';
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2230      	movs	r2, #48	@ 0x30
 8001f92:	701a      	strb	r2, [r3, #0]
		addr[1] = num+48;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	79fa      	ldrb	r2, [r7, #7]
 8001f9a:	3230      	adds	r2, #48	@ 0x30
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	701a      	strb	r2, [r3, #0]
	} else{
		addr[0] = (num/10)+48;
		addr[1] = (num%10)+48;
	}
}
 8001fa0:	e019      	b.n	8001fd6 <number_to_string+0x5a>
		addr[0] = (num/10)+48;
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe4 <number_to_string+0x68>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	08db      	lsrs	r3, r3, #3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3330      	adds	r3, #48	@ 0x30
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	701a      	strb	r2, [r3, #0]
		addr[1] = (num%10)+48;
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <number_to_string+0x68>)
 8001fba:	fba3 1302 	umull	r1, r3, r3, r2
 8001fbe:	08d9      	lsrs	r1, r3, #3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	3230      	adds	r2, #48	@ 0x30
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	cccccccd 	.word	0xcccccccd

08001fe8 <time_to_string>:

char* time_to_string(RTC_Time_t *pRTCTime){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	//hh:mm:ss format

	static char time[9];
	time[2] = ':';
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <time_to_string+0x48>)
 8001ff2:	223a      	movs	r2, #58	@ 0x3a
 8001ff4:	709a      	strb	r2, [r3, #2]
	time[5] = ':';
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8002030 <time_to_string+0x48>)
 8001ff8:	223a      	movs	r2, #58	@ 0x3a
 8001ffa:	715a      	strb	r2, [r3, #5]

	number_to_string(pRTCTime->hours, &time[0]);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	490b      	ldr	r1, [pc, #44]	@ (8002030 <time_to_string+0x48>)
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ffba 	bl	8001f7c <number_to_string>
	number_to_string(pRTCTime->minutes, &time[3]);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	785b      	ldrb	r3, [r3, #1]
 800200c:	4909      	ldr	r1, [pc, #36]	@ (8002034 <time_to_string+0x4c>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ffb4 	bl	8001f7c <number_to_string>
	number_to_string(pRTCTime->seconds, &time[6]);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	789b      	ldrb	r3, [r3, #2]
 8002018:	4907      	ldr	r1, [pc, #28]	@ (8002038 <time_to_string+0x50>)
 800201a:	4618      	mov	r0, r3
 800201c:	f7ff ffae 	bl	8001f7c <number_to_string>

	time[8] = '\0';
 8002020:	4b03      	ldr	r3, [pc, #12]	@ (8002030 <time_to_string+0x48>)
 8002022:	2200      	movs	r2, #0
 8002024:	721a      	strb	r2, [r3, #8]

	return time;
 8002026:	4b02      	ldr	r3, [pc, #8]	@ (8002030 <time_to_string+0x48>)
}
 8002028:	4618      	mov	r0, r3
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200000b8 	.word	0x200000b8
 8002034:	200000bb 	.word	0x200000bb
 8002038:	200000be 	.word	0x200000be

0800203c <date_to_string>:

char* date_to_string(RTC_Date_t *pRTCDate){
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
	//dd/mm/yy format

	static char date[9];
	date[2] = '/';
 8002044:	4b0f      	ldr	r3, [pc, #60]	@ (8002084 <date_to_string+0x48>)
 8002046:	222f      	movs	r2, #47	@ 0x2f
 8002048:	709a      	strb	r2, [r3, #2]
	date[5] = '/';
 800204a:	4b0e      	ldr	r3, [pc, #56]	@ (8002084 <date_to_string+0x48>)
 800204c:	222f      	movs	r2, #47	@ 0x2f
 800204e:	715a      	strb	r2, [r3, #5]

	number_to_string(pRTCDate->date, &date[0]);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	490b      	ldr	r1, [pc, #44]	@ (8002084 <date_to_string+0x48>)
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff90 	bl	8001f7c <number_to_string>
	number_to_string(pRTCDate->month, &date[3]);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	785b      	ldrb	r3, [r3, #1]
 8002060:	4909      	ldr	r1, [pc, #36]	@ (8002088 <date_to_string+0x4c>)
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff ff8a 	bl	8001f7c <number_to_string>
	number_to_string(pRTCDate->year, &date[6]);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	789b      	ldrb	r3, [r3, #2]
 800206c:	4907      	ldr	r1, [pc, #28]	@ (800208c <date_to_string+0x50>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ff84 	bl	8001f7c <number_to_string>

	date[8] = '\0';
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <date_to_string+0x48>)
 8002076:	2200      	movs	r2, #0
 8002078:	721a      	strb	r2, [r3, #8]

	return date;
 800207a:	4b02      	ldr	r3, [pc, #8]	@ (8002084 <date_to_string+0x48>)
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	200000c4 	.word	0x200000c4
 8002088:	200000c7 	.word	0x200000c7
 800208c:	200000ca 	.word	0x200000ca

08002090 <main>:

int main(void){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0

	RTC_Time_t rtcTime;
	RTC_Date_t rtcDate;

	/*Initialize the LCD*/
	LCD_init();
 8002096:	f7fe fef5 	bl	8000e84 <LCD_init>

	LCD_send_string("DS1307 RTC Module Testing\n");
 800209a:	4815      	ldr	r0, [pc, #84]	@ (80020f0 <main+0x60>)
 800209c:	f7fe ffc4 	bl	8001028 <LCD_send_string>

	if(DS1307_init()){
 80020a0:	f7fe fcd4 	bl	8000a4c <DS1307_init>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d004      	beq.n	80020b4 <main+0x24>
		//Non-zero value which means CH=1
		printf("Initialization failed for DS1307 RTC module");
 80020aa:	4812      	ldr	r0, [pc, #72]	@ (80020f4 <main+0x64>)
 80020ac:	f000 fa38 	bl	8002520 <iprintf>
		while(1);
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <main+0x20>
	}

	//Zero value which means CH=0

	/*Initialize the Systick timer*/
	init_systick_timer(1);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff ff0d 	bl	8001ed4 <init_systick_timer>

	rtcTime.hours = 10;
 80020ba:	230a      	movs	r3, #10
 80020bc:	713b      	strb	r3, [r7, #4]
	rtcTime.minutes = 27;
 80020be:	231b      	movs	r3, #27
 80020c0:	717b      	strb	r3, [r7, #5]
	rtcTime.seconds = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	71bb      	strb	r3, [r7, #6]
	rtcTime.timeFormat = TIME_FORMAT_12HRS_PM;
 80020c6:	2301      	movs	r3, #1
 80020c8:	71fb      	strb	r3, [r7, #7]

	rtcDate.date = 25;
 80020ca:	2319      	movs	r3, #25
 80020cc:	703b      	strb	r3, [r7, #0]
	rtcDate.month = 2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	707b      	strb	r3, [r7, #1]
	rtcDate.year = 25;
 80020d2:	2319      	movs	r3, #25
 80020d4:	70bb      	strb	r3, [r7, #2]
	rtcDate.day = TUESDAY;
 80020d6:	2303      	movs	r3, #3
 80020d8:	70fb      	strb	r3, [r7, #3]

	DS1307_setCurrentTime(&rtcTime);
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fccc 	bl	8000a7a <DS1307_setCurrentTime>
	DS1307_setCurrentDate(&rtcDate);
 80020e2:	463b      	mov	r3, r7
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fd6f 	bl	8000bc8 <DS1307_setCurrentDate>

	while(1);
 80020ea:	bf00      	nop
 80020ec:	e7fd      	b.n	80020ea <main+0x5a>
 80020ee:	bf00      	nop
 80020f0:	0800324c 	.word	0x0800324c
 80020f4:	08003268 	.word	0x08003268

080020f8 <SysTick_Handler>:
}

void SysTick_Handler(void){
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0

	RTC_Time_t rtcTime;
	RTC_Date_t rtcDate;

	/*Clearing the LCD display*/
	LCD_clear_display();
 80020fe:	f7fe ffd0 	bl	80010a2 <LCD_clear_display>
	LCD_display_return_home();
 8002102:	f7fe ffd8 	bl	80010b6 <LCD_display_return_home>

	/*Get the time related information and print*/
	DS1307_getCurrentTime(&rtcTime);
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fd0e 	bl	8000b2c <DS1307_getCurrentTime>

	char *am_pm;
	if(rtcTime.timeFormat != TIME_FORMAT_24HRS){
 8002110:	7afb      	ldrb	r3, [r7, #11]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d022      	beq.n	800215c <SysTick_Handler+0x64>
		//12 hour format
		am_pm = (rtcTime.timeFormat)? "PM": "AM";
 8002116:	7afb      	ldrb	r3, [r7, #11]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <SysTick_Handler+0x28>
 800211c:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <SysTick_Handler+0xf4>)
 800211e:	e000      	b.n	8002122 <SysTick_Handler+0x2a>
 8002120:	4b33      	ldr	r3, [pc, #204]	@ (80021f0 <SysTick_Handler+0xf8>)
 8002122:	60fb      	str	r3, [r7, #12]
		printf("Current Time: %s %s\n", time_to_string(&rtcTime), am_pm);
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5d 	bl	8001fe8 <time_to_string>
 800212e:	4603      	mov	r3, r0
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4619      	mov	r1, r3
 8002134:	482f      	ldr	r0, [pc, #188]	@ (80021f4 <SysTick_Handler+0xfc>)
 8002136:	f000 f9f3 	bl	8002520 <iprintf>

		//Printing the current time on LCD in the 1st row
		LCD_set_cursor(1,1);
 800213a:	2101      	movs	r1, #1
 800213c:	2001      	movs	r0, #1
 800213e:	f7fe ff89 	bl	8001054 <LCD_set_cursor>
		LCD_send_string(time_to_string(&rtcTime));
 8002142:	f107 0308 	add.w	r3, r7, #8
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff4e 	bl	8001fe8 <time_to_string>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ff6a 	bl	8001028 <LCD_send_string>
		LCD_send_string(am_pm);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7fe ff67 	bl	8001028 <LCD_send_string>
 800215a:	e016      	b.n	800218a <SysTick_Handler+0x92>
	} else{
		printf("Current Time: %s\n", time_to_string(&rtcTime));
 800215c:	f107 0308 	add.w	r3, r7, #8
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff41 	bl	8001fe8 <time_to_string>
 8002166:	4603      	mov	r3, r0
 8002168:	4619      	mov	r1, r3
 800216a:	4823      	ldr	r0, [pc, #140]	@ (80021f8 <SysTick_Handler+0x100>)
 800216c:	f000 f9d8 	bl	8002520 <iprintf>

		//Printing the current time on LCD in the 1st row
		LCD_set_cursor(1,1);
 8002170:	2101      	movs	r1, #1
 8002172:	2001      	movs	r0, #1
 8002174:	f7fe ff6e 	bl	8001054 <LCD_set_cursor>
		LCD_send_string(time_to_string(&rtcTime));
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff33 	bl	8001fe8 <time_to_string>
 8002182:	4603      	mov	r3, r0
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe ff4f 	bl	8001028 <LCD_send_string>
	}

	/*Get the date related information and print*/
	DS1307_getCurrentDate(&rtcDate);
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fd53 	bl	8000c38 <DS1307_getCurrentDate>
	printf("Current Date: %s <%s>\n", date_to_string(&rtcDate), get_day(rtcDate.day));
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff51 	bl	800203c <date_to_string>
 800219a:	4604      	mov	r4, r0
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fece 	bl	8001f40 <get_day>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4621      	mov	r1, r4
 80021aa:	4814      	ldr	r0, [pc, #80]	@ (80021fc <SysTick_Handler+0x104>)
 80021ac:	f000 f9b8 	bl	8002520 <iprintf>

	//Printing the current date on LCD in the 2nd row
	LCD_set_cursor(2,1);
 80021b0:	2101      	movs	r1, #1
 80021b2:	2002      	movs	r0, #2
 80021b4:	f7fe ff4e 	bl	8001054 <LCD_set_cursor>
	LCD_send_string(date_to_string(&rtcDate));
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff3e 	bl	800203c <date_to_string>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe ff30 	bl	8001028 <LCD_send_string>
	LCD_send_char('<');
 80021c8:	203c      	movs	r0, #60	@ 0x3c
 80021ca:	f7fe ff0b 	bl	8000fe4 <LCD_send_char>
	LCD_send_string(get_day(rtcDate.day));
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff feb5 	bl	8001f40 <get_day>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe ff25 	bl	8001028 <LCD_send_string>
	LCD_send_char('>');
 80021de:	203e      	movs	r0, #62	@ 0x3e
 80021e0:	f7fe ff00 	bl	8000fe4 <LCD_send_char>
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	08003294 	.word	0x08003294
 80021f0:	08003298 	.word	0x08003298
 80021f4:	0800329c 	.word	0x0800329c
 80021f8:	080032b4 	.word	0x080032b4
 80021fc:	080032c8 	.word	0x080032c8

08002200 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e00a      	b.n	8002228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002212:	f3af 8000 	nop.w
 8002216:	4601      	mov	r1, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	60ba      	str	r2, [r7, #8]
 800221e:	b2ca      	uxtb	r2, r1
 8002220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3301      	adds	r3, #1
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	dbf0      	blt.n	8002212 <_read+0x12>
  }

  return len;
 8002230:	687b      	ldr	r3, [r7, #4]
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e009      	b.n	8002260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	60ba      	str	r2, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf1      	blt.n	800224c <_write+0x12>
  }
  return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_close>:

int _close(int file)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800229a:	605a      	str	r2, [r3, #4]
  return 0;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_isatty>:

int _isatty(int file)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022e4:	4a14      	ldr	r2, [pc, #80]	@ (8002338 <_sbrk+0x5c>)
 80022e6:	4b15      	ldr	r3, [pc, #84]	@ (800233c <_sbrk+0x60>)
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <_sbrk+0x64>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f8:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <_sbrk+0x64>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	@ (8002344 <_sbrk+0x68>)
 80022fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022fe:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	429a      	cmp	r2, r3
 800230a:	d207      	bcs.n	800231c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800230c:	f000 f9ac 	bl	8002668 <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	220c      	movs	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
 800231a:	e009      	b.n	8002330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800231c:	4b08      	ldr	r3, [pc, #32]	@ (8002340 <_sbrk+0x64>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002322:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	4a05      	ldr	r2, [pc, #20]	@ (8002340 <_sbrk+0x64>)
 800232c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20020000 	.word	0x20020000
 800233c:	00000400 	.word	0x00000400
 8002340:	200000d0 	.word	0x200000d0
 8002344:	20000220 	.word	0x20000220

08002348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002348:	480d      	ldr	r0, [pc, #52]	@ (8002380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800234a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800234c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <LoopForever+0x6>)
  ldr r1, =_edata
 8002352:	490d      	ldr	r1, [pc, #52]	@ (8002388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002354:	4a0d      	ldr	r2, [pc, #52]	@ (800238c <LoopForever+0xe>)
  movs r3, #0
 8002356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002358:	e002      	b.n	8002360 <LoopCopyDataInit>

0800235a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800235a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800235c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800235e:	3304      	adds	r3, #4

08002360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002364:	d3f9      	bcc.n	800235a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002366:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002368:	4c0a      	ldr	r4, [pc, #40]	@ (8002394 <LoopForever+0x16>)
  movs r3, #0
 800236a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800236c:	e001      	b.n	8002372 <LoopFillZerobss>

0800236e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800236e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002370:	3204      	adds	r2, #4

08002372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002374:	d3fb      	bcc.n	800236e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002376:	f000 f97d 	bl	8002674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800237a:	f7ff fe89 	bl	8002090 <main>

0800237e <LoopForever>:

LoopForever:
  b LoopForever
 800237e:	e7fe      	b.n	800237e <LoopForever>
  ldr   r0, =_estack
 8002380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002388:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800238c:	08003324 	.word	0x08003324
  ldr r2, =_sbss
 8002390:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002394:	20000220 	.word	0x20000220

08002398 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002398:	e7fe      	b.n	8002398 <ADC_IRQHandler>
	...

0800239c <std>:
 800239c:	2300      	movs	r3, #0
 800239e:	b510      	push	{r4, lr}
 80023a0:	4604      	mov	r4, r0
 80023a2:	e9c0 3300 	strd	r3, r3, [r0]
 80023a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023aa:	6083      	str	r3, [r0, #8]
 80023ac:	8181      	strh	r1, [r0, #12]
 80023ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80023b0:	81c2      	strh	r2, [r0, #14]
 80023b2:	6183      	str	r3, [r0, #24]
 80023b4:	4619      	mov	r1, r3
 80023b6:	2208      	movs	r2, #8
 80023b8:	305c      	adds	r0, #92	@ 0x5c
 80023ba:	f000 f906 	bl	80025ca <memset>
 80023be:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <std+0x58>)
 80023c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <std+0x5c>)
 80023c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023c6:	4b0d      	ldr	r3, [pc, #52]	@ (80023fc <std+0x60>)
 80023c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <std+0x64>)
 80023cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <std+0x68>)
 80023d0:	6224      	str	r4, [r4, #32]
 80023d2:	429c      	cmp	r4, r3
 80023d4:	d006      	beq.n	80023e4 <std+0x48>
 80023d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023da:	4294      	cmp	r4, r2
 80023dc:	d002      	beq.n	80023e4 <std+0x48>
 80023de:	33d0      	adds	r3, #208	@ 0xd0
 80023e0:	429c      	cmp	r4, r3
 80023e2:	d105      	bne.n	80023f0 <std+0x54>
 80023e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80023e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023ec:	f000 b966 	b.w	80026bc <__retarget_lock_init_recursive>
 80023f0:	bd10      	pop	{r4, pc}
 80023f2:	bf00      	nop
 80023f4:	08002545 	.word	0x08002545
 80023f8:	08002567 	.word	0x08002567
 80023fc:	0800259f 	.word	0x0800259f
 8002400:	080025c3 	.word	0x080025c3
 8002404:	200000d4 	.word	0x200000d4

08002408 <stdio_exit_handler>:
 8002408:	4a02      	ldr	r2, [pc, #8]	@ (8002414 <stdio_exit_handler+0xc>)
 800240a:	4903      	ldr	r1, [pc, #12]	@ (8002418 <stdio_exit_handler+0x10>)
 800240c:	4803      	ldr	r0, [pc, #12]	@ (800241c <stdio_exit_handler+0x14>)
 800240e:	f000 b869 	b.w	80024e4 <_fwalk_sglue>
 8002412:	bf00      	nop
 8002414:	20000018 	.word	0x20000018
 8002418:	08002f5d 	.word	0x08002f5d
 800241c:	20000028 	.word	0x20000028

08002420 <cleanup_stdio>:
 8002420:	6841      	ldr	r1, [r0, #4]
 8002422:	4b0c      	ldr	r3, [pc, #48]	@ (8002454 <cleanup_stdio+0x34>)
 8002424:	4299      	cmp	r1, r3
 8002426:	b510      	push	{r4, lr}
 8002428:	4604      	mov	r4, r0
 800242a:	d001      	beq.n	8002430 <cleanup_stdio+0x10>
 800242c:	f000 fd96 	bl	8002f5c <_fflush_r>
 8002430:	68a1      	ldr	r1, [r4, #8]
 8002432:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <cleanup_stdio+0x38>)
 8002434:	4299      	cmp	r1, r3
 8002436:	d002      	beq.n	800243e <cleanup_stdio+0x1e>
 8002438:	4620      	mov	r0, r4
 800243a:	f000 fd8f 	bl	8002f5c <_fflush_r>
 800243e:	68e1      	ldr	r1, [r4, #12]
 8002440:	4b06      	ldr	r3, [pc, #24]	@ (800245c <cleanup_stdio+0x3c>)
 8002442:	4299      	cmp	r1, r3
 8002444:	d004      	beq.n	8002450 <cleanup_stdio+0x30>
 8002446:	4620      	mov	r0, r4
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800244c:	f000 bd86 	b.w	8002f5c <_fflush_r>
 8002450:	bd10      	pop	{r4, pc}
 8002452:	bf00      	nop
 8002454:	200000d4 	.word	0x200000d4
 8002458:	2000013c 	.word	0x2000013c
 800245c:	200001a4 	.word	0x200001a4

08002460 <global_stdio_init.part.0>:
 8002460:	b510      	push	{r4, lr}
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <global_stdio_init.part.0+0x30>)
 8002464:	4c0b      	ldr	r4, [pc, #44]	@ (8002494 <global_stdio_init.part.0+0x34>)
 8002466:	4a0c      	ldr	r2, [pc, #48]	@ (8002498 <global_stdio_init.part.0+0x38>)
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	4620      	mov	r0, r4
 800246c:	2200      	movs	r2, #0
 800246e:	2104      	movs	r1, #4
 8002470:	f7ff ff94 	bl	800239c <std>
 8002474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002478:	2201      	movs	r2, #1
 800247a:	2109      	movs	r1, #9
 800247c:	f7ff ff8e 	bl	800239c <std>
 8002480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002484:	2202      	movs	r2, #2
 8002486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800248a:	2112      	movs	r1, #18
 800248c:	f7ff bf86 	b.w	800239c <std>
 8002490:	2000020c 	.word	0x2000020c
 8002494:	200000d4 	.word	0x200000d4
 8002498:	08002409 	.word	0x08002409

0800249c <__sfp_lock_acquire>:
 800249c:	4801      	ldr	r0, [pc, #4]	@ (80024a4 <__sfp_lock_acquire+0x8>)
 800249e:	f000 b90e 	b.w	80026be <__retarget_lock_acquire_recursive>
 80024a2:	bf00      	nop
 80024a4:	20000215 	.word	0x20000215

080024a8 <__sfp_lock_release>:
 80024a8:	4801      	ldr	r0, [pc, #4]	@ (80024b0 <__sfp_lock_release+0x8>)
 80024aa:	f000 b909 	b.w	80026c0 <__retarget_lock_release_recursive>
 80024ae:	bf00      	nop
 80024b0:	20000215 	.word	0x20000215

080024b4 <__sinit>:
 80024b4:	b510      	push	{r4, lr}
 80024b6:	4604      	mov	r4, r0
 80024b8:	f7ff fff0 	bl	800249c <__sfp_lock_acquire>
 80024bc:	6a23      	ldr	r3, [r4, #32]
 80024be:	b11b      	cbz	r3, 80024c8 <__sinit+0x14>
 80024c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c4:	f7ff bff0 	b.w	80024a8 <__sfp_lock_release>
 80024c8:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <__sinit+0x28>)
 80024ca:	6223      	str	r3, [r4, #32]
 80024cc:	4b04      	ldr	r3, [pc, #16]	@ (80024e0 <__sinit+0x2c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f5      	bne.n	80024c0 <__sinit+0xc>
 80024d4:	f7ff ffc4 	bl	8002460 <global_stdio_init.part.0>
 80024d8:	e7f2      	b.n	80024c0 <__sinit+0xc>
 80024da:	bf00      	nop
 80024dc:	08002421 	.word	0x08002421
 80024e0:	2000020c 	.word	0x2000020c

080024e4 <_fwalk_sglue>:
 80024e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024e8:	4607      	mov	r7, r0
 80024ea:	4688      	mov	r8, r1
 80024ec:	4614      	mov	r4, r2
 80024ee:	2600      	movs	r6, #0
 80024f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80024f4:	f1b9 0901 	subs.w	r9, r9, #1
 80024f8:	d505      	bpl.n	8002506 <_fwalk_sglue+0x22>
 80024fa:	6824      	ldr	r4, [r4, #0]
 80024fc:	2c00      	cmp	r4, #0
 80024fe:	d1f7      	bne.n	80024f0 <_fwalk_sglue+0xc>
 8002500:	4630      	mov	r0, r6
 8002502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002506:	89ab      	ldrh	r3, [r5, #12]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d907      	bls.n	800251c <_fwalk_sglue+0x38>
 800250c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002510:	3301      	adds	r3, #1
 8002512:	d003      	beq.n	800251c <_fwalk_sglue+0x38>
 8002514:	4629      	mov	r1, r5
 8002516:	4638      	mov	r0, r7
 8002518:	47c0      	blx	r8
 800251a:	4306      	orrs	r6, r0
 800251c:	3568      	adds	r5, #104	@ 0x68
 800251e:	e7e9      	b.n	80024f4 <_fwalk_sglue+0x10>

08002520 <iprintf>:
 8002520:	b40f      	push	{r0, r1, r2, r3}
 8002522:	b507      	push	{r0, r1, r2, lr}
 8002524:	4906      	ldr	r1, [pc, #24]	@ (8002540 <iprintf+0x20>)
 8002526:	ab04      	add	r3, sp, #16
 8002528:	6808      	ldr	r0, [r1, #0]
 800252a:	f853 2b04 	ldr.w	r2, [r3], #4
 800252e:	6881      	ldr	r1, [r0, #8]
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	f000 f9e9 	bl	8002908 <_vfiprintf_r>
 8002536:	b003      	add	sp, #12
 8002538:	f85d eb04 	ldr.w	lr, [sp], #4
 800253c:	b004      	add	sp, #16
 800253e:	4770      	bx	lr
 8002540:	20000024 	.word	0x20000024

08002544 <__sread>:
 8002544:	b510      	push	{r4, lr}
 8002546:	460c      	mov	r4, r1
 8002548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800254c:	f000 f868 	bl	8002620 <_read_r>
 8002550:	2800      	cmp	r0, #0
 8002552:	bfab      	itete	ge
 8002554:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002556:	89a3      	ldrhlt	r3, [r4, #12]
 8002558:	181b      	addge	r3, r3, r0
 800255a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800255e:	bfac      	ite	ge
 8002560:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002562:	81a3      	strhlt	r3, [r4, #12]
 8002564:	bd10      	pop	{r4, pc}

08002566 <__swrite>:
 8002566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800256a:	461f      	mov	r7, r3
 800256c:	898b      	ldrh	r3, [r1, #12]
 800256e:	05db      	lsls	r3, r3, #23
 8002570:	4605      	mov	r5, r0
 8002572:	460c      	mov	r4, r1
 8002574:	4616      	mov	r6, r2
 8002576:	d505      	bpl.n	8002584 <__swrite+0x1e>
 8002578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800257c:	2302      	movs	r3, #2
 800257e:	2200      	movs	r2, #0
 8002580:	f000 f83c 	bl	80025fc <_lseek_r>
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800258a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	4632      	mov	r2, r6
 8002592:	463b      	mov	r3, r7
 8002594:	4628      	mov	r0, r5
 8002596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800259a:	f000 b853 	b.w	8002644 <_write_r>

0800259e <__sseek>:
 800259e:	b510      	push	{r4, lr}
 80025a0:	460c      	mov	r4, r1
 80025a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025a6:	f000 f829 	bl	80025fc <_lseek_r>
 80025aa:	1c43      	adds	r3, r0, #1
 80025ac:	89a3      	ldrh	r3, [r4, #12]
 80025ae:	bf15      	itete	ne
 80025b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025ba:	81a3      	strheq	r3, [r4, #12]
 80025bc:	bf18      	it	ne
 80025be:	81a3      	strhne	r3, [r4, #12]
 80025c0:	bd10      	pop	{r4, pc}

080025c2 <__sclose>:
 80025c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025c6:	f000 b809 	b.w	80025dc <_close_r>

080025ca <memset>:
 80025ca:	4402      	add	r2, r0
 80025cc:	4603      	mov	r3, r0
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d100      	bne.n	80025d4 <memset+0xa>
 80025d2:	4770      	bx	lr
 80025d4:	f803 1b01 	strb.w	r1, [r3], #1
 80025d8:	e7f9      	b.n	80025ce <memset+0x4>
	...

080025dc <_close_r>:
 80025dc:	b538      	push	{r3, r4, r5, lr}
 80025de:	4d06      	ldr	r5, [pc, #24]	@ (80025f8 <_close_r+0x1c>)
 80025e0:	2300      	movs	r3, #0
 80025e2:	4604      	mov	r4, r0
 80025e4:	4608      	mov	r0, r1
 80025e6:	602b      	str	r3, [r5, #0]
 80025e8:	f7ff fe43 	bl	8002272 <_close>
 80025ec:	1c43      	adds	r3, r0, #1
 80025ee:	d102      	bne.n	80025f6 <_close_r+0x1a>
 80025f0:	682b      	ldr	r3, [r5, #0]
 80025f2:	b103      	cbz	r3, 80025f6 <_close_r+0x1a>
 80025f4:	6023      	str	r3, [r4, #0]
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	20000210 	.word	0x20000210

080025fc <_lseek_r>:
 80025fc:	b538      	push	{r3, r4, r5, lr}
 80025fe:	4d07      	ldr	r5, [pc, #28]	@ (800261c <_lseek_r+0x20>)
 8002600:	4604      	mov	r4, r0
 8002602:	4608      	mov	r0, r1
 8002604:	4611      	mov	r1, r2
 8002606:	2200      	movs	r2, #0
 8002608:	602a      	str	r2, [r5, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f7ff fe58 	bl	80022c0 <_lseek>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d102      	bne.n	800261a <_lseek_r+0x1e>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	b103      	cbz	r3, 800261a <_lseek_r+0x1e>
 8002618:	6023      	str	r3, [r4, #0]
 800261a:	bd38      	pop	{r3, r4, r5, pc}
 800261c:	20000210 	.word	0x20000210

08002620 <_read_r>:
 8002620:	b538      	push	{r3, r4, r5, lr}
 8002622:	4d07      	ldr	r5, [pc, #28]	@ (8002640 <_read_r+0x20>)
 8002624:	4604      	mov	r4, r0
 8002626:	4608      	mov	r0, r1
 8002628:	4611      	mov	r1, r2
 800262a:	2200      	movs	r2, #0
 800262c:	602a      	str	r2, [r5, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff fde6 	bl	8002200 <_read>
 8002634:	1c43      	adds	r3, r0, #1
 8002636:	d102      	bne.n	800263e <_read_r+0x1e>
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	b103      	cbz	r3, 800263e <_read_r+0x1e>
 800263c:	6023      	str	r3, [r4, #0]
 800263e:	bd38      	pop	{r3, r4, r5, pc}
 8002640:	20000210 	.word	0x20000210

08002644 <_write_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4d07      	ldr	r5, [pc, #28]	@ (8002664 <_write_r+0x20>)
 8002648:	4604      	mov	r4, r0
 800264a:	4608      	mov	r0, r1
 800264c:	4611      	mov	r1, r2
 800264e:	2200      	movs	r2, #0
 8002650:	602a      	str	r2, [r5, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff fdf1 	bl	800223a <_write>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d102      	bne.n	8002662 <_write_r+0x1e>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	b103      	cbz	r3, 8002662 <_write_r+0x1e>
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	20000210 	.word	0x20000210

08002668 <__errno>:
 8002668:	4b01      	ldr	r3, [pc, #4]	@ (8002670 <__errno+0x8>)
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	20000024 	.word	0x20000024

08002674 <__libc_init_array>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	4d0d      	ldr	r5, [pc, #52]	@ (80026ac <__libc_init_array+0x38>)
 8002678:	4c0d      	ldr	r4, [pc, #52]	@ (80026b0 <__libc_init_array+0x3c>)
 800267a:	1b64      	subs	r4, r4, r5
 800267c:	10a4      	asrs	r4, r4, #2
 800267e:	2600      	movs	r6, #0
 8002680:	42a6      	cmp	r6, r4
 8002682:	d109      	bne.n	8002698 <__libc_init_array+0x24>
 8002684:	4d0b      	ldr	r5, [pc, #44]	@ (80026b4 <__libc_init_array+0x40>)
 8002686:	4c0c      	ldr	r4, [pc, #48]	@ (80026b8 <__libc_init_array+0x44>)
 8002688:	f000 fdb8 	bl	80031fc <_init>
 800268c:	1b64      	subs	r4, r4, r5
 800268e:	10a4      	asrs	r4, r4, #2
 8002690:	2600      	movs	r6, #0
 8002692:	42a6      	cmp	r6, r4
 8002694:	d105      	bne.n	80026a2 <__libc_init_array+0x2e>
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f855 3b04 	ldr.w	r3, [r5], #4
 800269c:	4798      	blx	r3
 800269e:	3601      	adds	r6, #1
 80026a0:	e7ee      	b.n	8002680 <__libc_init_array+0xc>
 80026a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a6:	4798      	blx	r3
 80026a8:	3601      	adds	r6, #1
 80026aa:	e7f2      	b.n	8002692 <__libc_init_array+0x1e>
 80026ac:	0800331c 	.word	0x0800331c
 80026b0:	0800331c 	.word	0x0800331c
 80026b4:	0800331c 	.word	0x0800331c
 80026b8:	08003320 	.word	0x08003320

080026bc <__retarget_lock_init_recursive>:
 80026bc:	4770      	bx	lr

080026be <__retarget_lock_acquire_recursive>:
 80026be:	4770      	bx	lr

080026c0 <__retarget_lock_release_recursive>:
 80026c0:	4770      	bx	lr
	...

080026c4 <_free_r>:
 80026c4:	b538      	push	{r3, r4, r5, lr}
 80026c6:	4605      	mov	r5, r0
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d041      	beq.n	8002750 <_free_r+0x8c>
 80026cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026d0:	1f0c      	subs	r4, r1, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	bfb8      	it	lt
 80026d6:	18e4      	addlt	r4, r4, r3
 80026d8:	f000 f8e0 	bl	800289c <__malloc_lock>
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <_free_r+0x90>)
 80026de:	6813      	ldr	r3, [r2, #0]
 80026e0:	b933      	cbnz	r3, 80026f0 <_free_r+0x2c>
 80026e2:	6063      	str	r3, [r4, #4]
 80026e4:	6014      	str	r4, [r2, #0]
 80026e6:	4628      	mov	r0, r5
 80026e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026ec:	f000 b8dc 	b.w	80028a8 <__malloc_unlock>
 80026f0:	42a3      	cmp	r3, r4
 80026f2:	d908      	bls.n	8002706 <_free_r+0x42>
 80026f4:	6820      	ldr	r0, [r4, #0]
 80026f6:	1821      	adds	r1, r4, r0
 80026f8:	428b      	cmp	r3, r1
 80026fa:	bf01      	itttt	eq
 80026fc:	6819      	ldreq	r1, [r3, #0]
 80026fe:	685b      	ldreq	r3, [r3, #4]
 8002700:	1809      	addeq	r1, r1, r0
 8002702:	6021      	streq	r1, [r4, #0]
 8002704:	e7ed      	b.n	80026e2 <_free_r+0x1e>
 8002706:	461a      	mov	r2, r3
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	b10b      	cbz	r3, 8002710 <_free_r+0x4c>
 800270c:	42a3      	cmp	r3, r4
 800270e:	d9fa      	bls.n	8002706 <_free_r+0x42>
 8002710:	6811      	ldr	r1, [r2, #0]
 8002712:	1850      	adds	r0, r2, r1
 8002714:	42a0      	cmp	r0, r4
 8002716:	d10b      	bne.n	8002730 <_free_r+0x6c>
 8002718:	6820      	ldr	r0, [r4, #0]
 800271a:	4401      	add	r1, r0
 800271c:	1850      	adds	r0, r2, r1
 800271e:	4283      	cmp	r3, r0
 8002720:	6011      	str	r1, [r2, #0]
 8002722:	d1e0      	bne.n	80026e6 <_free_r+0x22>
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	6053      	str	r3, [r2, #4]
 800272a:	4408      	add	r0, r1
 800272c:	6010      	str	r0, [r2, #0]
 800272e:	e7da      	b.n	80026e6 <_free_r+0x22>
 8002730:	d902      	bls.n	8002738 <_free_r+0x74>
 8002732:	230c      	movs	r3, #12
 8002734:	602b      	str	r3, [r5, #0]
 8002736:	e7d6      	b.n	80026e6 <_free_r+0x22>
 8002738:	6820      	ldr	r0, [r4, #0]
 800273a:	1821      	adds	r1, r4, r0
 800273c:	428b      	cmp	r3, r1
 800273e:	bf04      	itt	eq
 8002740:	6819      	ldreq	r1, [r3, #0]
 8002742:	685b      	ldreq	r3, [r3, #4]
 8002744:	6063      	str	r3, [r4, #4]
 8002746:	bf04      	itt	eq
 8002748:	1809      	addeq	r1, r1, r0
 800274a:	6021      	streq	r1, [r4, #0]
 800274c:	6054      	str	r4, [r2, #4]
 800274e:	e7ca      	b.n	80026e6 <_free_r+0x22>
 8002750:	bd38      	pop	{r3, r4, r5, pc}
 8002752:	bf00      	nop
 8002754:	2000021c 	.word	0x2000021c

08002758 <sbrk_aligned>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	4e0f      	ldr	r6, [pc, #60]	@ (8002798 <sbrk_aligned+0x40>)
 800275c:	460c      	mov	r4, r1
 800275e:	6831      	ldr	r1, [r6, #0]
 8002760:	4605      	mov	r5, r0
 8002762:	b911      	cbnz	r1, 800276a <sbrk_aligned+0x12>
 8002764:	f000 fcb6 	bl	80030d4 <_sbrk_r>
 8002768:	6030      	str	r0, [r6, #0]
 800276a:	4621      	mov	r1, r4
 800276c:	4628      	mov	r0, r5
 800276e:	f000 fcb1 	bl	80030d4 <_sbrk_r>
 8002772:	1c43      	adds	r3, r0, #1
 8002774:	d103      	bne.n	800277e <sbrk_aligned+0x26>
 8002776:	f04f 34ff 	mov.w	r4, #4294967295
 800277a:	4620      	mov	r0, r4
 800277c:	bd70      	pop	{r4, r5, r6, pc}
 800277e:	1cc4      	adds	r4, r0, #3
 8002780:	f024 0403 	bic.w	r4, r4, #3
 8002784:	42a0      	cmp	r0, r4
 8002786:	d0f8      	beq.n	800277a <sbrk_aligned+0x22>
 8002788:	1a21      	subs	r1, r4, r0
 800278a:	4628      	mov	r0, r5
 800278c:	f000 fca2 	bl	80030d4 <_sbrk_r>
 8002790:	3001      	adds	r0, #1
 8002792:	d1f2      	bne.n	800277a <sbrk_aligned+0x22>
 8002794:	e7ef      	b.n	8002776 <sbrk_aligned+0x1e>
 8002796:	bf00      	nop
 8002798:	20000218 	.word	0x20000218

0800279c <_malloc_r>:
 800279c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027a0:	1ccd      	adds	r5, r1, #3
 80027a2:	f025 0503 	bic.w	r5, r5, #3
 80027a6:	3508      	adds	r5, #8
 80027a8:	2d0c      	cmp	r5, #12
 80027aa:	bf38      	it	cc
 80027ac:	250c      	movcc	r5, #12
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	4606      	mov	r6, r0
 80027b2:	db01      	blt.n	80027b8 <_malloc_r+0x1c>
 80027b4:	42a9      	cmp	r1, r5
 80027b6:	d904      	bls.n	80027c2 <_malloc_r+0x26>
 80027b8:	230c      	movs	r3, #12
 80027ba:	6033      	str	r3, [r6, #0]
 80027bc:	2000      	movs	r0, #0
 80027be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002898 <_malloc_r+0xfc>
 80027c6:	f000 f869 	bl	800289c <__malloc_lock>
 80027ca:	f8d8 3000 	ldr.w	r3, [r8]
 80027ce:	461c      	mov	r4, r3
 80027d0:	bb44      	cbnz	r4, 8002824 <_malloc_r+0x88>
 80027d2:	4629      	mov	r1, r5
 80027d4:	4630      	mov	r0, r6
 80027d6:	f7ff ffbf 	bl	8002758 <sbrk_aligned>
 80027da:	1c43      	adds	r3, r0, #1
 80027dc:	4604      	mov	r4, r0
 80027de:	d158      	bne.n	8002892 <_malloc_r+0xf6>
 80027e0:	f8d8 4000 	ldr.w	r4, [r8]
 80027e4:	4627      	mov	r7, r4
 80027e6:	2f00      	cmp	r7, #0
 80027e8:	d143      	bne.n	8002872 <_malloc_r+0xd6>
 80027ea:	2c00      	cmp	r4, #0
 80027ec:	d04b      	beq.n	8002886 <_malloc_r+0xea>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	4639      	mov	r1, r7
 80027f2:	4630      	mov	r0, r6
 80027f4:	eb04 0903 	add.w	r9, r4, r3
 80027f8:	f000 fc6c 	bl	80030d4 <_sbrk_r>
 80027fc:	4581      	cmp	r9, r0
 80027fe:	d142      	bne.n	8002886 <_malloc_r+0xea>
 8002800:	6821      	ldr	r1, [r4, #0]
 8002802:	1a6d      	subs	r5, r5, r1
 8002804:	4629      	mov	r1, r5
 8002806:	4630      	mov	r0, r6
 8002808:	f7ff ffa6 	bl	8002758 <sbrk_aligned>
 800280c:	3001      	adds	r0, #1
 800280e:	d03a      	beq.n	8002886 <_malloc_r+0xea>
 8002810:	6823      	ldr	r3, [r4, #0]
 8002812:	442b      	add	r3, r5
 8002814:	6023      	str	r3, [r4, #0]
 8002816:	f8d8 3000 	ldr.w	r3, [r8]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	bb62      	cbnz	r2, 8002878 <_malloc_r+0xdc>
 800281e:	f8c8 7000 	str.w	r7, [r8]
 8002822:	e00f      	b.n	8002844 <_malloc_r+0xa8>
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	1b52      	subs	r2, r2, r5
 8002828:	d420      	bmi.n	800286c <_malloc_r+0xd0>
 800282a:	2a0b      	cmp	r2, #11
 800282c:	d917      	bls.n	800285e <_malloc_r+0xc2>
 800282e:	1961      	adds	r1, r4, r5
 8002830:	42a3      	cmp	r3, r4
 8002832:	6025      	str	r5, [r4, #0]
 8002834:	bf18      	it	ne
 8002836:	6059      	strne	r1, [r3, #4]
 8002838:	6863      	ldr	r3, [r4, #4]
 800283a:	bf08      	it	eq
 800283c:	f8c8 1000 	streq.w	r1, [r8]
 8002840:	5162      	str	r2, [r4, r5]
 8002842:	604b      	str	r3, [r1, #4]
 8002844:	4630      	mov	r0, r6
 8002846:	f000 f82f 	bl	80028a8 <__malloc_unlock>
 800284a:	f104 000b 	add.w	r0, r4, #11
 800284e:	1d23      	adds	r3, r4, #4
 8002850:	f020 0007 	bic.w	r0, r0, #7
 8002854:	1ac2      	subs	r2, r0, r3
 8002856:	bf1c      	itt	ne
 8002858:	1a1b      	subne	r3, r3, r0
 800285a:	50a3      	strne	r3, [r4, r2]
 800285c:	e7af      	b.n	80027be <_malloc_r+0x22>
 800285e:	6862      	ldr	r2, [r4, #4]
 8002860:	42a3      	cmp	r3, r4
 8002862:	bf0c      	ite	eq
 8002864:	f8c8 2000 	streq.w	r2, [r8]
 8002868:	605a      	strne	r2, [r3, #4]
 800286a:	e7eb      	b.n	8002844 <_malloc_r+0xa8>
 800286c:	4623      	mov	r3, r4
 800286e:	6864      	ldr	r4, [r4, #4]
 8002870:	e7ae      	b.n	80027d0 <_malloc_r+0x34>
 8002872:	463c      	mov	r4, r7
 8002874:	687f      	ldr	r7, [r7, #4]
 8002876:	e7b6      	b.n	80027e6 <_malloc_r+0x4a>
 8002878:	461a      	mov	r2, r3
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	42a3      	cmp	r3, r4
 800287e:	d1fb      	bne.n	8002878 <_malloc_r+0xdc>
 8002880:	2300      	movs	r3, #0
 8002882:	6053      	str	r3, [r2, #4]
 8002884:	e7de      	b.n	8002844 <_malloc_r+0xa8>
 8002886:	230c      	movs	r3, #12
 8002888:	6033      	str	r3, [r6, #0]
 800288a:	4630      	mov	r0, r6
 800288c:	f000 f80c 	bl	80028a8 <__malloc_unlock>
 8002890:	e794      	b.n	80027bc <_malloc_r+0x20>
 8002892:	6005      	str	r5, [r0, #0]
 8002894:	e7d6      	b.n	8002844 <_malloc_r+0xa8>
 8002896:	bf00      	nop
 8002898:	2000021c 	.word	0x2000021c

0800289c <__malloc_lock>:
 800289c:	4801      	ldr	r0, [pc, #4]	@ (80028a4 <__malloc_lock+0x8>)
 800289e:	f7ff bf0e 	b.w	80026be <__retarget_lock_acquire_recursive>
 80028a2:	bf00      	nop
 80028a4:	20000214 	.word	0x20000214

080028a8 <__malloc_unlock>:
 80028a8:	4801      	ldr	r0, [pc, #4]	@ (80028b0 <__malloc_unlock+0x8>)
 80028aa:	f7ff bf09 	b.w	80026c0 <__retarget_lock_release_recursive>
 80028ae:	bf00      	nop
 80028b0:	20000214 	.word	0x20000214

080028b4 <__sfputc_r>:
 80028b4:	6893      	ldr	r3, [r2, #8]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	b410      	push	{r4}
 80028bc:	6093      	str	r3, [r2, #8]
 80028be:	da08      	bge.n	80028d2 <__sfputc_r+0x1e>
 80028c0:	6994      	ldr	r4, [r2, #24]
 80028c2:	42a3      	cmp	r3, r4
 80028c4:	db01      	blt.n	80028ca <__sfputc_r+0x16>
 80028c6:	290a      	cmp	r1, #10
 80028c8:	d103      	bne.n	80028d2 <__sfputc_r+0x1e>
 80028ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028ce:	f000 bb6d 	b.w	8002fac <__swbuf_r>
 80028d2:	6813      	ldr	r3, [r2, #0]
 80028d4:	1c58      	adds	r0, r3, #1
 80028d6:	6010      	str	r0, [r2, #0]
 80028d8:	7019      	strb	r1, [r3, #0]
 80028da:	4608      	mov	r0, r1
 80028dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <__sfputs_r>:
 80028e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e4:	4606      	mov	r6, r0
 80028e6:	460f      	mov	r7, r1
 80028e8:	4614      	mov	r4, r2
 80028ea:	18d5      	adds	r5, r2, r3
 80028ec:	42ac      	cmp	r4, r5
 80028ee:	d101      	bne.n	80028f4 <__sfputs_r+0x12>
 80028f0:	2000      	movs	r0, #0
 80028f2:	e007      	b.n	8002904 <__sfputs_r+0x22>
 80028f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028f8:	463a      	mov	r2, r7
 80028fa:	4630      	mov	r0, r6
 80028fc:	f7ff ffda 	bl	80028b4 <__sfputc_r>
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d1f3      	bne.n	80028ec <__sfputs_r+0xa>
 8002904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002908 <_vfiprintf_r>:
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290c:	460d      	mov	r5, r1
 800290e:	b09d      	sub	sp, #116	@ 0x74
 8002910:	4614      	mov	r4, r2
 8002912:	4698      	mov	r8, r3
 8002914:	4606      	mov	r6, r0
 8002916:	b118      	cbz	r0, 8002920 <_vfiprintf_r+0x18>
 8002918:	6a03      	ldr	r3, [r0, #32]
 800291a:	b90b      	cbnz	r3, 8002920 <_vfiprintf_r+0x18>
 800291c:	f7ff fdca 	bl	80024b4 <__sinit>
 8002920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002922:	07d9      	lsls	r1, r3, #31
 8002924:	d405      	bmi.n	8002932 <_vfiprintf_r+0x2a>
 8002926:	89ab      	ldrh	r3, [r5, #12]
 8002928:	059a      	lsls	r2, r3, #22
 800292a:	d402      	bmi.n	8002932 <_vfiprintf_r+0x2a>
 800292c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800292e:	f7ff fec6 	bl	80026be <__retarget_lock_acquire_recursive>
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	d501      	bpl.n	800293c <_vfiprintf_r+0x34>
 8002938:	692b      	ldr	r3, [r5, #16]
 800293a:	b99b      	cbnz	r3, 8002964 <_vfiprintf_r+0x5c>
 800293c:	4629      	mov	r1, r5
 800293e:	4630      	mov	r0, r6
 8002940:	f000 fb72 	bl	8003028 <__swsetup_r>
 8002944:	b170      	cbz	r0, 8002964 <_vfiprintf_r+0x5c>
 8002946:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002948:	07dc      	lsls	r4, r3, #31
 800294a:	d504      	bpl.n	8002956 <_vfiprintf_r+0x4e>
 800294c:	f04f 30ff 	mov.w	r0, #4294967295
 8002950:	b01d      	add	sp, #116	@ 0x74
 8002952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002956:	89ab      	ldrh	r3, [r5, #12]
 8002958:	0598      	lsls	r0, r3, #22
 800295a:	d4f7      	bmi.n	800294c <_vfiprintf_r+0x44>
 800295c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800295e:	f7ff feaf 	bl	80026c0 <__retarget_lock_release_recursive>
 8002962:	e7f3      	b.n	800294c <_vfiprintf_r+0x44>
 8002964:	2300      	movs	r3, #0
 8002966:	9309      	str	r3, [sp, #36]	@ 0x24
 8002968:	2320      	movs	r3, #32
 800296a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800296e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002972:	2330      	movs	r3, #48	@ 0x30
 8002974:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002b24 <_vfiprintf_r+0x21c>
 8002978:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800297c:	f04f 0901 	mov.w	r9, #1
 8002980:	4623      	mov	r3, r4
 8002982:	469a      	mov	sl, r3
 8002984:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002988:	b10a      	cbz	r2, 800298e <_vfiprintf_r+0x86>
 800298a:	2a25      	cmp	r2, #37	@ 0x25
 800298c:	d1f9      	bne.n	8002982 <_vfiprintf_r+0x7a>
 800298e:	ebba 0b04 	subs.w	fp, sl, r4
 8002992:	d00b      	beq.n	80029ac <_vfiprintf_r+0xa4>
 8002994:	465b      	mov	r3, fp
 8002996:	4622      	mov	r2, r4
 8002998:	4629      	mov	r1, r5
 800299a:	4630      	mov	r0, r6
 800299c:	f7ff ffa1 	bl	80028e2 <__sfputs_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	f000 80a7 	beq.w	8002af4 <_vfiprintf_r+0x1ec>
 80029a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029a8:	445a      	add	r2, fp
 80029aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80029ac:	f89a 3000 	ldrb.w	r3, [sl]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 809f 	beq.w	8002af4 <_vfiprintf_r+0x1ec>
 80029b6:	2300      	movs	r3, #0
 80029b8:	f04f 32ff 	mov.w	r2, #4294967295
 80029bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029c0:	f10a 0a01 	add.w	sl, sl, #1
 80029c4:	9304      	str	r3, [sp, #16]
 80029c6:	9307      	str	r3, [sp, #28]
 80029c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80029ce:	4654      	mov	r4, sl
 80029d0:	2205      	movs	r2, #5
 80029d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029d6:	4853      	ldr	r0, [pc, #332]	@ (8002b24 <_vfiprintf_r+0x21c>)
 80029d8:	f7fd fbfa 	bl	80001d0 <memchr>
 80029dc:	9a04      	ldr	r2, [sp, #16]
 80029de:	b9d8      	cbnz	r0, 8002a18 <_vfiprintf_r+0x110>
 80029e0:	06d1      	lsls	r1, r2, #27
 80029e2:	bf44      	itt	mi
 80029e4:	2320      	movmi	r3, #32
 80029e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029ea:	0713      	lsls	r3, r2, #28
 80029ec:	bf44      	itt	mi
 80029ee:	232b      	movmi	r3, #43	@ 0x2b
 80029f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80029f4:	f89a 3000 	ldrb.w	r3, [sl]
 80029f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80029fa:	d015      	beq.n	8002a28 <_vfiprintf_r+0x120>
 80029fc:	9a07      	ldr	r2, [sp, #28]
 80029fe:	4654      	mov	r4, sl
 8002a00:	2000      	movs	r0, #0
 8002a02:	f04f 0c0a 	mov.w	ip, #10
 8002a06:	4621      	mov	r1, r4
 8002a08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a0c:	3b30      	subs	r3, #48	@ 0x30
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d94b      	bls.n	8002aaa <_vfiprintf_r+0x1a2>
 8002a12:	b1b0      	cbz	r0, 8002a42 <_vfiprintf_r+0x13a>
 8002a14:	9207      	str	r2, [sp, #28]
 8002a16:	e014      	b.n	8002a42 <_vfiprintf_r+0x13a>
 8002a18:	eba0 0308 	sub.w	r3, r0, r8
 8002a1c:	fa09 f303 	lsl.w	r3, r9, r3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	9304      	str	r3, [sp, #16]
 8002a24:	46a2      	mov	sl, r4
 8002a26:	e7d2      	b.n	80029ce <_vfiprintf_r+0xc6>
 8002a28:	9b03      	ldr	r3, [sp, #12]
 8002a2a:	1d19      	adds	r1, r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	9103      	str	r1, [sp, #12]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bfbb      	ittet	lt
 8002a34:	425b      	neglt	r3, r3
 8002a36:	f042 0202 	orrlt.w	r2, r2, #2
 8002a3a:	9307      	strge	r3, [sp, #28]
 8002a3c:	9307      	strlt	r3, [sp, #28]
 8002a3e:	bfb8      	it	lt
 8002a40:	9204      	strlt	r2, [sp, #16]
 8002a42:	7823      	ldrb	r3, [r4, #0]
 8002a44:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a46:	d10a      	bne.n	8002a5e <_vfiprintf_r+0x156>
 8002a48:	7863      	ldrb	r3, [r4, #1]
 8002a4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a4c:	d132      	bne.n	8002ab4 <_vfiprintf_r+0x1ac>
 8002a4e:	9b03      	ldr	r3, [sp, #12]
 8002a50:	1d1a      	adds	r2, r3, #4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	9203      	str	r2, [sp, #12]
 8002a56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a5a:	3402      	adds	r4, #2
 8002a5c:	9305      	str	r3, [sp, #20]
 8002a5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002b34 <_vfiprintf_r+0x22c>
 8002a62:	7821      	ldrb	r1, [r4, #0]
 8002a64:	2203      	movs	r2, #3
 8002a66:	4650      	mov	r0, sl
 8002a68:	f7fd fbb2 	bl	80001d0 <memchr>
 8002a6c:	b138      	cbz	r0, 8002a7e <_vfiprintf_r+0x176>
 8002a6e:	9b04      	ldr	r3, [sp, #16]
 8002a70:	eba0 000a 	sub.w	r0, r0, sl
 8002a74:	2240      	movs	r2, #64	@ 0x40
 8002a76:	4082      	lsls	r2, r0
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	9304      	str	r3, [sp, #16]
 8002a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a82:	4829      	ldr	r0, [pc, #164]	@ (8002b28 <_vfiprintf_r+0x220>)
 8002a84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a88:	2206      	movs	r2, #6
 8002a8a:	f7fd fba1 	bl	80001d0 <memchr>
 8002a8e:	2800      	cmp	r0, #0
 8002a90:	d03f      	beq.n	8002b12 <_vfiprintf_r+0x20a>
 8002a92:	4b26      	ldr	r3, [pc, #152]	@ (8002b2c <_vfiprintf_r+0x224>)
 8002a94:	bb1b      	cbnz	r3, 8002ade <_vfiprintf_r+0x1d6>
 8002a96:	9b03      	ldr	r3, [sp, #12]
 8002a98:	3307      	adds	r3, #7
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	9303      	str	r3, [sp, #12]
 8002aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002aa4:	443b      	add	r3, r7
 8002aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8002aa8:	e76a      	b.n	8002980 <_vfiprintf_r+0x78>
 8002aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8002aae:	460c      	mov	r4, r1
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	e7a8      	b.n	8002a06 <_vfiprintf_r+0xfe>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	3401      	adds	r4, #1
 8002ab8:	9305      	str	r3, [sp, #20]
 8002aba:	4619      	mov	r1, r3
 8002abc:	f04f 0c0a 	mov.w	ip, #10
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ac6:	3a30      	subs	r2, #48	@ 0x30
 8002ac8:	2a09      	cmp	r2, #9
 8002aca:	d903      	bls.n	8002ad4 <_vfiprintf_r+0x1cc>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0c6      	beq.n	8002a5e <_vfiprintf_r+0x156>
 8002ad0:	9105      	str	r1, [sp, #20]
 8002ad2:	e7c4      	b.n	8002a5e <_vfiprintf_r+0x156>
 8002ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ad8:	4604      	mov	r4, r0
 8002ada:	2301      	movs	r3, #1
 8002adc:	e7f0      	b.n	8002ac0 <_vfiprintf_r+0x1b8>
 8002ade:	ab03      	add	r3, sp, #12
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	462a      	mov	r2, r5
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <_vfiprintf_r+0x228>)
 8002ae6:	a904      	add	r1, sp, #16
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f3af 8000 	nop.w
 8002aee:	4607      	mov	r7, r0
 8002af0:	1c78      	adds	r0, r7, #1
 8002af2:	d1d6      	bne.n	8002aa2 <_vfiprintf_r+0x19a>
 8002af4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002af6:	07d9      	lsls	r1, r3, #31
 8002af8:	d405      	bmi.n	8002b06 <_vfiprintf_r+0x1fe>
 8002afa:	89ab      	ldrh	r3, [r5, #12]
 8002afc:	059a      	lsls	r2, r3, #22
 8002afe:	d402      	bmi.n	8002b06 <_vfiprintf_r+0x1fe>
 8002b00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b02:	f7ff fddd 	bl	80026c0 <__retarget_lock_release_recursive>
 8002b06:	89ab      	ldrh	r3, [r5, #12]
 8002b08:	065b      	lsls	r3, r3, #25
 8002b0a:	f53f af1f 	bmi.w	800294c <_vfiprintf_r+0x44>
 8002b0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b10:	e71e      	b.n	8002950 <_vfiprintf_r+0x48>
 8002b12:	ab03      	add	r3, sp, #12
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	462a      	mov	r2, r5
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <_vfiprintf_r+0x228>)
 8002b1a:	a904      	add	r1, sp, #16
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f000 f879 	bl	8002c14 <_printf_i>
 8002b22:	e7e4      	b.n	8002aee <_vfiprintf_r+0x1e6>
 8002b24:	080032df 	.word	0x080032df
 8002b28:	080032e9 	.word	0x080032e9
 8002b2c:	00000000 	.word	0x00000000
 8002b30:	080028e3 	.word	0x080028e3
 8002b34:	080032e5 	.word	0x080032e5

08002b38 <_printf_common>:
 8002b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b3c:	4616      	mov	r6, r2
 8002b3e:	4698      	mov	r8, r3
 8002b40:	688a      	ldr	r2, [r1, #8]
 8002b42:	690b      	ldr	r3, [r1, #16]
 8002b44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bfb8      	it	lt
 8002b4c:	4613      	movlt	r3, r2
 8002b4e:	6033      	str	r3, [r6, #0]
 8002b50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b54:	4607      	mov	r7, r0
 8002b56:	460c      	mov	r4, r1
 8002b58:	b10a      	cbz	r2, 8002b5e <_printf_common+0x26>
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	6033      	str	r3, [r6, #0]
 8002b5e:	6823      	ldr	r3, [r4, #0]
 8002b60:	0699      	lsls	r1, r3, #26
 8002b62:	bf42      	ittt	mi
 8002b64:	6833      	ldrmi	r3, [r6, #0]
 8002b66:	3302      	addmi	r3, #2
 8002b68:	6033      	strmi	r3, [r6, #0]
 8002b6a:	6825      	ldr	r5, [r4, #0]
 8002b6c:	f015 0506 	ands.w	r5, r5, #6
 8002b70:	d106      	bne.n	8002b80 <_printf_common+0x48>
 8002b72:	f104 0a19 	add.w	sl, r4, #25
 8002b76:	68e3      	ldr	r3, [r4, #12]
 8002b78:	6832      	ldr	r2, [r6, #0]
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	dc26      	bgt.n	8002bce <_printf_common+0x96>
 8002b80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b84:	6822      	ldr	r2, [r4, #0]
 8002b86:	3b00      	subs	r3, #0
 8002b88:	bf18      	it	ne
 8002b8a:	2301      	movne	r3, #1
 8002b8c:	0692      	lsls	r2, r2, #26
 8002b8e:	d42b      	bmi.n	8002be8 <_printf_common+0xb0>
 8002b90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b94:	4641      	mov	r1, r8
 8002b96:	4638      	mov	r0, r7
 8002b98:	47c8      	blx	r9
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d01e      	beq.n	8002bdc <_printf_common+0xa4>
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	6922      	ldr	r2, [r4, #16]
 8002ba2:	f003 0306 	and.w	r3, r3, #6
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf02      	ittt	eq
 8002baa:	68e5      	ldreq	r5, [r4, #12]
 8002bac:	6833      	ldreq	r3, [r6, #0]
 8002bae:	1aed      	subeq	r5, r5, r3
 8002bb0:	68a3      	ldr	r3, [r4, #8]
 8002bb2:	bf0c      	ite	eq
 8002bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bb8:	2500      	movne	r5, #0
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	bfc4      	itt	gt
 8002bbe:	1a9b      	subgt	r3, r3, r2
 8002bc0:	18ed      	addgt	r5, r5, r3
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	341a      	adds	r4, #26
 8002bc6:	42b5      	cmp	r5, r6
 8002bc8:	d11a      	bne.n	8002c00 <_printf_common+0xc8>
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e008      	b.n	8002be0 <_printf_common+0xa8>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	4652      	mov	r2, sl
 8002bd2:	4641      	mov	r1, r8
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	47c8      	blx	r9
 8002bd8:	3001      	adds	r0, #1
 8002bda:	d103      	bne.n	8002be4 <_printf_common+0xac>
 8002bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be4:	3501      	adds	r5, #1
 8002be6:	e7c6      	b.n	8002b76 <_printf_common+0x3e>
 8002be8:	18e1      	adds	r1, r4, r3
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	2030      	movs	r0, #48	@ 0x30
 8002bee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002bf2:	4422      	add	r2, r4
 8002bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002bf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	e7c7      	b.n	8002b90 <_printf_common+0x58>
 8002c00:	2301      	movs	r3, #1
 8002c02:	4622      	mov	r2, r4
 8002c04:	4641      	mov	r1, r8
 8002c06:	4638      	mov	r0, r7
 8002c08:	47c8      	blx	r9
 8002c0a:	3001      	adds	r0, #1
 8002c0c:	d0e6      	beq.n	8002bdc <_printf_common+0xa4>
 8002c0e:	3601      	adds	r6, #1
 8002c10:	e7d9      	b.n	8002bc6 <_printf_common+0x8e>
	...

08002c14 <_printf_i>:
 8002c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c18:	7e0f      	ldrb	r7, [r1, #24]
 8002c1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c1c:	2f78      	cmp	r7, #120	@ 0x78
 8002c1e:	4691      	mov	r9, r2
 8002c20:	4680      	mov	r8, r0
 8002c22:	460c      	mov	r4, r1
 8002c24:	469a      	mov	sl, r3
 8002c26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c2a:	d807      	bhi.n	8002c3c <_printf_i+0x28>
 8002c2c:	2f62      	cmp	r7, #98	@ 0x62
 8002c2e:	d80a      	bhi.n	8002c46 <_printf_i+0x32>
 8002c30:	2f00      	cmp	r7, #0
 8002c32:	f000 80d2 	beq.w	8002dda <_printf_i+0x1c6>
 8002c36:	2f58      	cmp	r7, #88	@ 0x58
 8002c38:	f000 80b9 	beq.w	8002dae <_printf_i+0x19a>
 8002c3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c44:	e03a      	b.n	8002cbc <_printf_i+0xa8>
 8002c46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c4a:	2b15      	cmp	r3, #21
 8002c4c:	d8f6      	bhi.n	8002c3c <_printf_i+0x28>
 8002c4e:	a101      	add	r1, pc, #4	@ (adr r1, 8002c54 <_printf_i+0x40>)
 8002c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c54:	08002cad 	.word	0x08002cad
 8002c58:	08002cc1 	.word	0x08002cc1
 8002c5c:	08002c3d 	.word	0x08002c3d
 8002c60:	08002c3d 	.word	0x08002c3d
 8002c64:	08002c3d 	.word	0x08002c3d
 8002c68:	08002c3d 	.word	0x08002c3d
 8002c6c:	08002cc1 	.word	0x08002cc1
 8002c70:	08002c3d 	.word	0x08002c3d
 8002c74:	08002c3d 	.word	0x08002c3d
 8002c78:	08002c3d 	.word	0x08002c3d
 8002c7c:	08002c3d 	.word	0x08002c3d
 8002c80:	08002dc1 	.word	0x08002dc1
 8002c84:	08002ceb 	.word	0x08002ceb
 8002c88:	08002d7b 	.word	0x08002d7b
 8002c8c:	08002c3d 	.word	0x08002c3d
 8002c90:	08002c3d 	.word	0x08002c3d
 8002c94:	08002de3 	.word	0x08002de3
 8002c98:	08002c3d 	.word	0x08002c3d
 8002c9c:	08002ceb 	.word	0x08002ceb
 8002ca0:	08002c3d 	.word	0x08002c3d
 8002ca4:	08002c3d 	.word	0x08002c3d
 8002ca8:	08002d83 	.word	0x08002d83
 8002cac:	6833      	ldr	r3, [r6, #0]
 8002cae:	1d1a      	adds	r2, r3, #4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6032      	str	r2, [r6, #0]
 8002cb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e09d      	b.n	8002dfc <_printf_i+0x1e8>
 8002cc0:	6833      	ldr	r3, [r6, #0]
 8002cc2:	6820      	ldr	r0, [r4, #0]
 8002cc4:	1d19      	adds	r1, r3, #4
 8002cc6:	6031      	str	r1, [r6, #0]
 8002cc8:	0606      	lsls	r6, r0, #24
 8002cca:	d501      	bpl.n	8002cd0 <_printf_i+0xbc>
 8002ccc:	681d      	ldr	r5, [r3, #0]
 8002cce:	e003      	b.n	8002cd8 <_printf_i+0xc4>
 8002cd0:	0645      	lsls	r5, r0, #25
 8002cd2:	d5fb      	bpl.n	8002ccc <_printf_i+0xb8>
 8002cd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	da03      	bge.n	8002ce4 <_printf_i+0xd0>
 8002cdc:	232d      	movs	r3, #45	@ 0x2d
 8002cde:	426d      	negs	r5, r5
 8002ce0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ce4:	4859      	ldr	r0, [pc, #356]	@ (8002e4c <_printf_i+0x238>)
 8002ce6:	230a      	movs	r3, #10
 8002ce8:	e011      	b.n	8002d0e <_printf_i+0xfa>
 8002cea:	6821      	ldr	r1, [r4, #0]
 8002cec:	6833      	ldr	r3, [r6, #0]
 8002cee:	0608      	lsls	r0, r1, #24
 8002cf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002cf4:	d402      	bmi.n	8002cfc <_printf_i+0xe8>
 8002cf6:	0649      	lsls	r1, r1, #25
 8002cf8:	bf48      	it	mi
 8002cfa:	b2ad      	uxthmi	r5, r5
 8002cfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002cfe:	4853      	ldr	r0, [pc, #332]	@ (8002e4c <_printf_i+0x238>)
 8002d00:	6033      	str	r3, [r6, #0]
 8002d02:	bf14      	ite	ne
 8002d04:	230a      	movne	r3, #10
 8002d06:	2308      	moveq	r3, #8
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d0e:	6866      	ldr	r6, [r4, #4]
 8002d10:	60a6      	str	r6, [r4, #8]
 8002d12:	2e00      	cmp	r6, #0
 8002d14:	bfa2      	ittt	ge
 8002d16:	6821      	ldrge	r1, [r4, #0]
 8002d18:	f021 0104 	bicge.w	r1, r1, #4
 8002d1c:	6021      	strge	r1, [r4, #0]
 8002d1e:	b90d      	cbnz	r5, 8002d24 <_printf_i+0x110>
 8002d20:	2e00      	cmp	r6, #0
 8002d22:	d04b      	beq.n	8002dbc <_printf_i+0x1a8>
 8002d24:	4616      	mov	r6, r2
 8002d26:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d2a:	fb03 5711 	mls	r7, r3, r1, r5
 8002d2e:	5dc7      	ldrb	r7, [r0, r7]
 8002d30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d34:	462f      	mov	r7, r5
 8002d36:	42bb      	cmp	r3, r7
 8002d38:	460d      	mov	r5, r1
 8002d3a:	d9f4      	bls.n	8002d26 <_printf_i+0x112>
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d10b      	bne.n	8002d58 <_printf_i+0x144>
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	07df      	lsls	r7, r3, #31
 8002d44:	d508      	bpl.n	8002d58 <_printf_i+0x144>
 8002d46:	6923      	ldr	r3, [r4, #16]
 8002d48:	6861      	ldr	r1, [r4, #4]
 8002d4a:	4299      	cmp	r1, r3
 8002d4c:	bfde      	ittt	le
 8002d4e:	2330      	movle	r3, #48	@ 0x30
 8002d50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d58:	1b92      	subs	r2, r2, r6
 8002d5a:	6122      	str	r2, [r4, #16]
 8002d5c:	f8cd a000 	str.w	sl, [sp]
 8002d60:	464b      	mov	r3, r9
 8002d62:	aa03      	add	r2, sp, #12
 8002d64:	4621      	mov	r1, r4
 8002d66:	4640      	mov	r0, r8
 8002d68:	f7ff fee6 	bl	8002b38 <_printf_common>
 8002d6c:	3001      	adds	r0, #1
 8002d6e:	d14a      	bne.n	8002e06 <_printf_i+0x1f2>
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	b004      	add	sp, #16
 8002d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f043 0320 	orr.w	r3, r3, #32
 8002d80:	6023      	str	r3, [r4, #0]
 8002d82:	4833      	ldr	r0, [pc, #204]	@ (8002e50 <_printf_i+0x23c>)
 8002d84:	2778      	movs	r7, #120	@ 0x78
 8002d86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	6831      	ldr	r1, [r6, #0]
 8002d8e:	061f      	lsls	r7, r3, #24
 8002d90:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d94:	d402      	bmi.n	8002d9c <_printf_i+0x188>
 8002d96:	065f      	lsls	r7, r3, #25
 8002d98:	bf48      	it	mi
 8002d9a:	b2ad      	uxthmi	r5, r5
 8002d9c:	6031      	str	r1, [r6, #0]
 8002d9e:	07d9      	lsls	r1, r3, #31
 8002da0:	bf44      	itt	mi
 8002da2:	f043 0320 	orrmi.w	r3, r3, #32
 8002da6:	6023      	strmi	r3, [r4, #0]
 8002da8:	b11d      	cbz	r5, 8002db2 <_printf_i+0x19e>
 8002daa:	2310      	movs	r3, #16
 8002dac:	e7ac      	b.n	8002d08 <_printf_i+0xf4>
 8002dae:	4827      	ldr	r0, [pc, #156]	@ (8002e4c <_printf_i+0x238>)
 8002db0:	e7e9      	b.n	8002d86 <_printf_i+0x172>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	f023 0320 	bic.w	r3, r3, #32
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	e7f6      	b.n	8002daa <_printf_i+0x196>
 8002dbc:	4616      	mov	r6, r2
 8002dbe:	e7bd      	b.n	8002d3c <_printf_i+0x128>
 8002dc0:	6833      	ldr	r3, [r6, #0]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	6961      	ldr	r1, [r4, #20]
 8002dc6:	1d18      	adds	r0, r3, #4
 8002dc8:	6030      	str	r0, [r6, #0]
 8002dca:	062e      	lsls	r6, r5, #24
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	d501      	bpl.n	8002dd4 <_printf_i+0x1c0>
 8002dd0:	6019      	str	r1, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <_printf_i+0x1c6>
 8002dd4:	0668      	lsls	r0, r5, #25
 8002dd6:	d5fb      	bpl.n	8002dd0 <_printf_i+0x1bc>
 8002dd8:	8019      	strh	r1, [r3, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	4616      	mov	r6, r2
 8002de0:	e7bc      	b.n	8002d5c <_printf_i+0x148>
 8002de2:	6833      	ldr	r3, [r6, #0]
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	6032      	str	r2, [r6, #0]
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	6862      	ldr	r2, [r4, #4]
 8002dec:	2100      	movs	r1, #0
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7fd f9ee 	bl	80001d0 <memchr>
 8002df4:	b108      	cbz	r0, 8002dfa <_printf_i+0x1e6>
 8002df6:	1b80      	subs	r0, r0, r6
 8002df8:	6060      	str	r0, [r4, #4]
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	6123      	str	r3, [r4, #16]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e04:	e7aa      	b.n	8002d5c <_printf_i+0x148>
 8002e06:	6923      	ldr	r3, [r4, #16]
 8002e08:	4632      	mov	r2, r6
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	47d0      	blx	sl
 8002e10:	3001      	adds	r0, #1
 8002e12:	d0ad      	beq.n	8002d70 <_printf_i+0x15c>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	079b      	lsls	r3, r3, #30
 8002e18:	d413      	bmi.n	8002e42 <_printf_i+0x22e>
 8002e1a:	68e0      	ldr	r0, [r4, #12]
 8002e1c:	9b03      	ldr	r3, [sp, #12]
 8002e1e:	4298      	cmp	r0, r3
 8002e20:	bfb8      	it	lt
 8002e22:	4618      	movlt	r0, r3
 8002e24:	e7a6      	b.n	8002d74 <_printf_i+0x160>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4632      	mov	r2, r6
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	47d0      	blx	sl
 8002e30:	3001      	adds	r0, #1
 8002e32:	d09d      	beq.n	8002d70 <_printf_i+0x15c>
 8002e34:	3501      	adds	r5, #1
 8002e36:	68e3      	ldr	r3, [r4, #12]
 8002e38:	9903      	ldr	r1, [sp, #12]
 8002e3a:	1a5b      	subs	r3, r3, r1
 8002e3c:	42ab      	cmp	r3, r5
 8002e3e:	dcf2      	bgt.n	8002e26 <_printf_i+0x212>
 8002e40:	e7eb      	b.n	8002e1a <_printf_i+0x206>
 8002e42:	2500      	movs	r5, #0
 8002e44:	f104 0619 	add.w	r6, r4, #25
 8002e48:	e7f5      	b.n	8002e36 <_printf_i+0x222>
 8002e4a:	bf00      	nop
 8002e4c:	080032f0 	.word	0x080032f0
 8002e50:	08003301 	.word	0x08003301

08002e54 <__sflush_r>:
 8002e54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e5c:	0716      	lsls	r6, r2, #28
 8002e5e:	4605      	mov	r5, r0
 8002e60:	460c      	mov	r4, r1
 8002e62:	d454      	bmi.n	8002f0e <__sflush_r+0xba>
 8002e64:	684b      	ldr	r3, [r1, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dc02      	bgt.n	8002e70 <__sflush_r+0x1c>
 8002e6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	dd48      	ble.n	8002f02 <__sflush_r+0xae>
 8002e70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e72:	2e00      	cmp	r6, #0
 8002e74:	d045      	beq.n	8002f02 <__sflush_r+0xae>
 8002e76:	2300      	movs	r3, #0
 8002e78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e7c:	682f      	ldr	r7, [r5, #0]
 8002e7e:	6a21      	ldr	r1, [r4, #32]
 8002e80:	602b      	str	r3, [r5, #0]
 8002e82:	d030      	beq.n	8002ee6 <__sflush_r+0x92>
 8002e84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	0759      	lsls	r1, r3, #29
 8002e8a:	d505      	bpl.n	8002e98 <__sflush_r+0x44>
 8002e8c:	6863      	ldr	r3, [r4, #4]
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e92:	b10b      	cbz	r3, 8002e98 <__sflush_r+0x44>
 8002e94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e96:	1ad2      	subs	r2, r2, r3
 8002e98:	2300      	movs	r3, #0
 8002e9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e9c:	6a21      	ldr	r1, [r4, #32]
 8002e9e:	4628      	mov	r0, r5
 8002ea0:	47b0      	blx	r6
 8002ea2:	1c43      	adds	r3, r0, #1
 8002ea4:	89a3      	ldrh	r3, [r4, #12]
 8002ea6:	d106      	bne.n	8002eb6 <__sflush_r+0x62>
 8002ea8:	6829      	ldr	r1, [r5, #0]
 8002eaa:	291d      	cmp	r1, #29
 8002eac:	d82b      	bhi.n	8002f06 <__sflush_r+0xb2>
 8002eae:	4a2a      	ldr	r2, [pc, #168]	@ (8002f58 <__sflush_r+0x104>)
 8002eb0:	410a      	asrs	r2, r1
 8002eb2:	07d6      	lsls	r6, r2, #31
 8002eb4:	d427      	bmi.n	8002f06 <__sflush_r+0xb2>
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	6062      	str	r2, [r4, #4]
 8002eba:	04d9      	lsls	r1, r3, #19
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	6022      	str	r2, [r4, #0]
 8002ec0:	d504      	bpl.n	8002ecc <__sflush_r+0x78>
 8002ec2:	1c42      	adds	r2, r0, #1
 8002ec4:	d101      	bne.n	8002eca <__sflush_r+0x76>
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	b903      	cbnz	r3, 8002ecc <__sflush_r+0x78>
 8002eca:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ece:	602f      	str	r7, [r5, #0]
 8002ed0:	b1b9      	cbz	r1, 8002f02 <__sflush_r+0xae>
 8002ed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ed6:	4299      	cmp	r1, r3
 8002ed8:	d002      	beq.n	8002ee0 <__sflush_r+0x8c>
 8002eda:	4628      	mov	r0, r5
 8002edc:	f7ff fbf2 	bl	80026c4 <_free_r>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ee4:	e00d      	b.n	8002f02 <__sflush_r+0xae>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b0      	blx	r6
 8002eec:	4602      	mov	r2, r0
 8002eee:	1c50      	adds	r0, r2, #1
 8002ef0:	d1c9      	bne.n	8002e86 <__sflush_r+0x32>
 8002ef2:	682b      	ldr	r3, [r5, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0c6      	beq.n	8002e86 <__sflush_r+0x32>
 8002ef8:	2b1d      	cmp	r3, #29
 8002efa:	d001      	beq.n	8002f00 <__sflush_r+0xac>
 8002efc:	2b16      	cmp	r3, #22
 8002efe:	d11e      	bne.n	8002f3e <__sflush_r+0xea>
 8002f00:	602f      	str	r7, [r5, #0]
 8002f02:	2000      	movs	r0, #0
 8002f04:	e022      	b.n	8002f4c <__sflush_r+0xf8>
 8002f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0a:	b21b      	sxth	r3, r3
 8002f0c:	e01b      	b.n	8002f46 <__sflush_r+0xf2>
 8002f0e:	690f      	ldr	r7, [r1, #16]
 8002f10:	2f00      	cmp	r7, #0
 8002f12:	d0f6      	beq.n	8002f02 <__sflush_r+0xae>
 8002f14:	0793      	lsls	r3, r2, #30
 8002f16:	680e      	ldr	r6, [r1, #0]
 8002f18:	bf08      	it	eq
 8002f1a:	694b      	ldreq	r3, [r1, #20]
 8002f1c:	600f      	str	r7, [r1, #0]
 8002f1e:	bf18      	it	ne
 8002f20:	2300      	movne	r3, #0
 8002f22:	eba6 0807 	sub.w	r8, r6, r7
 8002f26:	608b      	str	r3, [r1, #8]
 8002f28:	f1b8 0f00 	cmp.w	r8, #0
 8002f2c:	dde9      	ble.n	8002f02 <__sflush_r+0xae>
 8002f2e:	6a21      	ldr	r1, [r4, #32]
 8002f30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002f32:	4643      	mov	r3, r8
 8002f34:	463a      	mov	r2, r7
 8002f36:	4628      	mov	r0, r5
 8002f38:	47b0      	blx	r6
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	dc08      	bgt.n	8002f50 <__sflush_r+0xfc>
 8002f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f50:	4407      	add	r7, r0
 8002f52:	eba8 0800 	sub.w	r8, r8, r0
 8002f56:	e7e7      	b.n	8002f28 <__sflush_r+0xd4>
 8002f58:	dfbffffe 	.word	0xdfbffffe

08002f5c <_fflush_r>:
 8002f5c:	b538      	push	{r3, r4, r5, lr}
 8002f5e:	690b      	ldr	r3, [r1, #16]
 8002f60:	4605      	mov	r5, r0
 8002f62:	460c      	mov	r4, r1
 8002f64:	b913      	cbnz	r3, 8002f6c <_fflush_r+0x10>
 8002f66:	2500      	movs	r5, #0
 8002f68:	4628      	mov	r0, r5
 8002f6a:	bd38      	pop	{r3, r4, r5, pc}
 8002f6c:	b118      	cbz	r0, 8002f76 <_fflush_r+0x1a>
 8002f6e:	6a03      	ldr	r3, [r0, #32]
 8002f70:	b90b      	cbnz	r3, 8002f76 <_fflush_r+0x1a>
 8002f72:	f7ff fa9f 	bl	80024b4 <__sinit>
 8002f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f3      	beq.n	8002f66 <_fflush_r+0xa>
 8002f7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f80:	07d0      	lsls	r0, r2, #31
 8002f82:	d404      	bmi.n	8002f8e <_fflush_r+0x32>
 8002f84:	0599      	lsls	r1, r3, #22
 8002f86:	d402      	bmi.n	8002f8e <_fflush_r+0x32>
 8002f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f8a:	f7ff fb98 	bl	80026be <__retarget_lock_acquire_recursive>
 8002f8e:	4628      	mov	r0, r5
 8002f90:	4621      	mov	r1, r4
 8002f92:	f7ff ff5f 	bl	8002e54 <__sflush_r>
 8002f96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f98:	07da      	lsls	r2, r3, #31
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	d4e4      	bmi.n	8002f68 <_fflush_r+0xc>
 8002f9e:	89a3      	ldrh	r3, [r4, #12]
 8002fa0:	059b      	lsls	r3, r3, #22
 8002fa2:	d4e1      	bmi.n	8002f68 <_fflush_r+0xc>
 8002fa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fa6:	f7ff fb8b 	bl	80026c0 <__retarget_lock_release_recursive>
 8002faa:	e7dd      	b.n	8002f68 <_fflush_r+0xc>

08002fac <__swbuf_r>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	460e      	mov	r6, r1
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	4605      	mov	r5, r0
 8002fb4:	b118      	cbz	r0, 8002fbe <__swbuf_r+0x12>
 8002fb6:	6a03      	ldr	r3, [r0, #32]
 8002fb8:	b90b      	cbnz	r3, 8002fbe <__swbuf_r+0x12>
 8002fba:	f7ff fa7b 	bl	80024b4 <__sinit>
 8002fbe:	69a3      	ldr	r3, [r4, #24]
 8002fc0:	60a3      	str	r3, [r4, #8]
 8002fc2:	89a3      	ldrh	r3, [r4, #12]
 8002fc4:	071a      	lsls	r2, r3, #28
 8002fc6:	d501      	bpl.n	8002fcc <__swbuf_r+0x20>
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	b943      	cbnz	r3, 8002fde <__swbuf_r+0x32>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f82a 	bl	8003028 <__swsetup_r>
 8002fd4:	b118      	cbz	r0, 8002fde <__swbuf_r+0x32>
 8002fd6:	f04f 37ff 	mov.w	r7, #4294967295
 8002fda:	4638      	mov	r0, r7
 8002fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	6922      	ldr	r2, [r4, #16]
 8002fe2:	1a98      	subs	r0, r3, r2
 8002fe4:	6963      	ldr	r3, [r4, #20]
 8002fe6:	b2f6      	uxtb	r6, r6
 8002fe8:	4283      	cmp	r3, r0
 8002fea:	4637      	mov	r7, r6
 8002fec:	dc05      	bgt.n	8002ffa <__swbuf_r+0x4e>
 8002fee:	4621      	mov	r1, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	f7ff ffb3 	bl	8002f5c <_fflush_r>
 8002ff6:	2800      	cmp	r0, #0
 8002ff8:	d1ed      	bne.n	8002fd6 <__swbuf_r+0x2a>
 8002ffa:	68a3      	ldr	r3, [r4, #8]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	60a3      	str	r3, [r4, #8]
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	6022      	str	r2, [r4, #0]
 8003006:	701e      	strb	r6, [r3, #0]
 8003008:	6962      	ldr	r2, [r4, #20]
 800300a:	1c43      	adds	r3, r0, #1
 800300c:	429a      	cmp	r2, r3
 800300e:	d004      	beq.n	800301a <__swbuf_r+0x6e>
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	07db      	lsls	r3, r3, #31
 8003014:	d5e1      	bpl.n	8002fda <__swbuf_r+0x2e>
 8003016:	2e0a      	cmp	r6, #10
 8003018:	d1df      	bne.n	8002fda <__swbuf_r+0x2e>
 800301a:	4621      	mov	r1, r4
 800301c:	4628      	mov	r0, r5
 800301e:	f7ff ff9d 	bl	8002f5c <_fflush_r>
 8003022:	2800      	cmp	r0, #0
 8003024:	d0d9      	beq.n	8002fda <__swbuf_r+0x2e>
 8003026:	e7d6      	b.n	8002fd6 <__swbuf_r+0x2a>

08003028 <__swsetup_r>:
 8003028:	b538      	push	{r3, r4, r5, lr}
 800302a:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <__swsetup_r+0xa8>)
 800302c:	4605      	mov	r5, r0
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	460c      	mov	r4, r1
 8003032:	b118      	cbz	r0, 800303c <__swsetup_r+0x14>
 8003034:	6a03      	ldr	r3, [r0, #32]
 8003036:	b90b      	cbnz	r3, 800303c <__swsetup_r+0x14>
 8003038:	f7ff fa3c 	bl	80024b4 <__sinit>
 800303c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003040:	0719      	lsls	r1, r3, #28
 8003042:	d422      	bmi.n	800308a <__swsetup_r+0x62>
 8003044:	06da      	lsls	r2, r3, #27
 8003046:	d407      	bmi.n	8003058 <__swsetup_r+0x30>
 8003048:	2209      	movs	r2, #9
 800304a:	602a      	str	r2, [r5, #0]
 800304c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003050:	81a3      	strh	r3, [r4, #12]
 8003052:	f04f 30ff 	mov.w	r0, #4294967295
 8003056:	e033      	b.n	80030c0 <__swsetup_r+0x98>
 8003058:	0758      	lsls	r0, r3, #29
 800305a:	d512      	bpl.n	8003082 <__swsetup_r+0x5a>
 800305c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800305e:	b141      	cbz	r1, 8003072 <__swsetup_r+0x4a>
 8003060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003064:	4299      	cmp	r1, r3
 8003066:	d002      	beq.n	800306e <__swsetup_r+0x46>
 8003068:	4628      	mov	r0, r5
 800306a:	f7ff fb2b 	bl	80026c4 <_free_r>
 800306e:	2300      	movs	r3, #0
 8003070:	6363      	str	r3, [r4, #52]	@ 0x34
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003078:	81a3      	strh	r3, [r4, #12]
 800307a:	2300      	movs	r3, #0
 800307c:	6063      	str	r3, [r4, #4]
 800307e:	6923      	ldr	r3, [r4, #16]
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	81a3      	strh	r3, [r4, #12]
 800308a:	6923      	ldr	r3, [r4, #16]
 800308c:	b94b      	cbnz	r3, 80030a2 <__swsetup_r+0x7a>
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003098:	d003      	beq.n	80030a2 <__swsetup_r+0x7a>
 800309a:	4621      	mov	r1, r4
 800309c:	4628      	mov	r0, r5
 800309e:	f000 f84f 	bl	8003140 <__smakebuf_r>
 80030a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030a6:	f013 0201 	ands.w	r2, r3, #1
 80030aa:	d00a      	beq.n	80030c2 <__swsetup_r+0x9a>
 80030ac:	2200      	movs	r2, #0
 80030ae:	60a2      	str	r2, [r4, #8]
 80030b0:	6962      	ldr	r2, [r4, #20]
 80030b2:	4252      	negs	r2, r2
 80030b4:	61a2      	str	r2, [r4, #24]
 80030b6:	6922      	ldr	r2, [r4, #16]
 80030b8:	b942      	cbnz	r2, 80030cc <__swsetup_r+0xa4>
 80030ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030be:	d1c5      	bne.n	800304c <__swsetup_r+0x24>
 80030c0:	bd38      	pop	{r3, r4, r5, pc}
 80030c2:	0799      	lsls	r1, r3, #30
 80030c4:	bf58      	it	pl
 80030c6:	6962      	ldrpl	r2, [r4, #20]
 80030c8:	60a2      	str	r2, [r4, #8]
 80030ca:	e7f4      	b.n	80030b6 <__swsetup_r+0x8e>
 80030cc:	2000      	movs	r0, #0
 80030ce:	e7f7      	b.n	80030c0 <__swsetup_r+0x98>
 80030d0:	20000024 	.word	0x20000024

080030d4 <_sbrk_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4d06      	ldr	r5, [pc, #24]	@ (80030f0 <_sbrk_r+0x1c>)
 80030d8:	2300      	movs	r3, #0
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	f7ff f8fc 	bl	80022dc <_sbrk>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_sbrk_r+0x1a>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_sbrk_r+0x1a>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000210 	.word	0x20000210

080030f4 <__swhatbuf_r>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	460c      	mov	r4, r1
 80030f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030fc:	2900      	cmp	r1, #0
 80030fe:	b096      	sub	sp, #88	@ 0x58
 8003100:	4615      	mov	r5, r2
 8003102:	461e      	mov	r6, r3
 8003104:	da0d      	bge.n	8003122 <__swhatbuf_r+0x2e>
 8003106:	89a3      	ldrh	r3, [r4, #12]
 8003108:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800310c:	f04f 0100 	mov.w	r1, #0
 8003110:	bf14      	ite	ne
 8003112:	2340      	movne	r3, #64	@ 0x40
 8003114:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003118:	2000      	movs	r0, #0
 800311a:	6031      	str	r1, [r6, #0]
 800311c:	602b      	str	r3, [r5, #0]
 800311e:	b016      	add	sp, #88	@ 0x58
 8003120:	bd70      	pop	{r4, r5, r6, pc}
 8003122:	466a      	mov	r2, sp
 8003124:	f000 f848 	bl	80031b8 <_fstat_r>
 8003128:	2800      	cmp	r0, #0
 800312a:	dbec      	blt.n	8003106 <__swhatbuf_r+0x12>
 800312c:	9901      	ldr	r1, [sp, #4]
 800312e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003132:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003136:	4259      	negs	r1, r3
 8003138:	4159      	adcs	r1, r3
 800313a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800313e:	e7eb      	b.n	8003118 <__swhatbuf_r+0x24>

08003140 <__smakebuf_r>:
 8003140:	898b      	ldrh	r3, [r1, #12]
 8003142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003144:	079d      	lsls	r5, r3, #30
 8003146:	4606      	mov	r6, r0
 8003148:	460c      	mov	r4, r1
 800314a:	d507      	bpl.n	800315c <__smakebuf_r+0x1c>
 800314c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	6123      	str	r3, [r4, #16]
 8003154:	2301      	movs	r3, #1
 8003156:	6163      	str	r3, [r4, #20]
 8003158:	b003      	add	sp, #12
 800315a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800315c:	ab01      	add	r3, sp, #4
 800315e:	466a      	mov	r2, sp
 8003160:	f7ff ffc8 	bl	80030f4 <__swhatbuf_r>
 8003164:	9f00      	ldr	r7, [sp, #0]
 8003166:	4605      	mov	r5, r0
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	f7ff fb16 	bl	800279c <_malloc_r>
 8003170:	b948      	cbnz	r0, 8003186 <__smakebuf_r+0x46>
 8003172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003176:	059a      	lsls	r2, r3, #22
 8003178:	d4ee      	bmi.n	8003158 <__smakebuf_r+0x18>
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	e7e2      	b.n	800314c <__smakebuf_r+0xc>
 8003186:	89a3      	ldrh	r3, [r4, #12]
 8003188:	6020      	str	r0, [r4, #0]
 800318a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800318e:	81a3      	strh	r3, [r4, #12]
 8003190:	9b01      	ldr	r3, [sp, #4]
 8003192:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003196:	b15b      	cbz	r3, 80031b0 <__smakebuf_r+0x70>
 8003198:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800319c:	4630      	mov	r0, r6
 800319e:	f000 f81d 	bl	80031dc <_isatty_r>
 80031a2:	b128      	cbz	r0, 80031b0 <__smakebuf_r+0x70>
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	89a3      	ldrh	r3, [r4, #12]
 80031b2:	431d      	orrs	r5, r3
 80031b4:	81a5      	strh	r5, [r4, #12]
 80031b6:	e7cf      	b.n	8003158 <__smakebuf_r+0x18>

080031b8 <_fstat_r>:
 80031b8:	b538      	push	{r3, r4, r5, lr}
 80031ba:	4d07      	ldr	r5, [pc, #28]	@ (80031d8 <_fstat_r+0x20>)
 80031bc:	2300      	movs	r3, #0
 80031be:	4604      	mov	r4, r0
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	602b      	str	r3, [r5, #0]
 80031c6:	f7ff f860 	bl	800228a <_fstat>
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	d102      	bne.n	80031d4 <_fstat_r+0x1c>
 80031ce:	682b      	ldr	r3, [r5, #0]
 80031d0:	b103      	cbz	r3, 80031d4 <_fstat_r+0x1c>
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	bd38      	pop	{r3, r4, r5, pc}
 80031d6:	bf00      	nop
 80031d8:	20000210 	.word	0x20000210

080031dc <_isatty_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4d06      	ldr	r5, [pc, #24]	@ (80031f8 <_isatty_r+0x1c>)
 80031e0:	2300      	movs	r3, #0
 80031e2:	4604      	mov	r4, r0
 80031e4:	4608      	mov	r0, r1
 80031e6:	602b      	str	r3, [r5, #0]
 80031e8:	f7ff f85f 	bl	80022aa <_isatty>
 80031ec:	1c43      	adds	r3, r0, #1
 80031ee:	d102      	bne.n	80031f6 <_isatty_r+0x1a>
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	b103      	cbz	r3, 80031f6 <_isatty_r+0x1a>
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	bd38      	pop	{r3, r4, r5, pc}
 80031f8:	20000210 	.word	0x20000210

080031fc <_init>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr

08003208 <_fini>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr
