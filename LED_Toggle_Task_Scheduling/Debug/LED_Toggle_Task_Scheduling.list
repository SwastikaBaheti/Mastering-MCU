
LED_Toggle_Task_Scheduling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08001900  08001900  00002900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019f8  080019f8  00003060  2**0
                  CONTENTS
  4 .ARM          00000008  080019f8  080019f8  000029f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a00  08001a00  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a00  08001a00  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a04  08001a04  00002a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08001a08  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00003060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fe6  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c8  00000000  00000000  00004076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00004540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000151  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d97  00000000  00000000  00004869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001850  00000000  00000000  00007600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009fdc  00000000  00000000  00008e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012e2c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e28  00000000  00000000  00012e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000096  00000000  00000000  00013c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080018e8 	.word	0x080018e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080018e8 	.word	0x080018e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
RCC_ABH1ENR_t volatile *const pClockRegister = RCC_ABHIENR_ADDR;
GPIOx_MODE_t volatile *const pGpiodModeRegister = GPIOD_MODE_ADDR;
GPIOx_ODR_t volatile *const pGpiodOutputDataRegister = GPIOD_ODR_ADDR;

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	//Enabling processor faults
	enable_processor_faults();
 8000274:	f000 f9c0 	bl	80005f8 <enable_processor_faults>

	//Initialize the scheduler stack pointer
	init_scheduler_stack(SCHEDULER_STACK_START);
 8000278:	4809      	ldr	r0, [pc, #36]	@ (80002a0 <main+0x30>)
 800027a:	f000 f8f2 	bl	8000462 <init_scheduler_stack>

	//Initialize tasks
	init_tasks();
 800027e:	f000 fa45 	bl	800070c <init_tasks>

	//Initialize stack frames for all the tasks
	init_tasks_stack();
 8000282:	f000 f8f3 	bl	800046c <init_tasks_stack>

	//Initialize the LED pins and ports
	init_all_LEDs();
 8000286:	f000 fa03 	bl	8000690 <init_all_LEDs>

	//Configure the sysTick timer
	init_systick_timer(TICK_HZ);
 800028a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800028e:	f000 f861 	bl	8000354 <init_systick_timer>

	//Setting PSP as the stack pointer in thread mode
	switch_to_psp();
 8000292:	f000 f9a3 	bl	80005dc <switch_to_psp>

	//Launch Task-1
	task1_handler();
 8000296:	f000 f80d 	bl	80002b4 <task1_handler>

    /* Loop forever */
	for(;;);
 800029a:	bf00      	nop
 800029c:	e7fd      	b.n	800029a <main+0x2a>
 800029e:	bf00      	nop
 80002a0:	2001ec00 	.word	0x2001ec00

080002a4 <idle_task>:
}

void idle_task(void){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	while(1){
		printf("Idle Task running");
 80002a8:	4801      	ldr	r0, [pc, #4]	@ (80002b0 <idle_task+0xc>)
 80002aa:	f000 fc51 	bl	8000b50 <iprintf>
 80002ae:	e7fb      	b.n	80002a8 <idle_task+0x4>
 80002b0:	08001900 	.word	0x08001900

080002b4 <task1_handler>:
	}
}

void task1_handler(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	//Toggle green LED in every 1 second
	while(1){
		pGpiodOutputDataRegister->pin12 ^= PIN_DISABLE;
 80002b8:	4b07      	ldr	r3, [pc, #28]	@ (80002d8 <task1_handler+0x24>)
 80002ba:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <task1_handler+0x24>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80002c2:	b2d9      	uxtb	r1, r3
 80002c4:	6813      	ldr	r3, [r2, #0]
 80002c6:	f361 330c 	bfi	r3, r1, #12, #1
 80002ca:	6013      	str	r3, [r2, #0]
		task_delay(1000);
 80002cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002d0:	f000 fa6a 	bl	80007a8 <task_delay>
		pGpiodOutputDataRegister->pin12 ^= PIN_DISABLE;
 80002d4:	bf00      	nop
 80002d6:	e7ef      	b.n	80002b8 <task1_handler+0x4>
 80002d8:	40020c14 	.word	0x40020c14

080002dc <task2_handler>:
	}
}

void task2_handler(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	//Toggle orange LED in every 0.5 second
	while(1){
		pGpiodOutputDataRegister->pin13 ^= PIN_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <task2_handler+0x24>)
 80002e2:	4a07      	ldr	r2, [pc, #28]	@ (8000300 <task2_handler+0x24>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80002ea:	b2d9      	uxtb	r1, r3
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	f361 334d 	bfi	r3, r1, #13, #1
 80002f2:	6013      	str	r3, [r2, #0]
		task_delay(500);
 80002f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002f8:	f000 fa56 	bl	80007a8 <task_delay>
		pGpiodOutputDataRegister->pin13 ^= PIN_DISABLE;
 80002fc:	bf00      	nop
 80002fe:	e7ef      	b.n	80002e0 <task2_handler+0x4>
 8000300:	40020c14 	.word	0x40020c14

08000304 <task3_handler>:
	}
}

void task3_handler(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	//Toggle red LED in every 0.25 second
	while(1){
		pGpiodOutputDataRegister->pin14 ^= PIN_DISABLE;
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <task3_handler+0x24>)
 800030a:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <task3_handler+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8000312:	b2d9      	uxtb	r1, r3
 8000314:	6813      	ldr	r3, [r2, #0]
 8000316:	f361 338e 	bfi	r3, r1, #14, #1
 800031a:	6013      	str	r3, [r2, #0]
		task_delay(250);
 800031c:	20fa      	movs	r0, #250	@ 0xfa
 800031e:	f000 fa43 	bl	80007a8 <task_delay>
		pGpiodOutputDataRegister->pin14 ^= PIN_DISABLE;
 8000322:	bf00      	nop
 8000324:	e7f0      	b.n	8000308 <task3_handler+0x4>
 8000326:	bf00      	nop
 8000328:	40020c14 	.word	0x40020c14

0800032c <task4_handler>:
	}
}

void task4_handler(void){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	//Toggle blue LED in every 0.125 second
	while(1){
		pGpiodOutputDataRegister->pin15 ^= PIN_DISABLE;
 8000330:	4b07      	ldr	r3, [pc, #28]	@ (8000350 <task4_handler+0x24>)
 8000332:	4a07      	ldr	r2, [pc, #28]	@ (8000350 <task4_handler+0x24>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 800033a:	b2d9      	uxtb	r1, r3
 800033c:	6813      	ldr	r3, [r2, #0]
 800033e:	f361 33cf 	bfi	r3, r1, #15, #1
 8000342:	6013      	str	r3, [r2, #0]
		task_delay(125);
 8000344:	207d      	movs	r0, #125	@ 0x7d
 8000346:	f000 fa2f 	bl	80007a8 <task_delay>
		pGpiodOutputDataRegister->pin15 ^= PIN_DISABLE;
 800034a:	bf00      	nop
 800034c:	e7f0      	b.n	8000330 <task4_handler+0x4>
 800034e:	bf00      	nop
 8000350:	40020c14 	.word	0x40020c14

08000354 <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz){
 8000354:	b480      	push	{r7}
 8000356:	b087      	sub	sp, #28
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint32_t countValue = (SYSTICK_TIMER_CLOCK_HZ/tick_hz)-1;
 800035c:	4a10      	ldr	r2, [pc, #64]	@ (80003a0 <init_systick_timer+0x4c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	fbb2 f3f3 	udiv	r3, r2, r3
 8000364:	3b01      	subs	r3, #1
 8000366:	617b      	str	r3, [r7, #20]
	uint32_t *pSYST_RVR = (uint32_t *)SYST_RVR_ADDRESS;
 8000368:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <init_systick_timer+0x50>)
 800036a:	613b      	str	r3, [r7, #16]
	uint32_t *pSYST_CSR = (uint32_t *)SYST_CSR_ADDRESS;
 800036c:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <init_systick_timer+0x54>)
 800036e:	60fb      	str	r3, [r7, #12]

	//Clear the value of SYST_RVR
	*pSYST_RVR &= ~(0x00FFFFFF);
 8000370:	693b      	ldr	r3, [r7, #16]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
 8000378:	693b      	ldr	r3, [r7, #16]
 800037a:	601a      	str	r2, [r3, #0]

	//Loading the count value in SYST_RVR
	*pSYST_RVR |= countValue;
 800037c:	693b      	ldr	r3, [r7, #16]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	431a      	orrs	r2, r3
 8000384:	693b      	ldr	r3, [r7, #16]
 8000386:	601a      	str	r2, [r3, #0]

	//Enable the systick Timer
	*pSYST_CSR |= (0x00000007);
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f043 0207 	orr.w	r2, r3, #7
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	371c      	adds	r7, #28
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	00f42400 	.word	0x00f42400
 80003a4:	e000e014 	.word	0xe000e014
 80003a8:	e000e010 	.word	0xe000e010

080003ac <update_global_tick_count>:

void update_global_tick_count(void){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
	global_tick_count += 1;
 80003b0:	4b04      	ldr	r3, [pc, #16]	@ (80003c4 <update_global_tick_count+0x18>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	4a03      	ldr	r2, [pc, #12]	@ (80003c4 <update_global_tick_count+0x18>)
 80003b8:	6013      	str	r3, [r2, #0]
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	2000007c 	.word	0x2000007c

080003c8 <unblock_tasks>:

void unblock_tasks(void){
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
	for(int i=1; i<MAX_TASKS; i++){
 80003ce:	2301      	movs	r3, #1
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	e01b      	b.n	800040c <unblock_tasks+0x44>
		if(user_tasks[i].current_state != TASK_READY_STATE){
 80003d4:	4a12      	ldr	r2, [pc, #72]	@ (8000420 <unblock_tasks+0x58>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	011b      	lsls	r3, r3, #4
 80003da:	4413      	add	r3, r2
 80003dc:	3304      	adds	r3, #4
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d010      	beq.n	8000406 <unblock_tasks+0x3e>
			if(user_tasks[i].block_count == global_tick_count){
 80003e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000420 <unblock_tasks+0x58>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	011b      	lsls	r3, r3, #4
 80003ea:	4413      	add	r3, r2
 80003ec:	3308      	adds	r3, #8
 80003ee:	681a      	ldr	r2, [r3, #0]
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <unblock_tasks+0x5c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d106      	bne.n	8000406 <unblock_tasks+0x3e>
				user_tasks[i].current_state = TASK_READY_STATE;
 80003f8:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <unblock_tasks+0x58>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	011b      	lsls	r3, r3, #4
 80003fe:	4413      	add	r3, r2
 8000400:	3304      	adds	r3, #4
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	for(int i=1; i<MAX_TASKS; i++){
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3301      	adds	r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d9e0      	bls.n	80003d4 <unblock_tasks+0xc>
			}
		}
	}
}
 8000412:	bf00      	nop
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr
 8000420:	20000080 	.word	0x20000080
 8000424:	2000007c 	.word	0x2000007c

08000428 <SysTick_Handler>:

void SysTick_Handler(void){
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0

	//Update the global tick count
	update_global_tick_count();
 800042c:	f7ff ffbe 	bl	80003ac <update_global_tick_count>

	//Unblock task
	unblock_tasks();
 8000430:	f7ff ffca 	bl	80003c8 <unblock_tasks>

	//Pend pendSV using Interrupt Control and Status Register
	schedule();
 8000434:	f000 f9e8 	bl	8000808 <schedule>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <PendSV_Handler>:

__attribute__((naked))void PendSV_Handler(void){

	/*1. Saving the data of the current task*/
	__asm volatile("MRS R0, PSP");
 800043c:	f3ef 8009 	mrs	r0, PSP
	//Storing the registers
	__asm volatile("STMDB R0!, {R4-R11}");
 8000440:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Storing the PSP value
	__asm volatile("PUSH {LR}");
 8000444:	b500      	push	{lr}
	__asm volatile("BL save_psp_value");
 8000446:	f000 f8b3 	bl	80005b0 <save_psp_value>

	/*2. Retrieve the data of the next task*/
	//Update the next task
	__asm volatile("BL set_next_task");
 800044a:	f000 f86b 	bl	8000524 <set_next_task>
	//PSP value of the next task
	__asm volatile("BL get_psp");
 800044e:	f000 f857 	bl	8000500 <get_psp>
	//Load the values of the register from the stack
	__asm volatile("LDMIA R0!, {R4-R11}");
 8000452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Update the value of the PSP
	__asm volatile("MSR PSP, R0");
 8000456:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 800045a:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile ("BX LR");
 800045e:	4770      	bx	lr
}
 8000460:	bf00      	nop

08000462 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t schedularStackBaseAddress){
	__asm volatile("MSR MSP, r0");
 8000462:	f380 8808 	msr	MSP, r0
	__asm volatile("BX LR");
 8000466:	4770      	bx	lr
}
 8000468:	bf00      	nop
	...

0800046c <init_tasks_stack>:

void init_tasks_stack(void){
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i=0; i< MAX_TASKS; i++){
 8000472:	2300      	movs	r3, #0
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	e037      	b.n	80004e8 <init_tasks_stack+0x7c>
		pPSP = (uint32_t *)user_tasks[i].psp_value;
 8000478:	4a20      	ldr	r2, [pc, #128]	@ (80004fc <init_tasks_stack+0x90>)
 800047a:	68bb      	ldr	r3, [r7, #8]
 800047c:	011b      	lsls	r3, r3, #4
 800047e:	4413      	add	r3, r2
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	3b04      	subs	r3, #4
 8000488:	60fb      	str	r3, [r7, #12]
		*pPSP = 0x01000000;	//Storing xPSR
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000490:	601a      	str	r2, [r3, #0]
		pPSP--;
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	3b04      	subs	r3, #4
 8000496:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)user_tasks[i].task_handler;	//Storing PC(Return Address)
 8000498:	4a18      	ldr	r2, [pc, #96]	@ (80004fc <init_tasks_stack+0x90>)
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	330c      	adds	r3, #12
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	601a      	str	r2, [r3, #0]
		pPSP--;
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	3b04      	subs	r3, #4
 80004ae:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;	//Storing LR
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f06f 0202 	mvn.w	r2, #2
 80004b6:	601a      	str	r2, [r3, #0]

		//Storing the registers from R0-R12
		for(int j=0; j<13; j++){
 80004b8:	2300      	movs	r3, #0
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	e008      	b.n	80004d0 <init_tasks_stack+0x64>
			pPSP--;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3b04      	subs	r3, #4
 80004c2:	60fb      	str	r3, [r7, #12]
			*pPSP = 0x0;
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
		for(int j=0; j<13; j++){
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b0c      	cmp	r3, #12
 80004d4:	ddf3      	ble.n	80004be <init_tasks_stack+0x52>
		}
		//Save the current PSP value
		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004d6:	68fa      	ldr	r2, [r7, #12]
 80004d8:	4908      	ldr	r1, [pc, #32]	@ (80004fc <init_tasks_stack+0x90>)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	011b      	lsls	r3, r3, #4
 80004de:	440b      	add	r3, r1
 80004e0:	601a      	str	r2, [r3, #0]
	for(int i=0; i< MAX_TASKS; i++){
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3301      	adds	r3, #1
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d9c4      	bls.n	8000478 <init_tasks_stack+0xc>
	}
}
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	3714      	adds	r7, #20
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	20000080 	.word	0x20000080

08000500 <get_psp>:

uint32_t get_psp(void){
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <get_psp+0x1c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <get_psp+0x20>)
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	681b      	ldr	r3, [r3, #0]
}
 8000510:	4618      	mov	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000000 	.word	0x20000000
 8000520:	20000080 	.word	0x20000080

08000524 <set_next_task>:

void set_next_task(void){
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
	for(int i=0; i< MAX_TASKS; i++){
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e022      	b.n	8000576 <set_next_task+0x52>
		current_task++;
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <set_next_task+0x80>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	b2da      	uxtb	r2, r3
 8000538:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <set_next_task+0x80>)
 800053a:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 800053c:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <set_next_task+0x80>)
 800053e:	781a      	ldrb	r2, [r3, #0]
 8000540:	4b19      	ldr	r3, [pc, #100]	@ (80005a8 <set_next_task+0x84>)
 8000542:	fba3 1302 	umull	r1, r3, r3, r2
 8000546:	0899      	lsrs	r1, r3, #2
 8000548:	460b      	mov	r3, r1
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	1ad3      	subs	r3, r2, r3
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b14      	ldr	r3, [pc, #80]	@ (80005a4 <set_next_task+0x80>)
 8000554:	701a      	strb	r2, [r3, #0]
		if((user_tasks[current_task].current_state == TASK_READY_STATE) && (current_task !=0)){
 8000556:	4b13      	ldr	r3, [pc, #76]	@ (80005a4 <set_next_task+0x80>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <set_next_task+0x88>)
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	4413      	add	r3, r2
 8000560:	3304      	adds	r3, #4
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d103      	bne.n	8000570 <set_next_task+0x4c>
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <set_next_task+0x80>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	d106      	bne.n	800057e <set_next_task+0x5a>
	for(int i=0; i< MAX_TASKS; i++){
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	3301      	adds	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d9d9      	bls.n	8000530 <set_next_task+0xc>
 800057c:	e000      	b.n	8000580 <set_next_task+0x5c>
			break;
 800057e:	bf00      	nop
		}
	}

	if(user_tasks[current_task].current_state != TASK_READY_STATE){
 8000580:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <set_next_task+0x80>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <set_next_task+0x88>)
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	4413      	add	r3, r2
 800058a:	3304      	adds	r3, #4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <set_next_task+0x74>
		current_task = 0;
 8000592:	4b04      	ldr	r3, [pc, #16]	@ (80005a4 <set_next_task+0x80>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	}
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	20000000 	.word	0x20000000
 80005a8:	cccccccd 	.word	0xcccccccd
 80005ac:	20000080 	.word	0x20000080

080005b0 <save_psp_value>:

void save_psp_value(uint32_t psp_value){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = psp_value;
 80005b8:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <save_psp_value+0x24>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4a06      	ldr	r2, [pc, #24]	@ (80005d8 <save_psp_value+0x28>)
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	4413      	add	r3, r2
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000080 	.word	0x20000080

080005dc <switch_to_psp>:

__attribute__((naked)) void switch_to_psp(void){
	__asm volatile("PUSH {LR}");
 80005dc:	b500      	push	{lr}

	__asm volatile("BL get_psp");
 80005de:	f7ff ff8f 	bl	8000500 <get_psp>
	__asm volatile("MSR PSP, r0");
 80005e2:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");
 80005e6:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("MOV r0, #0x02");
 80005ea:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL, r0");
 80005ee:	f380 8814 	msr	CONTROL, r0

	__asm volatile("BX LR");
 80005f2:	4770      	bx	lr
}
 80005f4:	bf00      	nop
	...

080005f8 <enable_processor_faults>:

void enable_processor_faults(void){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t *)SHCSR_ADDRESS;
 80005fe:	4b07      	ldr	r3, [pc, #28]	@ (800061c <enable_processor_faults+0x24>)
 8000600:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (0x07 << 16);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f443 22e0 	orr.w	r2, r3, #458752	@ 0x70000
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed24 	.word	0xe000ed24

08000620 <BusFault_Handler>:

void BusFault_Handler(void){
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	printf("Bus Fault Exception took place");
 8000624:	4802      	ldr	r0, [pc, #8]	@ (8000630 <BusFault_Handler+0x10>)
 8000626:	f000 fa93 	bl	8000b50 <iprintf>
}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08001914 	.word	0x08001914

08000634 <MemManage_Handler>:

void MemManage_Handler(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	printf("Memory Manage Fault Exception took place");
 8000638:	4802      	ldr	r0, [pc, #8]	@ (8000644 <MemManage_Handler+0x10>)
 800063a:	f000 fa89 	bl	8000b50 <iprintf>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08001934 	.word	0x08001934

08000648 <UsageFault_Handler>:

void UsageFault_Handler(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
	printf("Usage Fault Exception took place\n");
 800064e:	4808      	ldr	r0, [pc, #32]	@ (8000670 <UsageFault_Handler+0x28>)
 8000650:	f000 fae6 	bl	8000c20 <puts>

	uint32_t *pUFSR = (uint32_t*)0xE000ED2AU;
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <UsageFault_Handler+0x2c>)
 8000656:	607b      	str	r3, [r7, #4]
	printf("The fault information is: %lx", (*pUFSR)&0xFFFF);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	b29b      	uxth	r3, r3
 800065e:	4619      	mov	r1, r3
 8000660:	4805      	ldr	r0, [pc, #20]	@ (8000678 <UsageFault_Handler+0x30>)
 8000662:	f000 fa75 	bl	8000b50 <iprintf>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	08001960 	.word	0x08001960
 8000674:	e000ed2a 	.word	0xe000ed2a
 8000678:	08001984 	.word	0x08001984

0800067c <HardFault_Handler>:

void HardFault_Handler(void){
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	printf("Hard Fault Exception took place");
 8000680:	4802      	ldr	r0, [pc, #8]	@ (800068c <HardFault_Handler+0x10>)
 8000682:	f000 fa65 	bl	8000b50 <iprintf>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	080019a4 	.word	0x080019a4

08000690 <init_all_LEDs>:

void init_all_LEDs(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	//Enable the clock for GPIOD
	pClockRegister->gpiod_en = CLOCK_ENABLE;
 8000694:	4a1a      	ldr	r2, [pc, #104]	@ (8000700 <init_all_LEDs+0x70>)
 8000696:	6813      	ldr	r3, [r2, #0]
 8000698:	f043 0308 	orr.w	r3, r3, #8
 800069c:	6013      	str	r3, [r2, #0]

	//Configure the GPIOD pin 12 as OUTPUT
	pGpiodModeRegister->pin12 = PIN_OUTPUT;
 800069e:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <init_all_LEDs+0x74>)
 80006a0:	6813      	ldr	r3, [r2, #0]
 80006a2:	2101      	movs	r1, #1
 80006a4:	f361 6319 	bfi	r3, r1, #24, #2
 80006a8:	6013      	str	r3, [r2, #0]

	//Configure the GPIOD pin 13 as OUTPUT
	pGpiodModeRegister->pin13 = PIN_OUTPUT;
 80006aa:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <init_all_LEDs+0x74>)
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	2101      	movs	r1, #1
 80006b0:	f361 639b 	bfi	r3, r1, #26, #2
 80006b4:	6013      	str	r3, [r2, #0]

	//Configure the GPIOD pin 14 as OUTPUT
	pGpiodModeRegister->pin14 = PIN_OUTPUT;
 80006b6:	4a13      	ldr	r2, [pc, #76]	@ (8000704 <init_all_LEDs+0x74>)
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	2101      	movs	r1, #1
 80006bc:	f361 731d 	bfi	r3, r1, #28, #2
 80006c0:	6013      	str	r3, [r2, #0]

	//Configure the GPIOD pin 15 as OUTPUT
	pGpiodModeRegister->pin15 = PIN_OUTPUT;
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <init_all_LEDs+0x74>)
 80006c4:	6813      	ldr	r3, [r2, #0]
 80006c6:	2101      	movs	r1, #1
 80006c8:	f361 739f 	bfi	r3, r1, #30, #2
 80006cc:	6013      	str	r3, [r2, #0]

	//Set the pin 12 as 0
	pGpiodOutputDataRegister->pin12 = PIN_DISABLE;
 80006ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000708 <init_all_LEDs+0x78>)
 80006d0:	6813      	ldr	r3, [r2, #0]
 80006d2:	f36f 330c 	bfc	r3, #12, #1
 80006d6:	6013      	str	r3, [r2, #0]

	//Set the pin 13 as 0
	pGpiodOutputDataRegister->pin13 = PIN_DISABLE;
 80006d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000708 <init_all_LEDs+0x78>)
 80006da:	6813      	ldr	r3, [r2, #0]
 80006dc:	f36f 334d 	bfc	r3, #13, #1
 80006e0:	6013      	str	r3, [r2, #0]

	//Set the pin 14 as 0
	pGpiodOutputDataRegister->pin14 = PIN_DISABLE;
 80006e2:	4a09      	ldr	r2, [pc, #36]	@ (8000708 <init_all_LEDs+0x78>)
 80006e4:	6813      	ldr	r3, [r2, #0]
 80006e6:	f36f 338e 	bfc	r3, #14, #1
 80006ea:	6013      	str	r3, [r2, #0]

	//Set the pin 15 as 0
	pGpiodOutputDataRegister->pin15 = PIN_DISABLE;
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <init_all_LEDs+0x78>)
 80006ee:	6813      	ldr	r3, [r2, #0]
 80006f0:	f36f 33cf 	bfc	r3, #15, #1
 80006f4:	6013      	str	r3, [r2, #0]
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40023830 	.word	0x40023830
 8000704:	40020c00 	.word	0x40020c00
 8000708:	40020c14 	.word	0x40020c14

0800070c <init_tasks>:

void init_tasks(void){
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

	//Initialize user task-1
	user_tasks[0].current_state = TASK_READY_STATE;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <init_tasks+0x70>)
 8000712:	2200      	movs	r2, #0
 8000714:	711a      	strb	r2, [r3, #4]
	user_tasks[0].psp_value = IDLE_TASK_STACK_START;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <init_tasks+0x70>)
 8000718:	4a19      	ldr	r2, [pc, #100]	@ (8000780 <init_tasks+0x74>)
 800071a:	601a      	str	r2, [r3, #0]
	user_tasks[0].task_handler = idle_task;
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <init_tasks+0x70>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <init_tasks+0x78>)
 8000720:	60da      	str	r2, [r3, #12]

	//Initialize user task-1
	user_tasks[1].current_state = TASK_READY_STATE;
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <init_tasks+0x70>)
 8000724:	2200      	movs	r2, #0
 8000726:	751a      	strb	r2, [r3, #20]
	user_tasks[1].psp_value = T1_STACK_START;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <init_tasks+0x70>)
 800072a:	4a17      	ldr	r2, [pc, #92]	@ (8000788 <init_tasks+0x7c>)
 800072c:	611a      	str	r2, [r3, #16]
	user_tasks[1].task_handler = task1_handler;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <init_tasks+0x70>)
 8000730:	4a16      	ldr	r2, [pc, #88]	@ (800078c <init_tasks+0x80>)
 8000732:	61da      	str	r2, [r3, #28]

	//Initialize user task-2
	user_tasks[2].current_state = TASK_READY_STATE;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <init_tasks+0x70>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	user_tasks[2].psp_value = T2_STACK_START;
 800073c:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <init_tasks+0x70>)
 800073e:	4a14      	ldr	r2, [pc, #80]	@ (8000790 <init_tasks+0x84>)
 8000740:	621a      	str	r2, [r3, #32]
	user_tasks[2].task_handler = task2_handler;
 8000742:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <init_tasks+0x70>)
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <init_tasks+0x88>)
 8000746:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Initialize user task-3
	user_tasks[3].current_state = TASK_READY_STATE;
 8000748:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <init_tasks+0x70>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	user_tasks[3].psp_value = T3_STACK_START;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <init_tasks+0x70>)
 8000752:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <init_tasks+0x8c>)
 8000754:	631a      	str	r2, [r3, #48]	@ 0x30
	user_tasks[3].task_handler = task3_handler;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <init_tasks+0x70>)
 8000758:	4a10      	ldr	r2, [pc, #64]	@ (800079c <init_tasks+0x90>)
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c

	//Initialize user task-4
	user_tasks[4].current_state = TASK_READY_STATE;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <init_tasks+0x70>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	user_tasks[4].psp_value = T4_STACK_START;
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <init_tasks+0x70>)
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <init_tasks+0x94>)
 8000768:	641a      	str	r2, [r3, #64]	@ 0x40
	user_tasks[4].task_handler = task4_handler;
 800076a:	4b04      	ldr	r3, [pc, #16]	@ (800077c <init_tasks+0x70>)
 800076c:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <init_tasks+0x98>)
 800076e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000080 	.word	0x20000080
 8000780:	2001f000 	.word	0x2001f000
 8000784:	080002a5 	.word	0x080002a5
 8000788:	20020000 	.word	0x20020000
 800078c:	080002b5 	.word	0x080002b5
 8000790:	2001fc00 	.word	0x2001fc00
 8000794:	080002dd 	.word	0x080002dd
 8000798:	2001f800 	.word	0x2001f800
 800079c:	08000305 	.word	0x08000305
 80007a0:	2001f400 	.word	0x2001f400
 80007a4:	0800032d 	.word	0x0800032d

080007a8 <task_delay>:

void task_delay(uint32_t tick_count){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	//Disable all the interrupts
	INTERRUPT_DISABLE();
 80007b0:	f04f 0001 	mov.w	r0, #1
 80007b4:	f380 8810 	msr	PRIMASK, r0

	if(current_task){
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <task_delay+0x54>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d015      	beq.n	80007ec <task_delay+0x44>
		user_tasks[current_task].block_count = global_tick_count + tick_count;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <task_delay+0x58>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <task_delay+0x54>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	441a      	add	r2, r3
 80007ce:	490d      	ldr	r1, [pc, #52]	@ (8000804 <task_delay+0x5c>)
 80007d0:	0103      	lsls	r3, r0, #4
 80007d2:	440b      	add	r3, r1
 80007d4:	3308      	adds	r3, #8
 80007d6:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 80007d8:	4b08      	ldr	r3, [pc, #32]	@ (80007fc <task_delay+0x54>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	@ (8000804 <task_delay+0x5c>)
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	4413      	add	r3, r2
 80007e2:	3304      	adds	r3, #4
 80007e4:	2201      	movs	r2, #1
 80007e6:	701a      	strb	r2, [r3, #0]
		schedule();
 80007e8:	f000 f80e 	bl	8000808 <schedule>
	}

	//Enable all the interrupts
	INTERRUPT_ENABLE();
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	f380 8810 	msr	PRIMASK, r0
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000000 	.word	0x20000000
 8000800:	2000007c 	.word	0x2000007c
 8000804:	20000080 	.word	0x20000080

08000808 <schedule>:

void schedule(void){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t *)ICSR_ADDRESS;
 800080e:	4b07      	ldr	r3, [pc, #28]	@ (800082c <schedule+0x24>)
 8000810:	607b      	str	r3, [r7, #4]
	*pICSR |= (1<<28);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	601a      	str	r2, [r3, #0]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed04 	.word	0xe000ed04

08000830 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	e00a      	b.n	8000858 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000842:	f3af 8000 	nop.w
 8000846:	4601      	mov	r1, r0
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	60ba      	str	r2, [r7, #8]
 800084e:	b2ca      	uxtb	r2, r1
 8000850:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <_read+0x12>
  }

  return len;
 8000860:	687b      	ldr	r3, [r7, #4]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b086      	sub	sp, #24
 800086e:	af00      	add	r7, sp, #0
 8000870:	60f8      	str	r0, [r7, #12]
 8000872:	60b9      	str	r1, [r7, #8]
 8000874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
 800087a:	e009      	b.n	8000890 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	1c5a      	adds	r2, r3, #1
 8000880:	60ba      	str	r2, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4618      	mov	r0, r3
 8000886:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	3301      	adds	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697a      	ldr	r2, [r7, #20]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbf1      	blt.n	800087c <_write+0x12>
  }
  return len;
 8000898:	687b      	ldr	r3, [r7, #4]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3718      	adds	r7, #24
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <_close>:

int _close(int file)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80008ca:	605a      	str	r2, [r3, #4]
  return 0;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <_isatty>:

int _isatty(int file)
{
 80008da:	b480      	push	{r7}
 80008dc:	b083      	sub	sp, #12
 80008de:	af00      	add	r7, sp, #0
 80008e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008e2:	2301      	movs	r3, #1
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3714      	adds	r7, #20
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000914:	4a14      	ldr	r2, [pc, #80]	@ (8000968 <_sbrk+0x5c>)
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <_sbrk+0x60>)
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000920:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d102      	bne.n	800092e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <_sbrk+0x64>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <_sbrk+0x68>)
 800092c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	d207      	bcs.n	800094c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800093c:	f000 fa9e 	bl	8000e7c <__errno>
 8000940:	4603      	mov	r3, r0
 8000942:	220c      	movs	r2, #12
 8000944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <_sbrk+0x64>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <_sbrk+0x64>)
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4413      	add	r3, r2
 800095a:	4a05      	ldr	r2, [pc, #20]	@ (8000970 <_sbrk+0x64>)
 800095c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095e:	68fb      	ldr	r3, [r7, #12]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20020000 	.word	0x20020000
 800096c:	00000400 	.word	0x00000400
 8000970:	200000d0 	.word	0x200000d0
 8000974:	20000220 	.word	0x20000220

08000978 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000978:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	@ (80009c4 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009a6:	f000 fa6f 	bl	8000e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009aa:	f7ff fc61 	bl	8000270 <main>

080009ae <LoopForever>:

LoopForever:
  b LoopForever
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
  ldr   r0, =_estack
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80009bc:	08001a08 	.word	0x08001a08
  ldr r2, =_sbss
 80009c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80009c4:	20000220 	.word	0x20000220

080009c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <std>:
 80009cc:	2300      	movs	r3, #0
 80009ce:	b510      	push	{r4, lr}
 80009d0:	4604      	mov	r4, r0
 80009d2:	e9c0 3300 	strd	r3, r3, [r0]
 80009d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009da:	6083      	str	r3, [r0, #8]
 80009dc:	8181      	strh	r1, [r0, #12]
 80009de:	6643      	str	r3, [r0, #100]	@ 0x64
 80009e0:	81c2      	strh	r2, [r0, #14]
 80009e2:	6183      	str	r3, [r0, #24]
 80009e4:	4619      	mov	r1, r3
 80009e6:	2208      	movs	r2, #8
 80009e8:	305c      	adds	r0, #92	@ 0x5c
 80009ea:	f000 f9f9 	bl	8000de0 <memset>
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <std+0x58>)
 80009f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <std+0x5c>)
 80009f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <std+0x60>)
 80009f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80009fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000a30 <std+0x64>)
 80009fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <std+0x68>)
 8000a00:	6224      	str	r4, [r4, #32]
 8000a02:	429c      	cmp	r4, r3
 8000a04:	d006      	beq.n	8000a14 <std+0x48>
 8000a06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a0a:	4294      	cmp	r4, r2
 8000a0c:	d002      	beq.n	8000a14 <std+0x48>
 8000a0e:	33d0      	adds	r3, #208	@ 0xd0
 8000a10:	429c      	cmp	r4, r3
 8000a12:	d105      	bne.n	8000a20 <std+0x54>
 8000a14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a1c:	f000 ba58 	b.w	8000ed0 <__retarget_lock_init_recursive>
 8000a20:	bd10      	pop	{r4, pc}
 8000a22:	bf00      	nop
 8000a24:	08000c31 	.word	0x08000c31
 8000a28:	08000c53 	.word	0x08000c53
 8000a2c:	08000c8b 	.word	0x08000c8b
 8000a30:	08000caf 	.word	0x08000caf
 8000a34:	200000d4 	.word	0x200000d4

08000a38 <stdio_exit_handler>:
 8000a38:	4a02      	ldr	r2, [pc, #8]	@ (8000a44 <stdio_exit_handler+0xc>)
 8000a3a:	4903      	ldr	r1, [pc, #12]	@ (8000a48 <stdio_exit_handler+0x10>)
 8000a3c:	4803      	ldr	r0, [pc, #12]	@ (8000a4c <stdio_exit_handler+0x14>)
 8000a3e:	f000 b869 	b.w	8000b14 <_fwalk_sglue>
 8000a42:	bf00      	nop
 8000a44:	20000004 	.word	0x20000004
 8000a48:	08001771 	.word	0x08001771
 8000a4c:	20000014 	.word	0x20000014

08000a50 <cleanup_stdio>:
 8000a50:	6841      	ldr	r1, [r0, #4]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <cleanup_stdio+0x34>)
 8000a54:	4299      	cmp	r1, r3
 8000a56:	b510      	push	{r4, lr}
 8000a58:	4604      	mov	r4, r0
 8000a5a:	d001      	beq.n	8000a60 <cleanup_stdio+0x10>
 8000a5c:	f000 fe88 	bl	8001770 <_fflush_r>
 8000a60:	68a1      	ldr	r1, [r4, #8]
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <cleanup_stdio+0x38>)
 8000a64:	4299      	cmp	r1, r3
 8000a66:	d002      	beq.n	8000a6e <cleanup_stdio+0x1e>
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f000 fe81 	bl	8001770 <_fflush_r>
 8000a6e:	68e1      	ldr	r1, [r4, #12]
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <cleanup_stdio+0x3c>)
 8000a72:	4299      	cmp	r1, r3
 8000a74:	d004      	beq.n	8000a80 <cleanup_stdio+0x30>
 8000a76:	4620      	mov	r0, r4
 8000a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a7c:	f000 be78 	b.w	8001770 <_fflush_r>
 8000a80:	bd10      	pop	{r4, pc}
 8000a82:	bf00      	nop
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	2000013c 	.word	0x2000013c
 8000a8c:	200001a4 	.word	0x200001a4

08000a90 <global_stdio_init.part.0>:
 8000a90:	b510      	push	{r4, lr}
 8000a92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac0 <global_stdio_init.part.0+0x30>)
 8000a94:	4c0b      	ldr	r4, [pc, #44]	@ (8000ac4 <global_stdio_init.part.0+0x34>)
 8000a96:	4a0c      	ldr	r2, [pc, #48]	@ (8000ac8 <global_stdio_init.part.0+0x38>)
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	f7ff ff94 	bl	80009cc <std>
 8000aa4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2109      	movs	r1, #9
 8000aac:	f7ff ff8e 	bl	80009cc <std>
 8000ab0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aba:	2112      	movs	r1, #18
 8000abc:	f7ff bf86 	b.w	80009cc <std>
 8000ac0:	2000020c 	.word	0x2000020c
 8000ac4:	200000d4 	.word	0x200000d4
 8000ac8:	08000a39 	.word	0x08000a39

08000acc <__sfp_lock_acquire>:
 8000acc:	4801      	ldr	r0, [pc, #4]	@ (8000ad4 <__sfp_lock_acquire+0x8>)
 8000ace:	f000 ba00 	b.w	8000ed2 <__retarget_lock_acquire_recursive>
 8000ad2:	bf00      	nop
 8000ad4:	20000215 	.word	0x20000215

08000ad8 <__sfp_lock_release>:
 8000ad8:	4801      	ldr	r0, [pc, #4]	@ (8000ae0 <__sfp_lock_release+0x8>)
 8000ada:	f000 b9fb 	b.w	8000ed4 <__retarget_lock_release_recursive>
 8000ade:	bf00      	nop
 8000ae0:	20000215 	.word	0x20000215

08000ae4 <__sinit>:
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	f7ff fff0 	bl	8000acc <__sfp_lock_acquire>
 8000aec:	6a23      	ldr	r3, [r4, #32]
 8000aee:	b11b      	cbz	r3, 8000af8 <__sinit+0x14>
 8000af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000af4:	f7ff bff0 	b.w	8000ad8 <__sfp_lock_release>
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__sinit+0x28>)
 8000afa:	6223      	str	r3, [r4, #32]
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__sinit+0x2c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d1f5      	bne.n	8000af0 <__sinit+0xc>
 8000b04:	f7ff ffc4 	bl	8000a90 <global_stdio_init.part.0>
 8000b08:	e7f2      	b.n	8000af0 <__sinit+0xc>
 8000b0a:	bf00      	nop
 8000b0c:	08000a51 	.word	0x08000a51
 8000b10:	2000020c 	.word	0x2000020c

08000b14 <_fwalk_sglue>:
 8000b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b18:	4607      	mov	r7, r0
 8000b1a:	4688      	mov	r8, r1
 8000b1c:	4614      	mov	r4, r2
 8000b1e:	2600      	movs	r6, #0
 8000b20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b24:	f1b9 0901 	subs.w	r9, r9, #1
 8000b28:	d505      	bpl.n	8000b36 <_fwalk_sglue+0x22>
 8000b2a:	6824      	ldr	r4, [r4, #0]
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d1f7      	bne.n	8000b20 <_fwalk_sglue+0xc>
 8000b30:	4630      	mov	r0, r6
 8000b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b36:	89ab      	ldrh	r3, [r5, #12]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d907      	bls.n	8000b4c <_fwalk_sglue+0x38>
 8000b3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b40:	3301      	adds	r3, #1
 8000b42:	d003      	beq.n	8000b4c <_fwalk_sglue+0x38>
 8000b44:	4629      	mov	r1, r5
 8000b46:	4638      	mov	r0, r7
 8000b48:	47c0      	blx	r8
 8000b4a:	4306      	orrs	r6, r0
 8000b4c:	3568      	adds	r5, #104	@ 0x68
 8000b4e:	e7e9      	b.n	8000b24 <_fwalk_sglue+0x10>

08000b50 <iprintf>:
 8000b50:	b40f      	push	{r0, r1, r2, r3}
 8000b52:	b507      	push	{r0, r1, r2, lr}
 8000b54:	4906      	ldr	r1, [pc, #24]	@ (8000b70 <iprintf+0x20>)
 8000b56:	ab04      	add	r3, sp, #16
 8000b58:	6808      	ldr	r0, [r1, #0]
 8000b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b5e:	6881      	ldr	r1, [r0, #8]
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	f000 fadb 	bl	800111c <_vfiprintf_r>
 8000b66:	b003      	add	sp, #12
 8000b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr
 8000b70:	20000010 	.word	0x20000010

08000b74 <_puts_r>:
 8000b74:	6a03      	ldr	r3, [r0, #32]
 8000b76:	b570      	push	{r4, r5, r6, lr}
 8000b78:	6884      	ldr	r4, [r0, #8]
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	460e      	mov	r6, r1
 8000b7e:	b90b      	cbnz	r3, 8000b84 <_puts_r+0x10>
 8000b80:	f7ff ffb0 	bl	8000ae4 <__sinit>
 8000b84:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000b86:	07db      	lsls	r3, r3, #31
 8000b88:	d405      	bmi.n	8000b96 <_puts_r+0x22>
 8000b8a:	89a3      	ldrh	r3, [r4, #12]
 8000b8c:	0598      	lsls	r0, r3, #22
 8000b8e:	d402      	bmi.n	8000b96 <_puts_r+0x22>
 8000b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000b92:	f000 f99e 	bl	8000ed2 <__retarget_lock_acquire_recursive>
 8000b96:	89a3      	ldrh	r3, [r4, #12]
 8000b98:	0719      	lsls	r1, r3, #28
 8000b9a:	d502      	bpl.n	8000ba2 <_puts_r+0x2e>
 8000b9c:	6923      	ldr	r3, [r4, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d135      	bne.n	8000c0e <_puts_r+0x9a>
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f000 f8c5 	bl	8000d34 <__swsetup_r>
 8000baa:	b380      	cbz	r0, 8000c0e <_puts_r+0x9a>
 8000bac:	f04f 35ff 	mov.w	r5, #4294967295
 8000bb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000bb2:	07da      	lsls	r2, r3, #31
 8000bb4:	d405      	bmi.n	8000bc2 <_puts_r+0x4e>
 8000bb6:	89a3      	ldrh	r3, [r4, #12]
 8000bb8:	059b      	lsls	r3, r3, #22
 8000bba:	d402      	bmi.n	8000bc2 <_puts_r+0x4e>
 8000bbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000bbe:	f000 f989 	bl	8000ed4 <__retarget_lock_release_recursive>
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	da04      	bge.n	8000bd4 <_puts_r+0x60>
 8000bca:	69a2      	ldr	r2, [r4, #24]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dc17      	bgt.n	8000c00 <_puts_r+0x8c>
 8000bd0:	290a      	cmp	r1, #10
 8000bd2:	d015      	beq.n	8000c00 <_puts_r+0x8c>
 8000bd4:	6823      	ldr	r3, [r4, #0]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	6022      	str	r2, [r4, #0]
 8000bda:	7019      	strb	r1, [r3, #0]
 8000bdc:	68a3      	ldr	r3, [r4, #8]
 8000bde:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000be2:	3b01      	subs	r3, #1
 8000be4:	60a3      	str	r3, [r4, #8]
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d1ed      	bne.n	8000bc6 <_puts_r+0x52>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	da11      	bge.n	8000c12 <_puts_r+0x9e>
 8000bee:	4622      	mov	r2, r4
 8000bf0:	210a      	movs	r1, #10
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	f000 f85f 	bl	8000cb6 <__swbuf_r>
 8000bf8:	3001      	adds	r0, #1
 8000bfa:	d0d7      	beq.n	8000bac <_puts_r+0x38>
 8000bfc:	250a      	movs	r5, #10
 8000bfe:	e7d7      	b.n	8000bb0 <_puts_r+0x3c>
 8000c00:	4622      	mov	r2, r4
 8000c02:	4628      	mov	r0, r5
 8000c04:	f000 f857 	bl	8000cb6 <__swbuf_r>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	d1e7      	bne.n	8000bdc <_puts_r+0x68>
 8000c0c:	e7ce      	b.n	8000bac <_puts_r+0x38>
 8000c0e:	3e01      	subs	r6, #1
 8000c10:	e7e4      	b.n	8000bdc <_puts_r+0x68>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	1c5a      	adds	r2, r3, #1
 8000c16:	6022      	str	r2, [r4, #0]
 8000c18:	220a      	movs	r2, #10
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e7ee      	b.n	8000bfc <_puts_r+0x88>
	...

08000c20 <puts>:
 8000c20:	4b02      	ldr	r3, [pc, #8]	@ (8000c2c <puts+0xc>)
 8000c22:	4601      	mov	r1, r0
 8000c24:	6818      	ldr	r0, [r3, #0]
 8000c26:	f7ff bfa5 	b.w	8000b74 <_puts_r>
 8000c2a:	bf00      	nop
 8000c2c:	20000010 	.word	0x20000010

08000c30 <__sread>:
 8000c30:	b510      	push	{r4, lr}
 8000c32:	460c      	mov	r4, r1
 8000c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c38:	f000 f8fc 	bl	8000e34 <_read_r>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	bfab      	itete	ge
 8000c40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000c42:	89a3      	ldrhlt	r3, [r4, #12]
 8000c44:	181b      	addge	r3, r3, r0
 8000c46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000c4a:	bfac      	ite	ge
 8000c4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000c4e:	81a3      	strhlt	r3, [r4, #12]
 8000c50:	bd10      	pop	{r4, pc}

08000c52 <__swrite>:
 8000c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c56:	461f      	mov	r7, r3
 8000c58:	898b      	ldrh	r3, [r1, #12]
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	460c      	mov	r4, r1
 8000c60:	4616      	mov	r6, r2
 8000c62:	d505      	bpl.n	8000c70 <__swrite+0x1e>
 8000c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c68:	2302      	movs	r3, #2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f000 f8d0 	bl	8000e10 <_lseek_r>
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c7a:	81a3      	strh	r3, [r4, #12]
 8000c7c:	4632      	mov	r2, r6
 8000c7e:	463b      	mov	r3, r7
 8000c80:	4628      	mov	r0, r5
 8000c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c86:	f000 b8e7 	b.w	8000e58 <_write_r>

08000c8a <__sseek>:
 8000c8a:	b510      	push	{r4, lr}
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c92:	f000 f8bd 	bl	8000e10 <_lseek_r>
 8000c96:	1c43      	adds	r3, r0, #1
 8000c98:	89a3      	ldrh	r3, [r4, #12]
 8000c9a:	bf15      	itete	ne
 8000c9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000ca2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000ca6:	81a3      	strheq	r3, [r4, #12]
 8000ca8:	bf18      	it	ne
 8000caa:	81a3      	strhne	r3, [r4, #12]
 8000cac:	bd10      	pop	{r4, pc}

08000cae <__sclose>:
 8000cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb2:	f000 b89d 	b.w	8000df0 <_close_r>

08000cb6 <__swbuf_r>:
 8000cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb8:	460e      	mov	r6, r1
 8000cba:	4614      	mov	r4, r2
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	b118      	cbz	r0, 8000cc8 <__swbuf_r+0x12>
 8000cc0:	6a03      	ldr	r3, [r0, #32]
 8000cc2:	b90b      	cbnz	r3, 8000cc8 <__swbuf_r+0x12>
 8000cc4:	f7ff ff0e 	bl	8000ae4 <__sinit>
 8000cc8:	69a3      	ldr	r3, [r4, #24]
 8000cca:	60a3      	str	r3, [r4, #8]
 8000ccc:	89a3      	ldrh	r3, [r4, #12]
 8000cce:	071a      	lsls	r2, r3, #28
 8000cd0:	d501      	bpl.n	8000cd6 <__swbuf_r+0x20>
 8000cd2:	6923      	ldr	r3, [r4, #16]
 8000cd4:	b943      	cbnz	r3, 8000ce8 <__swbuf_r+0x32>
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f000 f82b 	bl	8000d34 <__swsetup_r>
 8000cde:	b118      	cbz	r0, 8000ce8 <__swbuf_r+0x32>
 8000ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8000ce4:	4638      	mov	r0, r7
 8000ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ce8:	6823      	ldr	r3, [r4, #0]
 8000cea:	6922      	ldr	r2, [r4, #16]
 8000cec:	1a98      	subs	r0, r3, r2
 8000cee:	6963      	ldr	r3, [r4, #20]
 8000cf0:	b2f6      	uxtb	r6, r6
 8000cf2:	4283      	cmp	r3, r0
 8000cf4:	4637      	mov	r7, r6
 8000cf6:	dc05      	bgt.n	8000d04 <__swbuf_r+0x4e>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f000 fd38 	bl	8001770 <_fflush_r>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d1ed      	bne.n	8000ce0 <__swbuf_r+0x2a>
 8000d04:	68a3      	ldr	r3, [r4, #8]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	60a3      	str	r3, [r4, #8]
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	1c5a      	adds	r2, r3, #1
 8000d0e:	6022      	str	r2, [r4, #0]
 8000d10:	701e      	strb	r6, [r3, #0]
 8000d12:	6962      	ldr	r2, [r4, #20]
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d004      	beq.n	8000d24 <__swbuf_r+0x6e>
 8000d1a:	89a3      	ldrh	r3, [r4, #12]
 8000d1c:	07db      	lsls	r3, r3, #31
 8000d1e:	d5e1      	bpl.n	8000ce4 <__swbuf_r+0x2e>
 8000d20:	2e0a      	cmp	r6, #10
 8000d22:	d1df      	bne.n	8000ce4 <__swbuf_r+0x2e>
 8000d24:	4621      	mov	r1, r4
 8000d26:	4628      	mov	r0, r5
 8000d28:	f000 fd22 	bl	8001770 <_fflush_r>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d0d9      	beq.n	8000ce4 <__swbuf_r+0x2e>
 8000d30:	e7d6      	b.n	8000ce0 <__swbuf_r+0x2a>
	...

08000d34 <__swsetup_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <__swsetup_r+0xa8>)
 8000d38:	4605      	mov	r5, r0
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	460c      	mov	r4, r1
 8000d3e:	b118      	cbz	r0, 8000d48 <__swsetup_r+0x14>
 8000d40:	6a03      	ldr	r3, [r0, #32]
 8000d42:	b90b      	cbnz	r3, 8000d48 <__swsetup_r+0x14>
 8000d44:	f7ff fece 	bl	8000ae4 <__sinit>
 8000d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d4c:	0719      	lsls	r1, r3, #28
 8000d4e:	d422      	bmi.n	8000d96 <__swsetup_r+0x62>
 8000d50:	06da      	lsls	r2, r3, #27
 8000d52:	d407      	bmi.n	8000d64 <__swsetup_r+0x30>
 8000d54:	2209      	movs	r2, #9
 8000d56:	602a      	str	r2, [r5, #0]
 8000d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d5c:	81a3      	strh	r3, [r4, #12]
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d62:	e033      	b.n	8000dcc <__swsetup_r+0x98>
 8000d64:	0758      	lsls	r0, r3, #29
 8000d66:	d512      	bpl.n	8000d8e <__swsetup_r+0x5a>
 8000d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d6a:	b141      	cbz	r1, 8000d7e <__swsetup_r+0x4a>
 8000d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d002      	beq.n	8000d7a <__swsetup_r+0x46>
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f8af 	bl	8000ed8 <_free_r>
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d7e:	89a3      	ldrh	r3, [r4, #12]
 8000d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000d84:	81a3      	strh	r3, [r4, #12]
 8000d86:	2300      	movs	r3, #0
 8000d88:	6063      	str	r3, [r4, #4]
 8000d8a:	6923      	ldr	r3, [r4, #16]
 8000d8c:	6023      	str	r3, [r4, #0]
 8000d8e:	89a3      	ldrh	r3, [r4, #12]
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	81a3      	strh	r3, [r4, #12]
 8000d96:	6923      	ldr	r3, [r4, #16]
 8000d98:	b94b      	cbnz	r3, 8000dae <__swsetup_r+0x7a>
 8000d9a:	89a3      	ldrh	r3, [r4, #12]
 8000d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000da4:	d003      	beq.n	8000dae <__swsetup_r+0x7a>
 8000da6:	4621      	mov	r1, r4
 8000da8:	4628      	mov	r0, r5
 8000daa:	f000 fd2f 	bl	800180c <__smakebuf_r>
 8000dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000db2:	f013 0201 	ands.w	r2, r3, #1
 8000db6:	d00a      	beq.n	8000dce <__swsetup_r+0x9a>
 8000db8:	2200      	movs	r2, #0
 8000dba:	60a2      	str	r2, [r4, #8]
 8000dbc:	6962      	ldr	r2, [r4, #20]
 8000dbe:	4252      	negs	r2, r2
 8000dc0:	61a2      	str	r2, [r4, #24]
 8000dc2:	6922      	ldr	r2, [r4, #16]
 8000dc4:	b942      	cbnz	r2, 8000dd8 <__swsetup_r+0xa4>
 8000dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000dca:	d1c5      	bne.n	8000d58 <__swsetup_r+0x24>
 8000dcc:	bd38      	pop	{r3, r4, r5, pc}
 8000dce:	0799      	lsls	r1, r3, #30
 8000dd0:	bf58      	it	pl
 8000dd2:	6962      	ldrpl	r2, [r4, #20]
 8000dd4:	60a2      	str	r2, [r4, #8]
 8000dd6:	e7f4      	b.n	8000dc2 <__swsetup_r+0x8e>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e7f7      	b.n	8000dcc <__swsetup_r+0x98>
 8000ddc:	20000010 	.word	0x20000010

08000de0 <memset>:
 8000de0:	4402      	add	r2, r0
 8000de2:	4603      	mov	r3, r0
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d100      	bne.n	8000dea <memset+0xa>
 8000de8:	4770      	bx	lr
 8000dea:	f803 1b01 	strb.w	r1, [r3], #1
 8000dee:	e7f9      	b.n	8000de4 <memset+0x4>

08000df0 <_close_r>:
 8000df0:	b538      	push	{r3, r4, r5, lr}
 8000df2:	4d06      	ldr	r5, [pc, #24]	@ (8000e0c <_close_r+0x1c>)
 8000df4:	2300      	movs	r3, #0
 8000df6:	4604      	mov	r4, r0
 8000df8:	4608      	mov	r0, r1
 8000dfa:	602b      	str	r3, [r5, #0]
 8000dfc:	f7ff fd51 	bl	80008a2 <_close>
 8000e00:	1c43      	adds	r3, r0, #1
 8000e02:	d102      	bne.n	8000e0a <_close_r+0x1a>
 8000e04:	682b      	ldr	r3, [r5, #0]
 8000e06:	b103      	cbz	r3, 8000e0a <_close_r+0x1a>
 8000e08:	6023      	str	r3, [r4, #0]
 8000e0a:	bd38      	pop	{r3, r4, r5, pc}
 8000e0c:	20000210 	.word	0x20000210

08000e10 <_lseek_r>:
 8000e10:	b538      	push	{r3, r4, r5, lr}
 8000e12:	4d07      	ldr	r5, [pc, #28]	@ (8000e30 <_lseek_r+0x20>)
 8000e14:	4604      	mov	r4, r0
 8000e16:	4608      	mov	r0, r1
 8000e18:	4611      	mov	r1, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	602a      	str	r2, [r5, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	f7ff fd66 	bl	80008f0 <_lseek>
 8000e24:	1c43      	adds	r3, r0, #1
 8000e26:	d102      	bne.n	8000e2e <_lseek_r+0x1e>
 8000e28:	682b      	ldr	r3, [r5, #0]
 8000e2a:	b103      	cbz	r3, 8000e2e <_lseek_r+0x1e>
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	bd38      	pop	{r3, r4, r5, pc}
 8000e30:	20000210 	.word	0x20000210

08000e34 <_read_r>:
 8000e34:	b538      	push	{r3, r4, r5, lr}
 8000e36:	4d07      	ldr	r5, [pc, #28]	@ (8000e54 <_read_r+0x20>)
 8000e38:	4604      	mov	r4, r0
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	2200      	movs	r2, #0
 8000e40:	602a      	str	r2, [r5, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	f7ff fcf4 	bl	8000830 <_read>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	d102      	bne.n	8000e52 <_read_r+0x1e>
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	b103      	cbz	r3, 8000e52 <_read_r+0x1e>
 8000e50:	6023      	str	r3, [r4, #0]
 8000e52:	bd38      	pop	{r3, r4, r5, pc}
 8000e54:	20000210 	.word	0x20000210

08000e58 <_write_r>:
 8000e58:	b538      	push	{r3, r4, r5, lr}
 8000e5a:	4d07      	ldr	r5, [pc, #28]	@ (8000e78 <_write_r+0x20>)
 8000e5c:	4604      	mov	r4, r0
 8000e5e:	4608      	mov	r0, r1
 8000e60:	4611      	mov	r1, r2
 8000e62:	2200      	movs	r2, #0
 8000e64:	602a      	str	r2, [r5, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f7ff fcff 	bl	800086a <_write>
 8000e6c:	1c43      	adds	r3, r0, #1
 8000e6e:	d102      	bne.n	8000e76 <_write_r+0x1e>
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	b103      	cbz	r3, 8000e76 <_write_r+0x1e>
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	20000210 	.word	0x20000210

08000e7c <__errno>:
 8000e7c:	4b01      	ldr	r3, [pc, #4]	@ (8000e84 <__errno+0x8>)
 8000e7e:	6818      	ldr	r0, [r3, #0]
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000010 	.word	0x20000010

08000e88 <__libc_init_array>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ec0 <__libc_init_array+0x38>)
 8000e8c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ec4 <__libc_init_array+0x3c>)
 8000e8e:	1b64      	subs	r4, r4, r5
 8000e90:	10a4      	asrs	r4, r4, #2
 8000e92:	2600      	movs	r6, #0
 8000e94:	42a6      	cmp	r6, r4
 8000e96:	d109      	bne.n	8000eac <__libc_init_array+0x24>
 8000e98:	4d0b      	ldr	r5, [pc, #44]	@ (8000ec8 <__libc_init_array+0x40>)
 8000e9a:	4c0c      	ldr	r4, [pc, #48]	@ (8000ecc <__libc_init_array+0x44>)
 8000e9c:	f000 fd24 	bl	80018e8 <_init>
 8000ea0:	1b64      	subs	r4, r4, r5
 8000ea2:	10a4      	asrs	r4, r4, #2
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	42a6      	cmp	r6, r4
 8000ea8:	d105      	bne.n	8000eb6 <__libc_init_array+0x2e>
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb0:	4798      	blx	r3
 8000eb2:	3601      	adds	r6, #1
 8000eb4:	e7ee      	b.n	8000e94 <__libc_init_array+0xc>
 8000eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eba:	4798      	blx	r3
 8000ebc:	3601      	adds	r6, #1
 8000ebe:	e7f2      	b.n	8000ea6 <__libc_init_array+0x1e>
 8000ec0:	08001a00 	.word	0x08001a00
 8000ec4:	08001a00 	.word	0x08001a00
 8000ec8:	08001a00 	.word	0x08001a00
 8000ecc:	08001a04 	.word	0x08001a04

08000ed0 <__retarget_lock_init_recursive>:
 8000ed0:	4770      	bx	lr

08000ed2 <__retarget_lock_acquire_recursive>:
 8000ed2:	4770      	bx	lr

08000ed4 <__retarget_lock_release_recursive>:
 8000ed4:	4770      	bx	lr
	...

08000ed8 <_free_r>:
 8000ed8:	b538      	push	{r3, r4, r5, lr}
 8000eda:	4605      	mov	r5, r0
 8000edc:	2900      	cmp	r1, #0
 8000ede:	d041      	beq.n	8000f64 <_free_r+0x8c>
 8000ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ee4:	1f0c      	subs	r4, r1, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bfb8      	it	lt
 8000eea:	18e4      	addlt	r4, r4, r3
 8000eec:	f000 f8e0 	bl	80010b0 <__malloc_lock>
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f68 <_free_r+0x90>)
 8000ef2:	6813      	ldr	r3, [r2, #0]
 8000ef4:	b933      	cbnz	r3, 8000f04 <_free_r+0x2c>
 8000ef6:	6063      	str	r3, [r4, #4]
 8000ef8:	6014      	str	r4, [r2, #0]
 8000efa:	4628      	mov	r0, r5
 8000efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f00:	f000 b8dc 	b.w	80010bc <__malloc_unlock>
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	d908      	bls.n	8000f1a <_free_r+0x42>
 8000f08:	6820      	ldr	r0, [r4, #0]
 8000f0a:	1821      	adds	r1, r4, r0
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	bf01      	itttt	eq
 8000f10:	6819      	ldreq	r1, [r3, #0]
 8000f12:	685b      	ldreq	r3, [r3, #4]
 8000f14:	1809      	addeq	r1, r1, r0
 8000f16:	6021      	streq	r1, [r4, #0]
 8000f18:	e7ed      	b.n	8000ef6 <_free_r+0x1e>
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	b10b      	cbz	r3, 8000f24 <_free_r+0x4c>
 8000f20:	42a3      	cmp	r3, r4
 8000f22:	d9fa      	bls.n	8000f1a <_free_r+0x42>
 8000f24:	6811      	ldr	r1, [r2, #0]
 8000f26:	1850      	adds	r0, r2, r1
 8000f28:	42a0      	cmp	r0, r4
 8000f2a:	d10b      	bne.n	8000f44 <_free_r+0x6c>
 8000f2c:	6820      	ldr	r0, [r4, #0]
 8000f2e:	4401      	add	r1, r0
 8000f30:	1850      	adds	r0, r2, r1
 8000f32:	4283      	cmp	r3, r0
 8000f34:	6011      	str	r1, [r2, #0]
 8000f36:	d1e0      	bne.n	8000efa <_free_r+0x22>
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	6053      	str	r3, [r2, #4]
 8000f3e:	4408      	add	r0, r1
 8000f40:	6010      	str	r0, [r2, #0]
 8000f42:	e7da      	b.n	8000efa <_free_r+0x22>
 8000f44:	d902      	bls.n	8000f4c <_free_r+0x74>
 8000f46:	230c      	movs	r3, #12
 8000f48:	602b      	str	r3, [r5, #0]
 8000f4a:	e7d6      	b.n	8000efa <_free_r+0x22>
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	1821      	adds	r1, r4, r0
 8000f50:	428b      	cmp	r3, r1
 8000f52:	bf04      	itt	eq
 8000f54:	6819      	ldreq	r1, [r3, #0]
 8000f56:	685b      	ldreq	r3, [r3, #4]
 8000f58:	6063      	str	r3, [r4, #4]
 8000f5a:	bf04      	itt	eq
 8000f5c:	1809      	addeq	r1, r1, r0
 8000f5e:	6021      	streq	r1, [r4, #0]
 8000f60:	6054      	str	r4, [r2, #4]
 8000f62:	e7ca      	b.n	8000efa <_free_r+0x22>
 8000f64:	bd38      	pop	{r3, r4, r5, pc}
 8000f66:	bf00      	nop
 8000f68:	2000021c 	.word	0x2000021c

08000f6c <sbrk_aligned>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000fac <sbrk_aligned+0x40>)
 8000f70:	460c      	mov	r4, r1
 8000f72:	6831      	ldr	r1, [r6, #0]
 8000f74:	4605      	mov	r5, r0
 8000f76:	b911      	cbnz	r1, 8000f7e <sbrk_aligned+0x12>
 8000f78:	f000 fca6 	bl	80018c8 <_sbrk_r>
 8000f7c:	6030      	str	r0, [r6, #0]
 8000f7e:	4621      	mov	r1, r4
 8000f80:	4628      	mov	r0, r5
 8000f82:	f000 fca1 	bl	80018c8 <_sbrk_r>
 8000f86:	1c43      	adds	r3, r0, #1
 8000f88:	d103      	bne.n	8000f92 <sbrk_aligned+0x26>
 8000f8a:	f04f 34ff 	mov.w	r4, #4294967295
 8000f8e:	4620      	mov	r0, r4
 8000f90:	bd70      	pop	{r4, r5, r6, pc}
 8000f92:	1cc4      	adds	r4, r0, #3
 8000f94:	f024 0403 	bic.w	r4, r4, #3
 8000f98:	42a0      	cmp	r0, r4
 8000f9a:	d0f8      	beq.n	8000f8e <sbrk_aligned+0x22>
 8000f9c:	1a21      	subs	r1, r4, r0
 8000f9e:	4628      	mov	r0, r5
 8000fa0:	f000 fc92 	bl	80018c8 <_sbrk_r>
 8000fa4:	3001      	adds	r0, #1
 8000fa6:	d1f2      	bne.n	8000f8e <sbrk_aligned+0x22>
 8000fa8:	e7ef      	b.n	8000f8a <sbrk_aligned+0x1e>
 8000faa:	bf00      	nop
 8000fac:	20000218 	.word	0x20000218

08000fb0 <_malloc_r>:
 8000fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb4:	1ccd      	adds	r5, r1, #3
 8000fb6:	f025 0503 	bic.w	r5, r5, #3
 8000fba:	3508      	adds	r5, #8
 8000fbc:	2d0c      	cmp	r5, #12
 8000fbe:	bf38      	it	cc
 8000fc0:	250c      	movcc	r5, #12
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	db01      	blt.n	8000fcc <_malloc_r+0x1c>
 8000fc8:	42a9      	cmp	r1, r5
 8000fca:	d904      	bls.n	8000fd6 <_malloc_r+0x26>
 8000fcc:	230c      	movs	r3, #12
 8000fce:	6033      	str	r3, [r6, #0]
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80010ac <_malloc_r+0xfc>
 8000fda:	f000 f869 	bl	80010b0 <__malloc_lock>
 8000fde:	f8d8 3000 	ldr.w	r3, [r8]
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	bb44      	cbnz	r4, 8001038 <_malloc_r+0x88>
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	4630      	mov	r0, r6
 8000fea:	f7ff ffbf 	bl	8000f6c <sbrk_aligned>
 8000fee:	1c43      	adds	r3, r0, #1
 8000ff0:	4604      	mov	r4, r0
 8000ff2:	d158      	bne.n	80010a6 <_malloc_r+0xf6>
 8000ff4:	f8d8 4000 	ldr.w	r4, [r8]
 8000ff8:	4627      	mov	r7, r4
 8000ffa:	2f00      	cmp	r7, #0
 8000ffc:	d143      	bne.n	8001086 <_malloc_r+0xd6>
 8000ffe:	2c00      	cmp	r4, #0
 8001000:	d04b      	beq.n	800109a <_malloc_r+0xea>
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	4639      	mov	r1, r7
 8001006:	4630      	mov	r0, r6
 8001008:	eb04 0903 	add.w	r9, r4, r3
 800100c:	f000 fc5c 	bl	80018c8 <_sbrk_r>
 8001010:	4581      	cmp	r9, r0
 8001012:	d142      	bne.n	800109a <_malloc_r+0xea>
 8001014:	6821      	ldr	r1, [r4, #0]
 8001016:	1a6d      	subs	r5, r5, r1
 8001018:	4629      	mov	r1, r5
 800101a:	4630      	mov	r0, r6
 800101c:	f7ff ffa6 	bl	8000f6c <sbrk_aligned>
 8001020:	3001      	adds	r0, #1
 8001022:	d03a      	beq.n	800109a <_malloc_r+0xea>
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	442b      	add	r3, r5
 8001028:	6023      	str	r3, [r4, #0]
 800102a:	f8d8 3000 	ldr.w	r3, [r8]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	bb62      	cbnz	r2, 800108c <_malloc_r+0xdc>
 8001032:	f8c8 7000 	str.w	r7, [r8]
 8001036:	e00f      	b.n	8001058 <_malloc_r+0xa8>
 8001038:	6822      	ldr	r2, [r4, #0]
 800103a:	1b52      	subs	r2, r2, r5
 800103c:	d420      	bmi.n	8001080 <_malloc_r+0xd0>
 800103e:	2a0b      	cmp	r2, #11
 8001040:	d917      	bls.n	8001072 <_malloc_r+0xc2>
 8001042:	1961      	adds	r1, r4, r5
 8001044:	42a3      	cmp	r3, r4
 8001046:	6025      	str	r5, [r4, #0]
 8001048:	bf18      	it	ne
 800104a:	6059      	strne	r1, [r3, #4]
 800104c:	6863      	ldr	r3, [r4, #4]
 800104e:	bf08      	it	eq
 8001050:	f8c8 1000 	streq.w	r1, [r8]
 8001054:	5162      	str	r2, [r4, r5]
 8001056:	604b      	str	r3, [r1, #4]
 8001058:	4630      	mov	r0, r6
 800105a:	f000 f82f 	bl	80010bc <__malloc_unlock>
 800105e:	f104 000b 	add.w	r0, r4, #11
 8001062:	1d23      	adds	r3, r4, #4
 8001064:	f020 0007 	bic.w	r0, r0, #7
 8001068:	1ac2      	subs	r2, r0, r3
 800106a:	bf1c      	itt	ne
 800106c:	1a1b      	subne	r3, r3, r0
 800106e:	50a3      	strne	r3, [r4, r2]
 8001070:	e7af      	b.n	8000fd2 <_malloc_r+0x22>
 8001072:	6862      	ldr	r2, [r4, #4]
 8001074:	42a3      	cmp	r3, r4
 8001076:	bf0c      	ite	eq
 8001078:	f8c8 2000 	streq.w	r2, [r8]
 800107c:	605a      	strne	r2, [r3, #4]
 800107e:	e7eb      	b.n	8001058 <_malloc_r+0xa8>
 8001080:	4623      	mov	r3, r4
 8001082:	6864      	ldr	r4, [r4, #4]
 8001084:	e7ae      	b.n	8000fe4 <_malloc_r+0x34>
 8001086:	463c      	mov	r4, r7
 8001088:	687f      	ldr	r7, [r7, #4]
 800108a:	e7b6      	b.n	8000ffa <_malloc_r+0x4a>
 800108c:	461a      	mov	r2, r3
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	42a3      	cmp	r3, r4
 8001092:	d1fb      	bne.n	800108c <_malloc_r+0xdc>
 8001094:	2300      	movs	r3, #0
 8001096:	6053      	str	r3, [r2, #4]
 8001098:	e7de      	b.n	8001058 <_malloc_r+0xa8>
 800109a:	230c      	movs	r3, #12
 800109c:	6033      	str	r3, [r6, #0]
 800109e:	4630      	mov	r0, r6
 80010a0:	f000 f80c 	bl	80010bc <__malloc_unlock>
 80010a4:	e794      	b.n	8000fd0 <_malloc_r+0x20>
 80010a6:	6005      	str	r5, [r0, #0]
 80010a8:	e7d6      	b.n	8001058 <_malloc_r+0xa8>
 80010aa:	bf00      	nop
 80010ac:	2000021c 	.word	0x2000021c

080010b0 <__malloc_lock>:
 80010b0:	4801      	ldr	r0, [pc, #4]	@ (80010b8 <__malloc_lock+0x8>)
 80010b2:	f7ff bf0e 	b.w	8000ed2 <__retarget_lock_acquire_recursive>
 80010b6:	bf00      	nop
 80010b8:	20000214 	.word	0x20000214

080010bc <__malloc_unlock>:
 80010bc:	4801      	ldr	r0, [pc, #4]	@ (80010c4 <__malloc_unlock+0x8>)
 80010be:	f7ff bf09 	b.w	8000ed4 <__retarget_lock_release_recursive>
 80010c2:	bf00      	nop
 80010c4:	20000214 	.word	0x20000214

080010c8 <__sfputc_r>:
 80010c8:	6893      	ldr	r3, [r2, #8]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	b410      	push	{r4}
 80010d0:	6093      	str	r3, [r2, #8]
 80010d2:	da08      	bge.n	80010e6 <__sfputc_r+0x1e>
 80010d4:	6994      	ldr	r4, [r2, #24]
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	db01      	blt.n	80010de <__sfputc_r+0x16>
 80010da:	290a      	cmp	r1, #10
 80010dc:	d103      	bne.n	80010e6 <__sfputc_r+0x1e>
 80010de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e2:	f7ff bde8 	b.w	8000cb6 <__swbuf_r>
 80010e6:	6813      	ldr	r3, [r2, #0]
 80010e8:	1c58      	adds	r0, r3, #1
 80010ea:	6010      	str	r0, [r2, #0]
 80010ec:	7019      	strb	r1, [r3, #0]
 80010ee:	4608      	mov	r0, r1
 80010f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <__sfputs_r>:
 80010f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f8:	4606      	mov	r6, r0
 80010fa:	460f      	mov	r7, r1
 80010fc:	4614      	mov	r4, r2
 80010fe:	18d5      	adds	r5, r2, r3
 8001100:	42ac      	cmp	r4, r5
 8001102:	d101      	bne.n	8001108 <__sfputs_r+0x12>
 8001104:	2000      	movs	r0, #0
 8001106:	e007      	b.n	8001118 <__sfputs_r+0x22>
 8001108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800110c:	463a      	mov	r2, r7
 800110e:	4630      	mov	r0, r6
 8001110:	f7ff ffda 	bl	80010c8 <__sfputc_r>
 8001114:	1c43      	adds	r3, r0, #1
 8001116:	d1f3      	bne.n	8001100 <__sfputs_r+0xa>
 8001118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800111c <_vfiprintf_r>:
 800111c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001120:	460d      	mov	r5, r1
 8001122:	b09d      	sub	sp, #116	@ 0x74
 8001124:	4614      	mov	r4, r2
 8001126:	4698      	mov	r8, r3
 8001128:	4606      	mov	r6, r0
 800112a:	b118      	cbz	r0, 8001134 <_vfiprintf_r+0x18>
 800112c:	6a03      	ldr	r3, [r0, #32]
 800112e:	b90b      	cbnz	r3, 8001134 <_vfiprintf_r+0x18>
 8001130:	f7ff fcd8 	bl	8000ae4 <__sinit>
 8001134:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001136:	07d9      	lsls	r1, r3, #31
 8001138:	d405      	bmi.n	8001146 <_vfiprintf_r+0x2a>
 800113a:	89ab      	ldrh	r3, [r5, #12]
 800113c:	059a      	lsls	r2, r3, #22
 800113e:	d402      	bmi.n	8001146 <_vfiprintf_r+0x2a>
 8001140:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001142:	f7ff fec6 	bl	8000ed2 <__retarget_lock_acquire_recursive>
 8001146:	89ab      	ldrh	r3, [r5, #12]
 8001148:	071b      	lsls	r3, r3, #28
 800114a:	d501      	bpl.n	8001150 <_vfiprintf_r+0x34>
 800114c:	692b      	ldr	r3, [r5, #16]
 800114e:	b99b      	cbnz	r3, 8001178 <_vfiprintf_r+0x5c>
 8001150:	4629      	mov	r1, r5
 8001152:	4630      	mov	r0, r6
 8001154:	f7ff fdee 	bl	8000d34 <__swsetup_r>
 8001158:	b170      	cbz	r0, 8001178 <_vfiprintf_r+0x5c>
 800115a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800115c:	07dc      	lsls	r4, r3, #31
 800115e:	d504      	bpl.n	800116a <_vfiprintf_r+0x4e>
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	b01d      	add	sp, #116	@ 0x74
 8001166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800116a:	89ab      	ldrh	r3, [r5, #12]
 800116c:	0598      	lsls	r0, r3, #22
 800116e:	d4f7      	bmi.n	8001160 <_vfiprintf_r+0x44>
 8001170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001172:	f7ff feaf 	bl	8000ed4 <__retarget_lock_release_recursive>
 8001176:	e7f3      	b.n	8001160 <_vfiprintf_r+0x44>
 8001178:	2300      	movs	r3, #0
 800117a:	9309      	str	r3, [sp, #36]	@ 0x24
 800117c:	2320      	movs	r3, #32
 800117e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001182:	f8cd 800c 	str.w	r8, [sp, #12]
 8001186:	2330      	movs	r3, #48	@ 0x30
 8001188:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001338 <_vfiprintf_r+0x21c>
 800118c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001190:	f04f 0901 	mov.w	r9, #1
 8001194:	4623      	mov	r3, r4
 8001196:	469a      	mov	sl, r3
 8001198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800119c:	b10a      	cbz	r2, 80011a2 <_vfiprintf_r+0x86>
 800119e:	2a25      	cmp	r2, #37	@ 0x25
 80011a0:	d1f9      	bne.n	8001196 <_vfiprintf_r+0x7a>
 80011a2:	ebba 0b04 	subs.w	fp, sl, r4
 80011a6:	d00b      	beq.n	80011c0 <_vfiprintf_r+0xa4>
 80011a8:	465b      	mov	r3, fp
 80011aa:	4622      	mov	r2, r4
 80011ac:	4629      	mov	r1, r5
 80011ae:	4630      	mov	r0, r6
 80011b0:	f7ff ffa1 	bl	80010f6 <__sfputs_r>
 80011b4:	3001      	adds	r0, #1
 80011b6:	f000 80a7 	beq.w	8001308 <_vfiprintf_r+0x1ec>
 80011ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80011bc:	445a      	add	r2, fp
 80011be:	9209      	str	r2, [sp, #36]	@ 0x24
 80011c0:	f89a 3000 	ldrb.w	r3, [sl]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 809f 	beq.w	8001308 <_vfiprintf_r+0x1ec>
 80011ca:	2300      	movs	r3, #0
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80011d4:	f10a 0a01 	add.w	sl, sl, #1
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	9307      	str	r3, [sp, #28]
 80011dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80011e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80011e2:	4654      	mov	r4, sl
 80011e4:	2205      	movs	r2, #5
 80011e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011ea:	4853      	ldr	r0, [pc, #332]	@ (8001338 <_vfiprintf_r+0x21c>)
 80011ec:	f7fe fff0 	bl	80001d0 <memchr>
 80011f0:	9a04      	ldr	r2, [sp, #16]
 80011f2:	b9d8      	cbnz	r0, 800122c <_vfiprintf_r+0x110>
 80011f4:	06d1      	lsls	r1, r2, #27
 80011f6:	bf44      	itt	mi
 80011f8:	2320      	movmi	r3, #32
 80011fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80011fe:	0713      	lsls	r3, r2, #28
 8001200:	bf44      	itt	mi
 8001202:	232b      	movmi	r3, #43	@ 0x2b
 8001204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001208:	f89a 3000 	ldrb.w	r3, [sl]
 800120c:	2b2a      	cmp	r3, #42	@ 0x2a
 800120e:	d015      	beq.n	800123c <_vfiprintf_r+0x120>
 8001210:	9a07      	ldr	r2, [sp, #28]
 8001212:	4654      	mov	r4, sl
 8001214:	2000      	movs	r0, #0
 8001216:	f04f 0c0a 	mov.w	ip, #10
 800121a:	4621      	mov	r1, r4
 800121c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001220:	3b30      	subs	r3, #48	@ 0x30
 8001222:	2b09      	cmp	r3, #9
 8001224:	d94b      	bls.n	80012be <_vfiprintf_r+0x1a2>
 8001226:	b1b0      	cbz	r0, 8001256 <_vfiprintf_r+0x13a>
 8001228:	9207      	str	r2, [sp, #28]
 800122a:	e014      	b.n	8001256 <_vfiprintf_r+0x13a>
 800122c:	eba0 0308 	sub.w	r3, r0, r8
 8001230:	fa09 f303 	lsl.w	r3, r9, r3
 8001234:	4313      	orrs	r3, r2
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	46a2      	mov	sl, r4
 800123a:	e7d2      	b.n	80011e2 <_vfiprintf_r+0xc6>
 800123c:	9b03      	ldr	r3, [sp, #12]
 800123e:	1d19      	adds	r1, r3, #4
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	9103      	str	r1, [sp, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bfbb      	ittet	lt
 8001248:	425b      	neglt	r3, r3
 800124a:	f042 0202 	orrlt.w	r2, r2, #2
 800124e:	9307      	strge	r3, [sp, #28]
 8001250:	9307      	strlt	r3, [sp, #28]
 8001252:	bfb8      	it	lt
 8001254:	9204      	strlt	r2, [sp, #16]
 8001256:	7823      	ldrb	r3, [r4, #0]
 8001258:	2b2e      	cmp	r3, #46	@ 0x2e
 800125a:	d10a      	bne.n	8001272 <_vfiprintf_r+0x156>
 800125c:	7863      	ldrb	r3, [r4, #1]
 800125e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001260:	d132      	bne.n	80012c8 <_vfiprintf_r+0x1ac>
 8001262:	9b03      	ldr	r3, [sp, #12]
 8001264:	1d1a      	adds	r2, r3, #4
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	9203      	str	r2, [sp, #12]
 800126a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800126e:	3402      	adds	r4, #2
 8001270:	9305      	str	r3, [sp, #20]
 8001272:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001348 <_vfiprintf_r+0x22c>
 8001276:	7821      	ldrb	r1, [r4, #0]
 8001278:	2203      	movs	r2, #3
 800127a:	4650      	mov	r0, sl
 800127c:	f7fe ffa8 	bl	80001d0 <memchr>
 8001280:	b138      	cbz	r0, 8001292 <_vfiprintf_r+0x176>
 8001282:	9b04      	ldr	r3, [sp, #16]
 8001284:	eba0 000a 	sub.w	r0, r0, sl
 8001288:	2240      	movs	r2, #64	@ 0x40
 800128a:	4082      	lsls	r2, r0
 800128c:	4313      	orrs	r3, r2
 800128e:	3401      	adds	r4, #1
 8001290:	9304      	str	r3, [sp, #16]
 8001292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001296:	4829      	ldr	r0, [pc, #164]	@ (800133c <_vfiprintf_r+0x220>)
 8001298:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800129c:	2206      	movs	r2, #6
 800129e:	f7fe ff97 	bl	80001d0 <memchr>
 80012a2:	2800      	cmp	r0, #0
 80012a4:	d03f      	beq.n	8001326 <_vfiprintf_r+0x20a>
 80012a6:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <_vfiprintf_r+0x224>)
 80012a8:	bb1b      	cbnz	r3, 80012f2 <_vfiprintf_r+0x1d6>
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	3307      	adds	r3, #7
 80012ae:	f023 0307 	bic.w	r3, r3, #7
 80012b2:	3308      	adds	r3, #8
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80012b8:	443b      	add	r3, r7
 80012ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80012bc:	e76a      	b.n	8001194 <_vfiprintf_r+0x78>
 80012be:	fb0c 3202 	mla	r2, ip, r2, r3
 80012c2:	460c      	mov	r4, r1
 80012c4:	2001      	movs	r0, #1
 80012c6:	e7a8      	b.n	800121a <_vfiprintf_r+0xfe>
 80012c8:	2300      	movs	r3, #0
 80012ca:	3401      	adds	r4, #1
 80012cc:	9305      	str	r3, [sp, #20]
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 0c0a 	mov.w	ip, #10
 80012d4:	4620      	mov	r0, r4
 80012d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80012da:	3a30      	subs	r2, #48	@ 0x30
 80012dc:	2a09      	cmp	r2, #9
 80012de:	d903      	bls.n	80012e8 <_vfiprintf_r+0x1cc>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0c6      	beq.n	8001272 <_vfiprintf_r+0x156>
 80012e4:	9105      	str	r1, [sp, #20]
 80012e6:	e7c4      	b.n	8001272 <_vfiprintf_r+0x156>
 80012e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80012ec:	4604      	mov	r4, r0
 80012ee:	2301      	movs	r3, #1
 80012f0:	e7f0      	b.n	80012d4 <_vfiprintf_r+0x1b8>
 80012f2:	ab03      	add	r3, sp, #12
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	462a      	mov	r2, r5
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <_vfiprintf_r+0x228>)
 80012fa:	a904      	add	r1, sp, #16
 80012fc:	4630      	mov	r0, r6
 80012fe:	f3af 8000 	nop.w
 8001302:	4607      	mov	r7, r0
 8001304:	1c78      	adds	r0, r7, #1
 8001306:	d1d6      	bne.n	80012b6 <_vfiprintf_r+0x19a>
 8001308:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800130a:	07d9      	lsls	r1, r3, #31
 800130c:	d405      	bmi.n	800131a <_vfiprintf_r+0x1fe>
 800130e:	89ab      	ldrh	r3, [r5, #12]
 8001310:	059a      	lsls	r2, r3, #22
 8001312:	d402      	bmi.n	800131a <_vfiprintf_r+0x1fe>
 8001314:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001316:	f7ff fddd 	bl	8000ed4 <__retarget_lock_release_recursive>
 800131a:	89ab      	ldrh	r3, [r5, #12]
 800131c:	065b      	lsls	r3, r3, #25
 800131e:	f53f af1f 	bmi.w	8001160 <_vfiprintf_r+0x44>
 8001322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001324:	e71e      	b.n	8001164 <_vfiprintf_r+0x48>
 8001326:	ab03      	add	r3, sp, #12
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	462a      	mov	r2, r5
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <_vfiprintf_r+0x228>)
 800132e:	a904      	add	r1, sp, #16
 8001330:	4630      	mov	r0, r6
 8001332:	f000 f879 	bl	8001428 <_printf_i>
 8001336:	e7e4      	b.n	8001302 <_vfiprintf_r+0x1e6>
 8001338:	080019c4 	.word	0x080019c4
 800133c:	080019ce 	.word	0x080019ce
 8001340:	00000000 	.word	0x00000000
 8001344:	080010f7 	.word	0x080010f7
 8001348:	080019ca 	.word	0x080019ca

0800134c <_printf_common>:
 800134c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001350:	4616      	mov	r6, r2
 8001352:	4698      	mov	r8, r3
 8001354:	688a      	ldr	r2, [r1, #8]
 8001356:	690b      	ldr	r3, [r1, #16]
 8001358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800135c:	4293      	cmp	r3, r2
 800135e:	bfb8      	it	lt
 8001360:	4613      	movlt	r3, r2
 8001362:	6033      	str	r3, [r6, #0]
 8001364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001368:	4607      	mov	r7, r0
 800136a:	460c      	mov	r4, r1
 800136c:	b10a      	cbz	r2, 8001372 <_printf_common+0x26>
 800136e:	3301      	adds	r3, #1
 8001370:	6033      	str	r3, [r6, #0]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	0699      	lsls	r1, r3, #26
 8001376:	bf42      	ittt	mi
 8001378:	6833      	ldrmi	r3, [r6, #0]
 800137a:	3302      	addmi	r3, #2
 800137c:	6033      	strmi	r3, [r6, #0]
 800137e:	6825      	ldr	r5, [r4, #0]
 8001380:	f015 0506 	ands.w	r5, r5, #6
 8001384:	d106      	bne.n	8001394 <_printf_common+0x48>
 8001386:	f104 0a19 	add.w	sl, r4, #25
 800138a:	68e3      	ldr	r3, [r4, #12]
 800138c:	6832      	ldr	r2, [r6, #0]
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	42ab      	cmp	r3, r5
 8001392:	dc26      	bgt.n	80013e2 <_printf_common+0x96>
 8001394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001398:	6822      	ldr	r2, [r4, #0]
 800139a:	3b00      	subs	r3, #0
 800139c:	bf18      	it	ne
 800139e:	2301      	movne	r3, #1
 80013a0:	0692      	lsls	r2, r2, #26
 80013a2:	d42b      	bmi.n	80013fc <_printf_common+0xb0>
 80013a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80013a8:	4641      	mov	r1, r8
 80013aa:	4638      	mov	r0, r7
 80013ac:	47c8      	blx	r9
 80013ae:	3001      	adds	r0, #1
 80013b0:	d01e      	beq.n	80013f0 <_printf_common+0xa4>
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	f003 0306 	and.w	r3, r3, #6
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf02      	ittt	eq
 80013be:	68e5      	ldreq	r5, [r4, #12]
 80013c0:	6833      	ldreq	r3, [r6, #0]
 80013c2:	1aed      	subeq	r5, r5, r3
 80013c4:	68a3      	ldr	r3, [r4, #8]
 80013c6:	bf0c      	ite	eq
 80013c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013cc:	2500      	movne	r5, #0
 80013ce:	4293      	cmp	r3, r2
 80013d0:	bfc4      	itt	gt
 80013d2:	1a9b      	subgt	r3, r3, r2
 80013d4:	18ed      	addgt	r5, r5, r3
 80013d6:	2600      	movs	r6, #0
 80013d8:	341a      	adds	r4, #26
 80013da:	42b5      	cmp	r5, r6
 80013dc:	d11a      	bne.n	8001414 <_printf_common+0xc8>
 80013de:	2000      	movs	r0, #0
 80013e0:	e008      	b.n	80013f4 <_printf_common+0xa8>
 80013e2:	2301      	movs	r3, #1
 80013e4:	4652      	mov	r2, sl
 80013e6:	4641      	mov	r1, r8
 80013e8:	4638      	mov	r0, r7
 80013ea:	47c8      	blx	r9
 80013ec:	3001      	adds	r0, #1
 80013ee:	d103      	bne.n	80013f8 <_printf_common+0xac>
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f8:	3501      	adds	r5, #1
 80013fa:	e7c6      	b.n	800138a <_printf_common+0x3e>
 80013fc:	18e1      	adds	r1, r4, r3
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	2030      	movs	r0, #48	@ 0x30
 8001402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001406:	4422      	add	r2, r4
 8001408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800140c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001410:	3302      	adds	r3, #2
 8001412:	e7c7      	b.n	80013a4 <_printf_common+0x58>
 8001414:	2301      	movs	r3, #1
 8001416:	4622      	mov	r2, r4
 8001418:	4641      	mov	r1, r8
 800141a:	4638      	mov	r0, r7
 800141c:	47c8      	blx	r9
 800141e:	3001      	adds	r0, #1
 8001420:	d0e6      	beq.n	80013f0 <_printf_common+0xa4>
 8001422:	3601      	adds	r6, #1
 8001424:	e7d9      	b.n	80013da <_printf_common+0x8e>
	...

08001428 <_printf_i>:
 8001428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800142c:	7e0f      	ldrb	r7, [r1, #24]
 800142e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001430:	2f78      	cmp	r7, #120	@ 0x78
 8001432:	4691      	mov	r9, r2
 8001434:	4680      	mov	r8, r0
 8001436:	460c      	mov	r4, r1
 8001438:	469a      	mov	sl, r3
 800143a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800143e:	d807      	bhi.n	8001450 <_printf_i+0x28>
 8001440:	2f62      	cmp	r7, #98	@ 0x62
 8001442:	d80a      	bhi.n	800145a <_printf_i+0x32>
 8001444:	2f00      	cmp	r7, #0
 8001446:	f000 80d2 	beq.w	80015ee <_printf_i+0x1c6>
 800144a:	2f58      	cmp	r7, #88	@ 0x58
 800144c:	f000 80b9 	beq.w	80015c2 <_printf_i+0x19a>
 8001450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001458:	e03a      	b.n	80014d0 <_printf_i+0xa8>
 800145a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800145e:	2b15      	cmp	r3, #21
 8001460:	d8f6      	bhi.n	8001450 <_printf_i+0x28>
 8001462:	a101      	add	r1, pc, #4	@ (adr r1, 8001468 <_printf_i+0x40>)
 8001464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001468:	080014c1 	.word	0x080014c1
 800146c:	080014d5 	.word	0x080014d5
 8001470:	08001451 	.word	0x08001451
 8001474:	08001451 	.word	0x08001451
 8001478:	08001451 	.word	0x08001451
 800147c:	08001451 	.word	0x08001451
 8001480:	080014d5 	.word	0x080014d5
 8001484:	08001451 	.word	0x08001451
 8001488:	08001451 	.word	0x08001451
 800148c:	08001451 	.word	0x08001451
 8001490:	08001451 	.word	0x08001451
 8001494:	080015d5 	.word	0x080015d5
 8001498:	080014ff 	.word	0x080014ff
 800149c:	0800158f 	.word	0x0800158f
 80014a0:	08001451 	.word	0x08001451
 80014a4:	08001451 	.word	0x08001451
 80014a8:	080015f7 	.word	0x080015f7
 80014ac:	08001451 	.word	0x08001451
 80014b0:	080014ff 	.word	0x080014ff
 80014b4:	08001451 	.word	0x08001451
 80014b8:	08001451 	.word	0x08001451
 80014bc:	08001597 	.word	0x08001597
 80014c0:	6833      	ldr	r3, [r6, #0]
 80014c2:	1d1a      	adds	r2, r3, #4
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6032      	str	r2, [r6, #0]
 80014c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80014cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80014d0:	2301      	movs	r3, #1
 80014d2:	e09d      	b.n	8001610 <_printf_i+0x1e8>
 80014d4:	6833      	ldr	r3, [r6, #0]
 80014d6:	6820      	ldr	r0, [r4, #0]
 80014d8:	1d19      	adds	r1, r3, #4
 80014da:	6031      	str	r1, [r6, #0]
 80014dc:	0606      	lsls	r6, r0, #24
 80014de:	d501      	bpl.n	80014e4 <_printf_i+0xbc>
 80014e0:	681d      	ldr	r5, [r3, #0]
 80014e2:	e003      	b.n	80014ec <_printf_i+0xc4>
 80014e4:	0645      	lsls	r5, r0, #25
 80014e6:	d5fb      	bpl.n	80014e0 <_printf_i+0xb8>
 80014e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	da03      	bge.n	80014f8 <_printf_i+0xd0>
 80014f0:	232d      	movs	r3, #45	@ 0x2d
 80014f2:	426d      	negs	r5, r5
 80014f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80014f8:	4859      	ldr	r0, [pc, #356]	@ (8001660 <_printf_i+0x238>)
 80014fa:	230a      	movs	r3, #10
 80014fc:	e011      	b.n	8001522 <_printf_i+0xfa>
 80014fe:	6821      	ldr	r1, [r4, #0]
 8001500:	6833      	ldr	r3, [r6, #0]
 8001502:	0608      	lsls	r0, r1, #24
 8001504:	f853 5b04 	ldr.w	r5, [r3], #4
 8001508:	d402      	bmi.n	8001510 <_printf_i+0xe8>
 800150a:	0649      	lsls	r1, r1, #25
 800150c:	bf48      	it	mi
 800150e:	b2ad      	uxthmi	r5, r5
 8001510:	2f6f      	cmp	r7, #111	@ 0x6f
 8001512:	4853      	ldr	r0, [pc, #332]	@ (8001660 <_printf_i+0x238>)
 8001514:	6033      	str	r3, [r6, #0]
 8001516:	bf14      	ite	ne
 8001518:	230a      	movne	r3, #10
 800151a:	2308      	moveq	r3, #8
 800151c:	2100      	movs	r1, #0
 800151e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001522:	6866      	ldr	r6, [r4, #4]
 8001524:	60a6      	str	r6, [r4, #8]
 8001526:	2e00      	cmp	r6, #0
 8001528:	bfa2      	ittt	ge
 800152a:	6821      	ldrge	r1, [r4, #0]
 800152c:	f021 0104 	bicge.w	r1, r1, #4
 8001530:	6021      	strge	r1, [r4, #0]
 8001532:	b90d      	cbnz	r5, 8001538 <_printf_i+0x110>
 8001534:	2e00      	cmp	r6, #0
 8001536:	d04b      	beq.n	80015d0 <_printf_i+0x1a8>
 8001538:	4616      	mov	r6, r2
 800153a:	fbb5 f1f3 	udiv	r1, r5, r3
 800153e:	fb03 5711 	mls	r7, r3, r1, r5
 8001542:	5dc7      	ldrb	r7, [r0, r7]
 8001544:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001548:	462f      	mov	r7, r5
 800154a:	42bb      	cmp	r3, r7
 800154c:	460d      	mov	r5, r1
 800154e:	d9f4      	bls.n	800153a <_printf_i+0x112>
 8001550:	2b08      	cmp	r3, #8
 8001552:	d10b      	bne.n	800156c <_printf_i+0x144>
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	07df      	lsls	r7, r3, #31
 8001558:	d508      	bpl.n	800156c <_printf_i+0x144>
 800155a:	6923      	ldr	r3, [r4, #16]
 800155c:	6861      	ldr	r1, [r4, #4]
 800155e:	4299      	cmp	r1, r3
 8001560:	bfde      	ittt	le
 8001562:	2330      	movle	r3, #48	@ 0x30
 8001564:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001568:	f106 36ff 	addle.w	r6, r6, #4294967295
 800156c:	1b92      	subs	r2, r2, r6
 800156e:	6122      	str	r2, [r4, #16]
 8001570:	f8cd a000 	str.w	sl, [sp]
 8001574:	464b      	mov	r3, r9
 8001576:	aa03      	add	r2, sp, #12
 8001578:	4621      	mov	r1, r4
 800157a:	4640      	mov	r0, r8
 800157c:	f7ff fee6 	bl	800134c <_printf_common>
 8001580:	3001      	adds	r0, #1
 8001582:	d14a      	bne.n	800161a <_printf_i+0x1f2>
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	b004      	add	sp, #16
 800158a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800158e:	6823      	ldr	r3, [r4, #0]
 8001590:	f043 0320 	orr.w	r3, r3, #32
 8001594:	6023      	str	r3, [r4, #0]
 8001596:	4833      	ldr	r0, [pc, #204]	@ (8001664 <_printf_i+0x23c>)
 8001598:	2778      	movs	r7, #120	@ 0x78
 800159a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800159e:	6823      	ldr	r3, [r4, #0]
 80015a0:	6831      	ldr	r1, [r6, #0]
 80015a2:	061f      	lsls	r7, r3, #24
 80015a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80015a8:	d402      	bmi.n	80015b0 <_printf_i+0x188>
 80015aa:	065f      	lsls	r7, r3, #25
 80015ac:	bf48      	it	mi
 80015ae:	b2ad      	uxthmi	r5, r5
 80015b0:	6031      	str	r1, [r6, #0]
 80015b2:	07d9      	lsls	r1, r3, #31
 80015b4:	bf44      	itt	mi
 80015b6:	f043 0320 	orrmi.w	r3, r3, #32
 80015ba:	6023      	strmi	r3, [r4, #0]
 80015bc:	b11d      	cbz	r5, 80015c6 <_printf_i+0x19e>
 80015be:	2310      	movs	r3, #16
 80015c0:	e7ac      	b.n	800151c <_printf_i+0xf4>
 80015c2:	4827      	ldr	r0, [pc, #156]	@ (8001660 <_printf_i+0x238>)
 80015c4:	e7e9      	b.n	800159a <_printf_i+0x172>
 80015c6:	6823      	ldr	r3, [r4, #0]
 80015c8:	f023 0320 	bic.w	r3, r3, #32
 80015cc:	6023      	str	r3, [r4, #0]
 80015ce:	e7f6      	b.n	80015be <_printf_i+0x196>
 80015d0:	4616      	mov	r6, r2
 80015d2:	e7bd      	b.n	8001550 <_printf_i+0x128>
 80015d4:	6833      	ldr	r3, [r6, #0]
 80015d6:	6825      	ldr	r5, [r4, #0]
 80015d8:	6961      	ldr	r1, [r4, #20]
 80015da:	1d18      	adds	r0, r3, #4
 80015dc:	6030      	str	r0, [r6, #0]
 80015de:	062e      	lsls	r6, r5, #24
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	d501      	bpl.n	80015e8 <_printf_i+0x1c0>
 80015e4:	6019      	str	r1, [r3, #0]
 80015e6:	e002      	b.n	80015ee <_printf_i+0x1c6>
 80015e8:	0668      	lsls	r0, r5, #25
 80015ea:	d5fb      	bpl.n	80015e4 <_printf_i+0x1bc>
 80015ec:	8019      	strh	r1, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	6123      	str	r3, [r4, #16]
 80015f2:	4616      	mov	r6, r2
 80015f4:	e7bc      	b.n	8001570 <_printf_i+0x148>
 80015f6:	6833      	ldr	r3, [r6, #0]
 80015f8:	1d1a      	adds	r2, r3, #4
 80015fa:	6032      	str	r2, [r6, #0]
 80015fc:	681e      	ldr	r6, [r3, #0]
 80015fe:	6862      	ldr	r2, [r4, #4]
 8001600:	2100      	movs	r1, #0
 8001602:	4630      	mov	r0, r6
 8001604:	f7fe fde4 	bl	80001d0 <memchr>
 8001608:	b108      	cbz	r0, 800160e <_printf_i+0x1e6>
 800160a:	1b80      	subs	r0, r0, r6
 800160c:	6060      	str	r0, [r4, #4]
 800160e:	6863      	ldr	r3, [r4, #4]
 8001610:	6123      	str	r3, [r4, #16]
 8001612:	2300      	movs	r3, #0
 8001614:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001618:	e7aa      	b.n	8001570 <_printf_i+0x148>
 800161a:	6923      	ldr	r3, [r4, #16]
 800161c:	4632      	mov	r2, r6
 800161e:	4649      	mov	r1, r9
 8001620:	4640      	mov	r0, r8
 8001622:	47d0      	blx	sl
 8001624:	3001      	adds	r0, #1
 8001626:	d0ad      	beq.n	8001584 <_printf_i+0x15c>
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	079b      	lsls	r3, r3, #30
 800162c:	d413      	bmi.n	8001656 <_printf_i+0x22e>
 800162e:	68e0      	ldr	r0, [r4, #12]
 8001630:	9b03      	ldr	r3, [sp, #12]
 8001632:	4298      	cmp	r0, r3
 8001634:	bfb8      	it	lt
 8001636:	4618      	movlt	r0, r3
 8001638:	e7a6      	b.n	8001588 <_printf_i+0x160>
 800163a:	2301      	movs	r3, #1
 800163c:	4632      	mov	r2, r6
 800163e:	4649      	mov	r1, r9
 8001640:	4640      	mov	r0, r8
 8001642:	47d0      	blx	sl
 8001644:	3001      	adds	r0, #1
 8001646:	d09d      	beq.n	8001584 <_printf_i+0x15c>
 8001648:	3501      	adds	r5, #1
 800164a:	68e3      	ldr	r3, [r4, #12]
 800164c:	9903      	ldr	r1, [sp, #12]
 800164e:	1a5b      	subs	r3, r3, r1
 8001650:	42ab      	cmp	r3, r5
 8001652:	dcf2      	bgt.n	800163a <_printf_i+0x212>
 8001654:	e7eb      	b.n	800162e <_printf_i+0x206>
 8001656:	2500      	movs	r5, #0
 8001658:	f104 0619 	add.w	r6, r4, #25
 800165c:	e7f5      	b.n	800164a <_printf_i+0x222>
 800165e:	bf00      	nop
 8001660:	080019d5 	.word	0x080019d5
 8001664:	080019e6 	.word	0x080019e6

08001668 <__sflush_r>:
 8001668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001670:	0716      	lsls	r6, r2, #28
 8001672:	4605      	mov	r5, r0
 8001674:	460c      	mov	r4, r1
 8001676:	d454      	bmi.n	8001722 <__sflush_r+0xba>
 8001678:	684b      	ldr	r3, [r1, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	dc02      	bgt.n	8001684 <__sflush_r+0x1c>
 800167e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd48      	ble.n	8001716 <__sflush_r+0xae>
 8001684:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001686:	2e00      	cmp	r6, #0
 8001688:	d045      	beq.n	8001716 <__sflush_r+0xae>
 800168a:	2300      	movs	r3, #0
 800168c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001690:	682f      	ldr	r7, [r5, #0]
 8001692:	6a21      	ldr	r1, [r4, #32]
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	d030      	beq.n	80016fa <__sflush_r+0x92>
 8001698:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800169a:	89a3      	ldrh	r3, [r4, #12]
 800169c:	0759      	lsls	r1, r3, #29
 800169e:	d505      	bpl.n	80016ac <__sflush_r+0x44>
 80016a0:	6863      	ldr	r3, [r4, #4]
 80016a2:	1ad2      	subs	r2, r2, r3
 80016a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80016a6:	b10b      	cbz	r3, 80016ac <__sflush_r+0x44>
 80016a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80016aa:	1ad2      	subs	r2, r2, r3
 80016ac:	2300      	movs	r3, #0
 80016ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80016b0:	6a21      	ldr	r1, [r4, #32]
 80016b2:	4628      	mov	r0, r5
 80016b4:	47b0      	blx	r6
 80016b6:	1c43      	adds	r3, r0, #1
 80016b8:	89a3      	ldrh	r3, [r4, #12]
 80016ba:	d106      	bne.n	80016ca <__sflush_r+0x62>
 80016bc:	6829      	ldr	r1, [r5, #0]
 80016be:	291d      	cmp	r1, #29
 80016c0:	d82b      	bhi.n	800171a <__sflush_r+0xb2>
 80016c2:	4a2a      	ldr	r2, [pc, #168]	@ (800176c <__sflush_r+0x104>)
 80016c4:	410a      	asrs	r2, r1
 80016c6:	07d6      	lsls	r6, r2, #31
 80016c8:	d427      	bmi.n	800171a <__sflush_r+0xb2>
 80016ca:	2200      	movs	r2, #0
 80016cc:	6062      	str	r2, [r4, #4]
 80016ce:	04d9      	lsls	r1, r3, #19
 80016d0:	6922      	ldr	r2, [r4, #16]
 80016d2:	6022      	str	r2, [r4, #0]
 80016d4:	d504      	bpl.n	80016e0 <__sflush_r+0x78>
 80016d6:	1c42      	adds	r2, r0, #1
 80016d8:	d101      	bne.n	80016de <__sflush_r+0x76>
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	b903      	cbnz	r3, 80016e0 <__sflush_r+0x78>
 80016de:	6560      	str	r0, [r4, #84]	@ 0x54
 80016e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016e2:	602f      	str	r7, [r5, #0]
 80016e4:	b1b9      	cbz	r1, 8001716 <__sflush_r+0xae>
 80016e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016ea:	4299      	cmp	r1, r3
 80016ec:	d002      	beq.n	80016f4 <__sflush_r+0x8c>
 80016ee:	4628      	mov	r0, r5
 80016f0:	f7ff fbf2 	bl	8000ed8 <_free_r>
 80016f4:	2300      	movs	r3, #0
 80016f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80016f8:	e00d      	b.n	8001716 <__sflush_r+0xae>
 80016fa:	2301      	movs	r3, #1
 80016fc:	4628      	mov	r0, r5
 80016fe:	47b0      	blx	r6
 8001700:	4602      	mov	r2, r0
 8001702:	1c50      	adds	r0, r2, #1
 8001704:	d1c9      	bne.n	800169a <__sflush_r+0x32>
 8001706:	682b      	ldr	r3, [r5, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0c6      	beq.n	800169a <__sflush_r+0x32>
 800170c:	2b1d      	cmp	r3, #29
 800170e:	d001      	beq.n	8001714 <__sflush_r+0xac>
 8001710:	2b16      	cmp	r3, #22
 8001712:	d11e      	bne.n	8001752 <__sflush_r+0xea>
 8001714:	602f      	str	r7, [r5, #0]
 8001716:	2000      	movs	r0, #0
 8001718:	e022      	b.n	8001760 <__sflush_r+0xf8>
 800171a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800171e:	b21b      	sxth	r3, r3
 8001720:	e01b      	b.n	800175a <__sflush_r+0xf2>
 8001722:	690f      	ldr	r7, [r1, #16]
 8001724:	2f00      	cmp	r7, #0
 8001726:	d0f6      	beq.n	8001716 <__sflush_r+0xae>
 8001728:	0793      	lsls	r3, r2, #30
 800172a:	680e      	ldr	r6, [r1, #0]
 800172c:	bf08      	it	eq
 800172e:	694b      	ldreq	r3, [r1, #20]
 8001730:	600f      	str	r7, [r1, #0]
 8001732:	bf18      	it	ne
 8001734:	2300      	movne	r3, #0
 8001736:	eba6 0807 	sub.w	r8, r6, r7
 800173a:	608b      	str	r3, [r1, #8]
 800173c:	f1b8 0f00 	cmp.w	r8, #0
 8001740:	dde9      	ble.n	8001716 <__sflush_r+0xae>
 8001742:	6a21      	ldr	r1, [r4, #32]
 8001744:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001746:	4643      	mov	r3, r8
 8001748:	463a      	mov	r2, r7
 800174a:	4628      	mov	r0, r5
 800174c:	47b0      	blx	r6
 800174e:	2800      	cmp	r0, #0
 8001750:	dc08      	bgt.n	8001764 <__sflush_r+0xfc>
 8001752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001764:	4407      	add	r7, r0
 8001766:	eba8 0800 	sub.w	r8, r8, r0
 800176a:	e7e7      	b.n	800173c <__sflush_r+0xd4>
 800176c:	dfbffffe 	.word	0xdfbffffe

08001770 <_fflush_r>:
 8001770:	b538      	push	{r3, r4, r5, lr}
 8001772:	690b      	ldr	r3, [r1, #16]
 8001774:	4605      	mov	r5, r0
 8001776:	460c      	mov	r4, r1
 8001778:	b913      	cbnz	r3, 8001780 <_fflush_r+0x10>
 800177a:	2500      	movs	r5, #0
 800177c:	4628      	mov	r0, r5
 800177e:	bd38      	pop	{r3, r4, r5, pc}
 8001780:	b118      	cbz	r0, 800178a <_fflush_r+0x1a>
 8001782:	6a03      	ldr	r3, [r0, #32]
 8001784:	b90b      	cbnz	r3, 800178a <_fflush_r+0x1a>
 8001786:	f7ff f9ad 	bl	8000ae4 <__sinit>
 800178a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f3      	beq.n	800177a <_fflush_r+0xa>
 8001792:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001794:	07d0      	lsls	r0, r2, #31
 8001796:	d404      	bmi.n	80017a2 <_fflush_r+0x32>
 8001798:	0599      	lsls	r1, r3, #22
 800179a:	d402      	bmi.n	80017a2 <_fflush_r+0x32>
 800179c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800179e:	f7ff fb98 	bl	8000ed2 <__retarget_lock_acquire_recursive>
 80017a2:	4628      	mov	r0, r5
 80017a4:	4621      	mov	r1, r4
 80017a6:	f7ff ff5f 	bl	8001668 <__sflush_r>
 80017aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017ac:	07da      	lsls	r2, r3, #31
 80017ae:	4605      	mov	r5, r0
 80017b0:	d4e4      	bmi.n	800177c <_fflush_r+0xc>
 80017b2:	89a3      	ldrh	r3, [r4, #12]
 80017b4:	059b      	lsls	r3, r3, #22
 80017b6:	d4e1      	bmi.n	800177c <_fflush_r+0xc>
 80017b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017ba:	f7ff fb8b 	bl	8000ed4 <__retarget_lock_release_recursive>
 80017be:	e7dd      	b.n	800177c <_fflush_r+0xc>

080017c0 <__swhatbuf_r>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	460c      	mov	r4, r1
 80017c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017c8:	2900      	cmp	r1, #0
 80017ca:	b096      	sub	sp, #88	@ 0x58
 80017cc:	4615      	mov	r5, r2
 80017ce:	461e      	mov	r6, r3
 80017d0:	da0d      	bge.n	80017ee <__swhatbuf_r+0x2e>
 80017d2:	89a3      	ldrh	r3, [r4, #12]
 80017d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	bf14      	ite	ne
 80017de:	2340      	movne	r3, #64	@ 0x40
 80017e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80017e4:	2000      	movs	r0, #0
 80017e6:	6031      	str	r1, [r6, #0]
 80017e8:	602b      	str	r3, [r5, #0]
 80017ea:	b016      	add	sp, #88	@ 0x58
 80017ec:	bd70      	pop	{r4, r5, r6, pc}
 80017ee:	466a      	mov	r2, sp
 80017f0:	f000 f848 	bl	8001884 <_fstat_r>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	dbec      	blt.n	80017d2 <__swhatbuf_r+0x12>
 80017f8:	9901      	ldr	r1, [sp, #4]
 80017fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80017fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001802:	4259      	negs	r1, r3
 8001804:	4159      	adcs	r1, r3
 8001806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800180a:	e7eb      	b.n	80017e4 <__swhatbuf_r+0x24>

0800180c <__smakebuf_r>:
 800180c:	898b      	ldrh	r3, [r1, #12]
 800180e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001810:	079d      	lsls	r5, r3, #30
 8001812:	4606      	mov	r6, r0
 8001814:	460c      	mov	r4, r1
 8001816:	d507      	bpl.n	8001828 <__smakebuf_r+0x1c>
 8001818:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	6123      	str	r3, [r4, #16]
 8001820:	2301      	movs	r3, #1
 8001822:	6163      	str	r3, [r4, #20]
 8001824:	b003      	add	sp, #12
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	ab01      	add	r3, sp, #4
 800182a:	466a      	mov	r2, sp
 800182c:	f7ff ffc8 	bl	80017c0 <__swhatbuf_r>
 8001830:	9f00      	ldr	r7, [sp, #0]
 8001832:	4605      	mov	r5, r0
 8001834:	4639      	mov	r1, r7
 8001836:	4630      	mov	r0, r6
 8001838:	f7ff fbba 	bl	8000fb0 <_malloc_r>
 800183c:	b948      	cbnz	r0, 8001852 <__smakebuf_r+0x46>
 800183e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001842:	059a      	lsls	r2, r3, #22
 8001844:	d4ee      	bmi.n	8001824 <__smakebuf_r+0x18>
 8001846:	f023 0303 	bic.w	r3, r3, #3
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	81a3      	strh	r3, [r4, #12]
 8001850:	e7e2      	b.n	8001818 <__smakebuf_r+0xc>
 8001852:	89a3      	ldrh	r3, [r4, #12]
 8001854:	6020      	str	r0, [r4, #0]
 8001856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800185a:	81a3      	strh	r3, [r4, #12]
 800185c:	9b01      	ldr	r3, [sp, #4]
 800185e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001862:	b15b      	cbz	r3, 800187c <__smakebuf_r+0x70>
 8001864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001868:	4630      	mov	r0, r6
 800186a:	f000 f81d 	bl	80018a8 <_isatty_r>
 800186e:	b128      	cbz	r0, 800187c <__smakebuf_r+0x70>
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	f023 0303 	bic.w	r3, r3, #3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	81a3      	strh	r3, [r4, #12]
 800187c:	89a3      	ldrh	r3, [r4, #12]
 800187e:	431d      	orrs	r5, r3
 8001880:	81a5      	strh	r5, [r4, #12]
 8001882:	e7cf      	b.n	8001824 <__smakebuf_r+0x18>

08001884 <_fstat_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4d07      	ldr	r5, [pc, #28]	@ (80018a4 <_fstat_r+0x20>)
 8001888:	2300      	movs	r3, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	4611      	mov	r1, r2
 8001890:	602b      	str	r3, [r5, #0]
 8001892:	f7ff f812 	bl	80008ba <_fstat>
 8001896:	1c43      	adds	r3, r0, #1
 8001898:	d102      	bne.n	80018a0 <_fstat_r+0x1c>
 800189a:	682b      	ldr	r3, [r5, #0]
 800189c:	b103      	cbz	r3, 80018a0 <_fstat_r+0x1c>
 800189e:	6023      	str	r3, [r4, #0]
 80018a0:	bd38      	pop	{r3, r4, r5, pc}
 80018a2:	bf00      	nop
 80018a4:	20000210 	.word	0x20000210

080018a8 <_isatty_r>:
 80018a8:	b538      	push	{r3, r4, r5, lr}
 80018aa:	4d06      	ldr	r5, [pc, #24]	@ (80018c4 <_isatty_r+0x1c>)
 80018ac:	2300      	movs	r3, #0
 80018ae:	4604      	mov	r4, r0
 80018b0:	4608      	mov	r0, r1
 80018b2:	602b      	str	r3, [r5, #0]
 80018b4:	f7ff f811 	bl	80008da <_isatty>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d102      	bne.n	80018c2 <_isatty_r+0x1a>
 80018bc:	682b      	ldr	r3, [r5, #0]
 80018be:	b103      	cbz	r3, 80018c2 <_isatty_r+0x1a>
 80018c0:	6023      	str	r3, [r4, #0]
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
 80018c4:	20000210 	.word	0x20000210

080018c8 <_sbrk_r>:
 80018c8:	b538      	push	{r3, r4, r5, lr}
 80018ca:	4d06      	ldr	r5, [pc, #24]	@ (80018e4 <_sbrk_r+0x1c>)
 80018cc:	2300      	movs	r3, #0
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	602b      	str	r3, [r5, #0]
 80018d4:	f7ff f81a 	bl	800090c <_sbrk>
 80018d8:	1c43      	adds	r3, r0, #1
 80018da:	d102      	bne.n	80018e2 <_sbrk_r+0x1a>
 80018dc:	682b      	ldr	r3, [r5, #0]
 80018de:	b103      	cbz	r3, 80018e2 <_sbrk_r+0x1a>
 80018e0:	6023      	str	r3, [r4, #0]
 80018e2:	bd38      	pop	{r3, r4, r5, pc}
 80018e4:	20000210 	.word	0x20000210

080018e8 <_init>:
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ea:	bf00      	nop
 80018ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ee:	bc08      	pop	{r3}
 80018f0:	469e      	mov	lr, r3
 80018f2:	4770      	bx	lr

080018f4 <_fini>:
 80018f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f6:	bf00      	nop
 80018f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018fa:	bc08      	pop	{r3}
 80018fc:	469e      	mov	lr, r3
 80018fe:	4770      	bx	lr
